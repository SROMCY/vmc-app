<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Tam</name>
  </assembly>
  <members>
    <member name="T:Triamec.FormattingHelper">
      <summary>
            Formatting helper.
            </summary>
    </member>
    <member name="M:Triamec.FormattingHelper.EnumToString(System.Object)">
      <summary>
            Gets <see langword="string" /> that represents the specified enumeration value.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="context">The context, if any.</param>
      <param name="enumType">The enumeration type.</param>
      <returns>
            A <see langword="string" /> that represents <paramref name="value" />.
            </returns>
    </member>
    <member name="M:Triamec.FormattingHelper.EnumToString(System.Type,System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
            Gets <see langword="string" /> that represents the specified enumeration value.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="context">The context, if any.</param>
      <param name="enumType">The enumeration type.</param>
      <returns>
            A <see langword="string" /> that represents <paramref name="value" />.
            </returns>
    </member>
    <member name="M:Triamec.FormattingHelper.EnumToString(System.Type,System.Object)">
      <summary>
            Gets <see langword="string" /> that represents the specified enumeration value.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="context">The context, if any.</param>
      <param name="enumType">The enumeration type.</param>
      <returns>
            A <see langword="string" /> that represents <paramref name="value" />.
            </returns>
    </member>
    <member name="M:Triamec.FormattingHelper.IsFloatingPoint(System.Object)">
      <summary>
            Determines whether the specified value is a floating point value.
            </summary>
      <param name="value">The value to test.</param>
      <returns>
            	Whether the specified value is a floating point value.
            </returns>
    </member>
    <member name="M:Triamec.FormattingHelper.ToString(System.Object,System.IFormatProvider)">
      <summary>
            Gets a <see langword="string" /> that represents the specified value with floating-point round-trip enabled.
            </summary>
      <param name="value">The value to convert or <see langword="null" />.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see langword="string" /> that represents <paramref name="value" />.
            </returns>
    </member>
    <member name="T:Triamec.GlobalizationExtensions">
      <summary>
            Extensions methods for classes from the <see cref="N:System.Globalization" /> namespace.
            </summary>
    </member>
    <member name="M:Triamec.GlobalizationExtensions.DisallowGroupSeparator(System.IFormatProvider)">
      <summary>
            Returns a provider similar to the specified provider where the group separator is disabled.
            </summary>
      <param name="provider">The provider.</param>
      <returns>
            A similar provider.
            </returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> doesn't implement
            <see cref="T:System.ICloneable" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="provider" /> doesn't provide an instance of
            <see cref="T:System.Globalization.NumberFormatInfo" />.</exception>
    </member>
    <member name="T:Triamec.Acquisitions.AcquireContinuation"></member>
    <member name="T:Triamec.Acquisitions.AcquireFuture">
      <summary>
            References a method which is called after an acquisition completed.
            </summary>
      <param name="hasMore">Whether more data can be acquired.</param>
      <param name="failure">An exception thrown during acquisition or <see langword="null" /> on success.</param>
    </member>
    <member name="T:Triamec.Acquisitions.AcquisitionException">
      <summary>
            Exception thrown in case of failures occurring in the <see cref="N:Triamec.Acquisitions" /> framework.
            </summary>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Acquisitions.AcquisitionException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Acquisitions.AcquisitionException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Acquisitions.AcquisitionException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="T:Triamec.Acquisitions.AcquisitionExtensions">
      <summary>
            Provides a set of extension methods for asynchronously starting acquisitions.
            </summary>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.AcquireAsync(Triamec.Acquisitions.IAcquisition,System.TimeSpan)">
      <summary>
            Asynchronously begins to acquire.
            </summary>
      <param name="acquisition">The acquisition.</param>
      <param name="duration">The duration defining data size.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.AcquireAsync(Triamec.Acquisitions.IAcquisition,System.TimeSpan,Triamec.Acquisitions.AcquireContinuation)"></member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.AcquireAsync(Triamec.Acquisitions.IAcquisition,System.TimeSpan,Triamec.Acquisitions.AcquireFuture)">
      <summary>
            Asynchronously begins to acquire.
            </summary>
      <param name="acquisition">The acquisition.</param>
      <param name="duration">The duration defining data size.</param>
      <param name="onCompleted">If specified, provides a callback processing the results of the
            acquisition.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.DisableAsync(Triamec.Acquisitions.IAcquisition,System.Action{Triamec.Acquisitions.AcquisitionException})">
      <summary>Asynchronously stops the acquisition.</summary>
      <param name="acquisition">The acquisition.</param>
      <param name="onCompleted">If specified, provides a callback processing a possible error.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.Multiply(System.TimeSpan,System.Int64)">
      <summary>
            Multiplies a timespan by an integer value.
            </summary>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.RegularizeToDefault``1(Triamec.Acquisitions.IVariable{``0})">
      <summary>
            Produces a stream where each missing sample is represented by <c>default(<typeparamref name="T" />)</c>.
            </summary>
      <param name="variable">The variable, typically having <see cref="P:Triamec.Acquisitions.ISegmentedVariable`1.IsRegular" />
            set to <see langword="false" />.</param>
      <typeparam name="T">Sample type.</typeparam>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.RegularizeToNaN(Triamec.Acquisitions.IVariable{System.Double})">
      <summary>
            Produces a stream where each missing sample is represented by <see cref="F:System.Single.NaN" />.
            </summary>
      <param name="variable">The variable, typically having <see cref="P:Triamec.Acquisitions.ISegmentedVariable`1.IsRegular" />
            set to <see langword="false" />.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.RegularizeToNaN(Triamec.Acquisitions.IVariable{System.Single})">
      <summary>
            Produces a stream where each missing sample is represented by <see cref="F:System.Single.NaN" />.
            </summary>
      <param name="variable">The variable, typically having <see cref="P:Triamec.Acquisitions.ISegmentedVariable`1.IsRegular" />
            set to <see langword="false" />.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.RegularizeToNaN(Triamec.Acquisitions.IVariable{Triamec.TriaLink.Float40})">
      <summary>
            Produces a stream where each missing sample is represented by <see cref="F:Triamec.TriaLink.Float40.NaN" />.
            </summary>
      <param name="variable">The variable, typically having <see cref="P:Triamec.Acquisitions.ISegmentedVariable`1.IsRegular" />
            set to <see langword="false" />.</param>
    </member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.RegularizeToNaN``1(Triamec.Acquisitions.IVariableSegment)"></member>
    <member name="M:Triamec.Acquisitions.AcquisitionExtensions.RegularizeToNull``1(Triamec.Acquisitions.IVariable{``0})">
      <summary>
            Produces a stream where each missing sample is represented by <see langword="null" />.
            </summary>
      <param name="variable">The variable, typically having <see cref="P:Triamec.Acquisitions.ISegmentedVariable`1.IsRegular" />
            set to <see langword="false" />.</param>
    </member>
    <member name="T:Triamec.Acquisitions.IAcquisition">
      <summary>
            Simultaneous data acquisition.
            </summary>
    </member>
    <member name="M:Triamec.Acquisitions.IAcquisition.Acquire(System.TimeSpan)">
      <summary>
            Acquires data spanning the specified duration.
            </summary>
      <param name="duration">The duration defining data size.</param>
      <returns>
            Whether more data can be acquired.
            </returns>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">Acquiring failed.</exception>
      <exception cref="T:System.InvalidOperationException">An acquisition is already ongoing.</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been <see cref="M:System.IDisposable.Dispose" />d.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="duration" /> is negative.</para>
        <para>This instance doesn't implement <see cref="T:Triamec.Acquisitions.IProlongingAcquisition`1" /> and
              <paramref name="duration" /> is <see cref="F:System.TimeSpan.Zero" />.</para>
        <para>This instance implements <see cref="T:Triamec.Acquisitions.IProlongingAcquisition`1" /> and
              <paramref name="duration" /> is greater than
              <see cref="P:Triamec.Acquisitions.IProlongingAcquisition`1.TimeLimit" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Acquisitions.IAcquisition.Disable">
      <summary>
            Discontinues delivery of data.
            </summary>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">Disable failed.</exception>
    </member>
    <member name="T:Triamec.Acquisitions.IAcquisition`1">
      <summary>
            Simultaneous data acquisition  for a list of <see cref="T:Triamec.Acquisitions.IVariable" /> instances.
            </summary>
      <typeparam name="TVariable">The variable type.</typeparam>
    </member>
    <member name="T:Triamec.Acquisitions.IProlongingAcquisition`1">
      <summary>
            Simultaneous data acquisition supporting multiple takes with adjacent samples.
            </summary>
      <typeparam name="TVariable">The variable type.</typeparam>
    </member>
    <member name="P:Triamec.Acquisitions.IProlongingAcquisition`1.TimeLimit">
      <summary>Gets the maximum duration for which space must be reserved for acquired data.</summary>
    </member>
    <member name="T:Triamec.Acquisitions.ISegmentedVariable`1">
      <summary>
            Single point of acquisition, possibly containing gaps.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.ISegmentedVariable`1.IsRegular">
      <summary>
            Gets a value indicating whether all acquired samples are equally spaced to each other.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.ISegmentedVariable`1.Segments">
      <summary>
            Gets the regular segments of this <see cref="T:Triamec.Acquisitions.IVariable" /> instance.
            </summary>
    </member>
    <member name="T:Triamec.Acquisitions.IVariable">
      <summary>
            Single point of acquisition, providing data including timing information.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.IVariable.Info">
      <summary>
            Gets miscellaneous information about the variable.
            </summary>
    </member>
    <member name="T:Triamec.Acquisitions.IVariable`1">
      <summary>
            Variable with strongly typed data.
            </summary>
      <typeparam name="T">Sample type.</typeparam>
    </member>
    <member name="T:Triamec.Acquisitions.IVariableInfo">
      <summary>
            Container for miscellaneous information for <see cref="T:Triamec.Acquisitions.IVariable" />s.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.IVariableInfo.Address">
      <summary>
            Gets the source address of the variable.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.IVariableInfo.Name">
      <summary>
            Gets the name of the variable.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.IVariableInfo.Unit">
      <summary>
            Gets the measurement unit of the variable.
            </summary>
    </member>
    <member name="T:Triamec.Acquisitions.IVariableSegment">
      <summary>
            Segment of an <see cref="T:Triamec.Acquisitions.IVariable" />.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.IVariableSegment.SamplingTime">
      <summary>
            Gets the distance between two samples.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.IVariableSegment.StartTime">
      <summary>
            Gets the start time of this instance.
            </summary>
    </member>
    <member name="T:Triamec.Acquisitions.IVariableSegment`1">
      <summary>
            Segment of an <see cref="T:Triamec.Acquisitions.IVariable`1" />.
            </summary>
      <typeparam name="T">Sample type</typeparam>
    </member>
    <member name="P:Triamec.Acquisitions.IVariableSegment`1.Count">
      <summary>Gets the number of values.</summary>
    </member>
    <member name="T:Triamec.Acquisitions.VariableInfo">
      <summary>
            Standard implementation for <see cref="T:Triamec.Acquisitions.IVariableInfo" />.
            </summary>
    </member>
    <member name="M:Triamec.Acquisitions.VariableInfo.#ctor(System.Object,System.Object,System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Acquisitions.VariableInfo" /> class.
            </summary>
      <param name="name">The name of the variable or <see langword="null" /> or <see cref="F:System.String.Empty" />.</param>
      <param name="unit">The unit of the variable or <see langword="null" /> or <see cref="F:System.String.Empty" />.</param>
      <param name="address">The address or <see langword="null" />.</param>
    </member>
    <member name="P:Triamec.Acquisitions.VariableInfo.Address">
      <summary>
            Gets the source address of the variable.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.VariableInfo.Empty">
      <summary>
            Gets an empty instance of <see cref="T:Triamec.Acquisitions.IVariableInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.VariableInfo.Name">
      <summary>
            Gets the name of the variable.
            </summary>
    </member>
    <member name="P:Triamec.Acquisitions.VariableInfo.Unit">
      <summary>
            Gets the measurement unit of the variable.
            </summary>
    </member>
    <member name="T:Triamec.Collections.CyclicSortBuffer`1">
      <summary>
            Sorting buffer.
            </summary>
      <typeparam name="T">Element type. Elements must not be <see langword="null" />.</typeparam>
    </member>
    <member name="M:Triamec.Collections.CyclicSortBuffer`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Collections.CyclicSortBuffer`1" /> class.
            </summary>
      <param name="size">The maximal number of items the buffer can hold.</param>
    </member>
    <member name="P:Triamec.Collections.CyclicSortBuffer`1.Count">
      <summary>
            Gets the size of the buffer.
            </summary>
    </member>
    <member name="M:Triamec.Collections.CyclicSortBuffer`1.Dequeue">
      <summary>
            Returns the next element in the buffer.
            </summary>
    </member>
    <member name="P:Triamec.Collections.CyclicSortBuffer`1.HasMore">
      <summary>
            Whether <see cref="M:Triamec.Collections.CyclicSortBuffer`1.Dequeue" /> may be called.
            </summary>
    </member>
    <member name="P:Triamec.Collections.CyclicSortBuffer`1.Item(System.Int32)">
      <summary>
            Sets the element with the specified index.
            </summary>
    </member>
    <member name="T:Triamec.Collections.IReadOnlyCollection">
      <summary>
            Represents a countable entity.
            </summary>
    </member>
    <member name="P:Triamec.Collections.IReadOnlyCollection.Count">
      <summary>
            Gets the number of elements in the collection.
            </summary>
    </member>
    <member name="T:Triamec.Collections.TreeHandler">
      <summary>
            Collector of events from a tree of <see cref="T:Triamec.Tam.ITamNode" /> instances.
            </summary>
    </member>
    <member name="M:Triamec.Collections.TreeHandler.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:Triamec.Collections.TreeHandler.Subscribe``1(System.Action{``0},System.Action{``0},System.Boolean)">
      <summary>
            Subscribes a subscriber and an unsubscriber to this instance.
            </summary>
      <param name="subscriber">
            A delegate subscribing to an event of an instance of type <typeparamref name="T" />.
            </param>
      <param name="unsubscriber">
            A delegate unsubscribing from an event of an instance of type <typeparamref name="T" />.
            </param>
      <param name="treatMatchesAsLeaves">
            Whether to stop tree traversal to children for nodes of type <typeparamref name="T" />.
            </param>
      <typeparam name="T">
            The type of instances the <paramref name="subscriber" /> and <paramref name="unsubscriber" /> act on.
            </typeparam>
    </member>
    <member name="M:Triamec.Collections.TreeHandler.Unsubscribe``1(System.Action{``0},System.Boolean)">
      <summary>
            Unsubscribes the specified unsubscriber from this instance.
            </summary>
      <param name="unsubscriber">
            A delegate unsubscribing from an event of an instance of type <typeparamref name="T" />.
            </param>
      <param name="treatMatchesAsLeaves">
            Whether to stop tree traversal to children for nodes of type <typeparamref name="T" />.
            </param>
      <typeparam name="T">The type of instances the <paramref name="unsubscriber" /> acts on.</typeparam>
    </member>
    <member name="T:Triamec.Configuration.ApplicationCompletedEventArgs">
      <summary>
            Provides data for the <see cref="E:Triamec.Configuration.MatchResult.ApplicationCompleted" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.ApplicationCompletedEventArgs.Error">
      <summary>
            Gets a value indicating which error occurred during the application.
            </summary>
      <returns>A <see cref="T:Triamec.Configuration.ConfigurationException" /> instance, if an error occurred during application; otherwise
            <see langword="null" />.</returns>
    </member>
    <member name="T:Triamec.Configuration.ConfigurationException">
      <summary>
            Base exception thrown when working with the TAM Software configuration system.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.ConfigurationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.ConfigurationException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Triamec.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Triamec.Configuration.ConfigurationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.ConfigurationException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Triamec.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.ConfigurationException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Triamec.Configuration.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that Contains contextual information about the source or destination.</param>
    </member>
    <member name="T:Triamec.Configuration.Deserializer`1">
      <summary>
            Represents the loading mechanism used within the configuration namespace with applicable configurations.
            </summary>
      <typeparam name="TConfiguration">The configuration type an instance of this class loads, matches and
            applies.</typeparam>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.Deserializer`1" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.#ctor(System.ComponentModel.IContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.Deserializer`1" /> class.
            </summary>
      <param name="container">The container.</param>
    </member>
    <member name="P:Triamec.Configuration.Deserializer`1.Configuration">
      <summary>
            Gets the deserialized configuration or <see langword="null" /> if <see cref="M:Triamec.Configuration.Deserializer`1.Load(System.String)" /> or
            <see cref="M:Triamec.Configuration.Deserializer`1.Load(System.Xml.XmlReader)" /> were not yet called.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.CreateLoadResult">
      <summary>
            Creates an instance representing a successful load.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="P:Triamec.Configuration.Deserializer`1.IsBusy">
      <summary>
            Gets a value indicating whether this instance is busy.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.Load(System.String)">
      <summary>
            Reads a TAM configuration file into a <see cref="P:Triamec.Configuration.Deserializer`1.Configuration" /> instance.
            </summary>
      <param name="path">The path.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.Load(System.String,System.Object)">
      <summary>
            Loads relevant settings from a XML configuration file, matches it against an instance, tries to
            <see cref="M:Triamec.Configuration.MatchResult.Resolve" /> mismatched and applies the configuration.
            </summary>
      <param name="path">Location of the configuration.</param>
      <param name="configuredInstance">The instance to configure.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">An exception occurred during deserialization
            or configuration application.
              </exception>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.Load(System.String,System.Xml.XmlReader)">
      <summary>
            Reads a TAM configuration into a <see cref="P:Triamec.Configuration.Deserializer`1.Configuration" /> instance.
            </summary>
      <param name="path">If <paramref name="reader" /> is <see langword="null" />, the file to load.
            Otherwise, if applicable, the original file name.</param>
      <param name="reader">The reader or <see langword="null" /> if <paramref name="path" /> is to be
            used.</param>
      <returns>The result of the operation.</returns>
      <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> is <see langword="null" /> or
            <see cref="F:System.String.Empty" /> or <paramref name="reader" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.Load(System.Xml.XmlReader)">
      <summary>
            Reads a TAM configuration into a <see cref="P:Triamec.Configuration.Deserializer`1.Configuration" /> instance using the specified reader.
            </summary>
      <param name="reader">The XML reader.</param>
      <returns>The result of the operation.</returns>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.LoadAsync(System.String)">
      <summary>
            Loads asynchronously a configuration from a specified path.
            </summary>
      <param name="path">The path.</param>
      <exception cref="T:System.InvalidOperationException">The deserializer is already in another operation.</exception>
    </member>
    <member name="M:Triamec.Configuration.Deserializer`1.LoadAsync(System.Xml.XmlReader)">
      <summary>
            Loads asynchronously a configuration using the specified reader.
            </summary>
      <param name="reader">The reader to use.</param>
      <exception cref="T:System.InvalidOperationException">The deserializer is already in another operation.</exception>
    </member>
    <member name="E:Triamec.Configuration.Deserializer`1.LoadCompleted">
      <summary>
            Handles the completion of a <see cref="M:Triamec.Configuration.Deserializer`1.LoadAsync(System.String)" /> operation.
            </summary>
    </member>
    <member name="T:Triamec.Configuration.IApplicableConfiguration">
      <summary>
            Represents a configuration that can be matched against and applied to a configured instance.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.IApplicableConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies the configuration.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" /> and
            is used by the method.</exception>
    </member>
    <member name="M:Triamec.Configuration.IApplicableConfiguration.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="P:Triamec.Configuration.IApplicableConfiguration.ExpectedVersion">
      <summary>
             Gets the configuration version the software understands.
             </summary>
    </member>
    <member name="M:Triamec.Configuration.IApplicableConfiguration.Match(System.Object)">
      <summary>
            Matches the specified instance.
            </summary>
      <param name="configuredInstance">The configured Instance.</param>
      <returns>
            An instance describing the result of the match operation.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="configuredInstance" /> has the wrong runtime
            <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configuredInstance" /> is
            <see langword="null" /> but needed for the operation.</exception>
    </member>
    <member name="P:Triamec.Configuration.IApplicableConfiguration.Target">
      <summary>
            Gets the configured instance.
            </summary>
    </member>
    <member name="T:Triamec.Configuration.LoadCompletedEventArgs">
      <summary>
            Provides data for the <see cref="E:Triamec.Configuration.Deserializer`1.LoadCompleted" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.LoadCompletedEventArgs.Result">
      <summary>
            Gets a value that represents the result of a load operation.
            </summary>
      <returns>A <see cref="T:Triamec.Configuration.LoadResult" /> instance representing the result of the load operation.</returns>
    </member>
    <member name="T:Triamec.Configuration.LoadResult">
      <summary>
            The result of the <see cref="M:Triamec.Configuration.Deserializer`1.Load(System.String)" /> method.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.LoadResult.BackgroundWorker">
      <summary>
            Gets the background worker of this instance.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.LoadResult.CancelationPending">
      <summary>
            Gets a value indicating whether the application has requested cancelation of a background operation.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.LoadResult.CancelMatchAsync">
      <summary>
            Asynchronously cancels the current match.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.LoadResult.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.LoadResult.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used (base class version).
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:Triamec.Configuration.LoadResult.Errors">
      <summary>
            Gets the errors of the load operation, if any.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.LoadResult.IsMatching">
      <summary>
            Gets a value indicating whether this instance is busy matching the configuration.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.LoadResult.Match(System.Object)">
      <summary>
            Matches the specified topology against the loaded configuration.
            </summary>
      <param name="configuredInstance">The configured instance; Typically, a <see cref="T:Triamec.Tam.TamTopology" />.</param>
      <returns>The result of the match.</returns>
      <exception cref="T:System.ObjectDisposedException">Cannot work on a disposed object.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Configuration.LoadResult.Errors" /> is not empty.</exception>
    </member>
    <member name="M:Triamec.Configuration.LoadResult.MatchAsync(System.Object)">
      <summary>
            Matches the specified topology against the loaded configuration.
            </summary>
      <param name="configuredInstance">The configured instance; Typically, a
            <see cref="T:Triamec.Tam.TamTopology" />.</param>
      <exception cref="T:System.ObjectDisposedException">Cannot work on a disposed object.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Configuration.LoadResult.Errors" /> is not empty.</exception>
    </member>
    <member name="E:Triamec.Configuration.LoadResult.MatchCompleted">
      <summary>
            Occurs when the <see cref="M:Triamec.Configuration.LoadResult.Match(System.Object)" /> completes.
            </summary>
    </member>
    <member name="E:Triamec.Configuration.LoadResult.MatchProgressChanged">
      <summary>
            Occurs when the <see cref="M:Triamec.Configuration.LoadResult.Match(System.Object)" /> progress changes.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.LoadResult.ResolvingOccurred">
      <summary>
            Gets a value indicating whether the configuration was modified because its version was outdated.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.LoadResult.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:Triamec.Configuration.LoadResult.Warnings">
      <summary>
            Gets the warnings of the load operation, if any.
            </summary>
    </member>
    <member name="T:Triamec.Configuration.MatchCompletedEventArgs">
      <summary>
            A <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> for the <see cref="T:Triamec.Configuration.LoadResult" />'s 
            <see cref="E:Triamec.Configuration.LoadResult.MatchCompleted" /><see langword="event" />
            that provides access to the <see cref="M:Triamec.Configuration.LoadResult.Match(System.Object)" /> result.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.MatchCompletedEventArgs.Error">
      <summary>
            Gets a value indicating which error occurred during an asynchronous operation.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.MatchCompletedEventArgs.Result">
      <summary>
            Gets a value that represents the result of a <see cref="M:Triamec.Configuration.LoadResult.Match(System.Object)" /> operation.
            </summary>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:Triamec.Configuration.MatchCompletedEventArgs.Error" /> is not a <see langword="null" /> reference.
            The <see cref="P:System.Exception.InnerException" /> property holds a reference to <see cref="P:Triamec.Configuration.MatchCompletedEventArgs.Error" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> is <see langword="true" />.
            </exception>
    </member>
    <member name="T:Triamec.Configuration.MatchException">
      <summary>
            Represents errors that occurs during relating a configuration to a target.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.MatchException" /> class with serialized data.
            </summary>
      <param name="info">The serialized object data about the exception being thrown.</param>
      <param name="context">Contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is
            zero (0).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Configuration.MatchException.#ctor(System.String,System.Object,Triamec.Configuration.IApplicableConfiguration,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.MatchException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="token">The type of the exception, or <see langword="null" /> to set <see cref="P:Triamec.Configuration.MatchException.Token" /> to
            the <see cref="T:System.Type" /> of this instance.</param>
      <param name="configuration">The configuration containing a mismatch or <see langword="null" /> when
            the configuration is not an <see cref="T:Triamec.Configuration.IApplicableConfiguration" />.</param>
      <param name="target">The location in the business logic where the error occurred,
            or <see langword="null" /> if no location is specified.</param>
      <param name="innerException">The exception that is the cause of the current exception,
            or <see langword="target" /> if no inner exception is specified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Configuration.MatchException.#ctor(System.String,System.Object,Triamec.Configuration.IApplicableConfiguration,System.Object,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.MatchException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="token">The type of the exception, or <see langword="null" /> to set <see cref="P:Triamec.Configuration.MatchException.Token" /> to
            the <see cref="T:System.Type" /> of this instance.</param>
      <param name="configuration">The configuration containing a mismatch or <see langword="null" /> when
            the configuration is not an <see cref="T:Triamec.Configuration.IApplicableConfiguration" />.</param>
      <param name="target">The location in the business logic where the error occurred,
            or <see langword="null" /> if no location is specified.</param>
      <param name="innerException">The exception that is the cause of the current exception,
            or <see langword="target" /> if no inner exception is specified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Configuration.MatchException.#ctor(System.String,Triamec.Configuration.IApplicableConfiguration,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.MatchException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="token">The type of the exception, or <see langword="null" /> to set <see cref="P:Triamec.Configuration.MatchException.Token" /> to
            the <see cref="T:System.Type" /> of this instance.</param>
      <param name="configuration">The configuration containing a mismatch or <see langword="null" /> when
            the configuration is not an <see cref="T:Triamec.Configuration.IApplicableConfiguration" />.</param>
      <param name="target">The location in the business logic where the error occurred,
            or <see langword="null" /> if no location is specified.</param>
      <param name="innerException">The exception that is the cause of the current exception,
            or <see langword="target" /> if no inner exception is specified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Configuration.MatchException.#ctor(System.String,Triamec.Configuration.IApplicableConfiguration,System.Object,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.MatchException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="token">The type of the exception, or <see langword="null" /> to set <see cref="P:Triamec.Configuration.MatchException.Token" /> to
            the <see cref="T:System.Type" /> of this instance.</param>
      <param name="configuration">The configuration containing a mismatch or <see langword="null" /> when
            the configuration is not an <see cref="T:Triamec.Configuration.IApplicableConfiguration" />.</param>
      <param name="target">The location in the business logic where the error occurred,
            or <see langword="null" /> if no location is specified.</param>
      <param name="innerException">The exception that is the cause of the current exception,
            or <see langword="target" /> if no inner exception is specified.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Triamec.Configuration.MatchException.Configuration">
      <summary>
            Gets the configuration containing the mismatch.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.MatchException.DetailMessage">
      <summary>
            Gets a more detailed message.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that Contains contextual information about the source or destination.</param>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:Triamec.Configuration.MatchException.Target">
      <summary>
            Gets the location in the business logic targetted by <see cref="P:Triamec.Configuration.MatchException.Configuration" /> where the error occurred.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.MatchException.Token">
      <summary>
            Gets the type of the exception.
            </summary>
    </member>
    <member name="T:Triamec.Configuration.MatchInformationPair">
      <summary>
            A <see langword="string" />-<see langword="object" /> pair.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchInformationPair.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.MatchInformationPair" /> structure.
            </summary>
      <param name="description">The description.</param>
      <param name="value">The value.</param>
    </member>
    <member name="P:Triamec.Configuration.MatchInformationPair.Description">
      <summary>
            Gets the description.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchInformationPair.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="M:Triamec.Configuration.MatchInformationPair.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:Triamec.Configuration.MatchInformationPair.op_Equality(Triamec.Configuration.MatchInformationPair,Triamec.Configuration.MatchInformationPair)">
      <summary>
            Compares two specified pairs against equality.
            </summary>
      <param name="pair1">The first pair.</param>
      <param name="pair2">The second pair.</param>
    </member>
    <member name="M:Triamec.Configuration.MatchInformationPair.op_Inequality(Triamec.Configuration.MatchInformationPair,Triamec.Configuration.MatchInformationPair)">
      <summary>
            Compares two specified pairs against inequality.
            </summary>
      <param name="pair1">The first pair.</param>
      <param name="pair2">The second pair.</param>
    </member>
    <member name="P:Triamec.Configuration.MatchInformationPair.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="T:Triamec.Configuration.MatchResult">
      <summary>
            Represents the result of a <see cref="M:Triamec.Configuration.IApplicableConfiguration.Match(System.Object)" /> operation.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.#ctor(Triamec.Configuration.IApplicableConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Configuration.MatchResult" /> class.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.Add(Triamec.Configuration.MatchException)">
      <summary>
            Adds a mismatch to this <see cref="T:Triamec.Configuration.MatchResult" />.
            </summary>
      <param name="mismatch">An exception representing the mismatch.</param>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.AddRange(System.Collections.Generic.IEnumerable{Triamec.Configuration.MatchException})">
      <summary>
            Adds mismatches to this <see cref="T:Triamec.Configuration.MatchResult" />.
            </summary>
      <param name="mismatches">The exceptions representing the mismatches.</param>
    </member>
    <member name="E:Triamec.Configuration.MatchResult.ApplicationCompleted">
      <summary>
            Occurs when the <see cref="M:Triamec.Configuration.MatchResult.ApplyAsync" /> method completes.
            </summary>
    </member>
    <member name="E:Triamec.Configuration.MatchResult.ApplicationProgressChanged">
      <summary>
            Occurs when the application progress changes.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.Apply">
      <summary>
            Applies this match.
            </summary>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.InvalidOperationException">There was a mismatch so this match result cannot be applied.
            </exception>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.ApplyAsync">
      <summary>
            Asynchronously applies this match.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <para>There was a mismatch so this match result cannot be applied.</para>
        <para>-or-</para>
        <para>
          <see cref="P:Triamec.Configuration.MatchResult.IsApplying" /> is <see langword="true" />.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">Cannot work on a disposed object.</exception>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.CancelApplicationAsync">
      <summary>
            Asynchronously cancels the current application.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.MatchResult.CancelationPending">
      <summary>
            Gets a value indicating whether the application has requested cancelation
            of a background operation.</summary>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used (base class version).
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:Triamec.Configuration.MatchResult.Information">
      <summary>
            Gets summary information about the match.
            </summary>
      <exception cref="T:System.InvalidOperationException">There was a mismatch so the information may be inconsistent.
            </exception>
    </member>
    <member name="P:Triamec.Configuration.MatchResult.IsApplying">
      <summary>
            Gets a value indicating whether this instance is applying a matched configuration.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.MatchResult.Match">
      <summary>
            Gets the matching object.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Configuration.MatchResult.Success" /> is set to 
            <see langword="false" />.</exception>
    </member>
    <member name="P:Triamec.Configuration.MatchResult.Mismatches">
      <summary>
            Gets the mismatches of a match operation.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.Resolve">
      <summary>
            Tries to resolve all <see cref="P:Triamec.Configuration.MatchResult.Mismatches" /> using the <see cref="T:Triamec.Configuration.Resolving.ConfigurationResolver" />.
            </summary>
      <returns>
        <see langword="true" /> if all <see cref="P:Triamec.Configuration.MatchResult.Mismatches" /> could be resolved; otherwise
            <see langword="false" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Configuration.MatchResult.Success" /> is <see langword="true" /> and <see cref="P:Triamec.Configuration.MatchResult.Warnings" /> is empty.
            </exception>
    </member>
    <member name="P:Triamec.Configuration.MatchResult.ResolvingOccurred">
      <summary>
            Gets a value indicating whether the configuration was modified because <see cref="M:Triamec.Configuration.MatchResult.Resolve" /> was called.
            </summary>
    </member>
    <member name="P:Triamec.Configuration.MatchResult.Success">
      <summary>
            Gets a value indicating whether the matching operation succeeded.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.MatchResult.ToString">
      <summary>
            Returns a <see langword="string" /> that represents the current <see langword="object" />.
            </summary>
      <returns>
            A <see langword="string" /> that represents the current <see langword="object" />.
            </returns>
    </member>
    <member name="P:Triamec.Configuration.MatchResult.Warnings">
      <summary>Gets a collections of warnings occurred during matching.</summary>
    </member>
    <member name="T:Triamec.Configuration.Serializer">
      <summary>
            The save mechanism of the configuration of the TAM API.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.Serializer.Save(System.String,System.Object)">
      <summary>
            Saves relevant settings as XML configuration to a file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <param name="configuration">The configuration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configuration" /> is <see langword="null" />.
              </exception>
      <exception cref="T:Triamec.Configuration.ConfigurationException">Serialization failed.</exception>
    </member>
    <member name="M:Triamec.Configuration.Serializer.Save(System.Xml.XmlWriter,System.Object)">
      <summary>
            Saves relevant settings as XML configuration using a specified writer.
            </summary>
      <param name="writer">The XML writer.</param>
      <param name="configuration">The configuration.</param>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configuration" /> is <see langword="null" />.
              </exception>
      <exception cref="T:Triamec.Configuration.ConfigurationException">Serialization failed.</exception>
    </member>
    <member name="T:Triamec.Configuration.TamWorkspaceExtensions">
      <summary>
            Extensions for <see cref="T:Triamec.Configuration.Workspace" /> respective to the TAM Software.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.TamWorkspaceExtensions.GetCpuFirmwarePath(Triamec.Configuration.Workspace)">
      <summary>
            Gets the full path to the workspace directory where to expect secondary firmware files.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.TamWorkspaceExtensions.GetFirmwarePath(Triamec.Configuration.Workspace)">
      <summary>
            Gets the full path to the workspace directory where to expect firmware files.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.TamWorkspaceExtensions.GetFpgaFirmwarePath(Triamec.Configuration.Workspace)">
      <summary>
            Gets the full path to the workspace directory where to expect secondary firmware files.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.TamWorkspaceExtensions.GetTamaPath(Triamec.Configuration.Workspace)">
      <summary>
            Gets the full path to the workspace directory where to expect TAMA programs.
            </summary>
    </member>
    <member name="T:Triamec.Configuration.Resolving.ConfigurationResolver">
      <summary>
            Central facility to resolve TAM configuration mismatches.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.Resolving.ConfigurationResolver.Register(Triamec.Configuration.Resolving.IResolver)">
      <summary>
            Registers the specified resolver.
            </summary>
      <param name="resolver">The resolver.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resolver" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Configuration.Resolving.ConfigurationResolver.Register(Triamec.Configuration.Resolving.VersionResolver,System.String)">
      <summary>
            Registers the specified version resolver.
            </summary>
      <param name="resolver">The resolver.</param>
      <param name="oldVersion">The version the <paramref name="resolver" /> can transform into a newer one.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="resolver" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="oldVersion" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="F:Triamec.Configuration.Resolving.ConfigurationResolver.TRACE_CATEGORY">
      <summary>
            The category to use in <see cref="M:System.Diagnostics.Trace.WriteLine(System.String,System.String)" /> when logging
            resolve messages.
            <para>The value is <c>"Resolve"</c>.</para></summary>
    </member>
    <member name="T:Triamec.Configuration.Resolving.IResolver">
      <summary>
            TAM configuration mismatch resolver.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.Resolving.IResolver.Resolve(Triamec.Configuration.MatchException)">
      <summary>
            Resolves the specified mismatch.
            </summary>
      <param name="mismatch">The mismatch.</param>
      <returns>
        <see langword="true" /> when the mismatch could be resolved, otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:Triamec.Configuration.Resolving.IResolver.SupportedCodes">
      <summary>
            Gets the type of mismatches this instance may be able to resolve.
            </summary>
    </member>
    <member name="T:Triamec.Configuration.Resolving.VersionResolver">
      <summary>
            Prototype for a method converting an old configuration to a new configuration.
            </summary>
      <exception cref="T:Triamec.Configuration.ConfigurationException">Resolving failed.</exception>
    </member>
    <member name="T:Triamec.Configuration.Resolving.XsltVersionResolver">
      <summary>
            Configuration resolver using stylesheet transformations.
            </summary>
    </member>
    <member name="M:Triamec.Configuration.Resolving.XsltVersionResolver.Create(System.Func{System.IO.TextReader})">
      <summary>
            Creates a <see cref="T:Triamec.Configuration.Resolving.VersionResolver" /> using the specified reference to a method creating the stylesheet
            transform reader.
            </summary>
      <param name="xsltReaderFactory">reference to a method creating the stylesheet transform reader.</param>
      <returns>The <see cref="T:Triamec.Configuration.Resolving.VersionResolver" />.</returns>
    </member>
    <member name="T:Triamec.IO.Endianness">
      <summary>
            Byte ordering used to represent some kind of data.
            </summary>
    </member>
    <member name="F:Triamec.IO.Endianness.Little">
      <summary>
            The least significant byte is at the lowest address.
            <para>Example: Dates in the german culture.</para></summary>
    </member>
    <member name="F:Triamec.IO.Endianness.Big">
      <summary>
            The most significant byte is at the lowest address.
            <para>Example: The standard decimal system.</para></summary>
    </member>
    <member name="T:Triamec.IO.FormattingStreamWriter">
      <summary>
        <see cref="T:System.IO.StreamWriter" /> with specific <see cref="T:System.IFormatProvider" />.
            </summary>
    </member>
    <member name="M:Triamec.IO.FormattingStreamWriter.#ctor(System.IO.Stream,System.IFormatProvider)">
      <summary>
                Initializes a new instance of the <see cref="T:Triamec.IO.FormattingStreamWriter" /> class for the specified
                stream, using UTF-8 encoding and the default buffer size.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
      <param name="stream">The stream to write to. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null. </exception>
    </member>
    <member name="M:Triamec.IO.FormattingStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.IFormatProvider)">
      <summary>
                Initializes a new instance of the <see cref="T:Triamec.IO.FormattingStreamWriter" /> class for the specified
                stream, using the specified encoding and the default buffer size.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
      <param name="stream">The stream to write to. </param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
    </member>
    <member name="M:Triamec.IO.FormattingStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.IFormatProvider)">
      <summary>
                Initializes a new instance of the <see cref="T:Triamec.IO.FormattingStreamWriter" /> class for the specified
                stream, using the specified encoding and buffer size.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
      <param name="stream">The stream to write to. </param>
      <param name="encoding">The character encoding to use. </param>
      <param name="bufferSize">The buffer size, in bytes. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> is not writable. </exception>
    </member>
    <member name="M:Triamec.IO.FormattingStreamWriter.#ctor(System.String,System.Boolean,System.IFormatProvider)">
      <summary>
                Initializes a new instance of the <see cref="T:Triamec.IO.FormattingStreamWriter" /> class for the specified
                file on the specified path, using the default encoding and buffer size. If
                the file exists, it can be either overwritten or appended to. If the file
                does not exist, this constructor creates a new file.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
      <param name="path">The complete file path to write to. </param>
      <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty. -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:Triamec.IO.FormattingStreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.IFormatProvider)">
      <summary>
                Initializes a new instance of the <see cref="T:Triamec.IO.FormattingStreamWriter" /> class for the specified
                file on the specified path, using the specified encoding and default buffer
                size. If the file exists, it can be either overwritten or appended to. If
                the file does not exist, this constructor creates a new file.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
      <param name="path">The complete file path to write to. </param>
      <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
      <param name="encoding">The character encoding to use. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty. -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:Triamec.IO.FormattingStreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32,System.IFormatProvider)">
      <summary>
                Initializes a new instance of the <see cref="T:Triamec.IO.FormattingStreamWriter" /> class for the specified
                file on the specified path, using the specified encoding and buffer size.
                If the file exists, it can be either overwritten or appended to. If the file
                does not exist, this constructor creates a new file.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
      <param name="path">The complete file path to write to. </param>
      <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
      <param name="encoding">The character encoding to use. </param>
      <param name="bufferSize">The buffer size, in bytes. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> or <paramref name="encoding" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is negative. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters. </exception>
    </member>
    <member name="M:Triamec.IO.FormattingStreamWriter.#ctor(System.String,System.IFormatProvider)">
      <summary>
                Initializes a new instance of the <see cref="T:Triamec.IO.FormattingStreamWriter" /> class for the specified
                file on the specified path, using the default encoding and buffer size.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
      <param name="path">The complete file path to write to. <paramref name="path" /> can be a file name. </param>
      <exception cref="T:System.UnauthorizedAccessException">Access is denied. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string (""). -or-<paramref name="path" /> contains the name of a system device (com1, com2, and so on).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> includes an incorrect or invalid syntax for file name, directory name, or volume label syntax. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:Triamec.IO.FormattingStreamWriter.FormatProvider">
      <summary>
            Gets an object that controls formatting.
            </summary>
    </member>
    <member name="T:Triamec.IO.PathUtils">
      <summary>
            Collection of methods around the <see cref="N:System.IO" /> namespace.
            </summary>
    </member>
    <member name="M:Triamec.IO.PathUtils.Combine(System.String,System.String)">
      <summary>
            Combines two specified paths.
            </summary>
      <param name="absolutePath">The existing absolute path.</param>
      <param name="relativePath">The relative path.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
            One of the arguments is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="absolutePath" /> or <paramref name="relativePath" /> is <see cref="F:System.String.Empty" />.
            </para>
        <para>-or-</para>
        <para>
          <paramref name="relativePath" /> contains only white space, or contains one or more of the invalid
            characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</para>
        <para>-or-</para>
        <para>The system could not retrieve the absolute path.</para>
      </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">The specified paths, file names, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
            names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.
            </exception>
    </member>
    <member name="M:Triamec.IO.PathUtils.GetRelativePath(System.String,System.String)">
      <summary>
            Makes a specified absolute path relative to a given absolute directory.
            </summary>
      <param name="absolutePath">The absolute path.</param>
      <param name="absoluteDirectory">The absolute directory.</param>
      <returns>
        <para>
          <see cref="F:System.String.Empty" /> if the arguments denote the same path.</para>
        <para>
          <paramref name="absolutePath" /> if the paths do not share any common prefix.</para>
      </returns>
      <exception cref="T:System.ArgumentNullException">
            One of the arguments is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
            One of the arguments contains only white space, or contains one or more of the invalid characters defined
            in <see cref="M:System.IO.Path.GetInvalidPathChars" />.
            </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified paths, file names, or both exceed the system-defined
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file
            names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.
            </exception>
    </member>
    <member name="F:Triamec.IO.PathUtils.ParentDirectoryName">
      <summary>
            The name of the parent directory in a path.
            <para>The value is <c>".."</c>.</para></summary>
    </member>
    <member name="T:Triamec.Tam.AxisCommandRejectedException">
      <summary>
            The TAM exception that is returned when a specified <see cref="T:Triamec.TriaLink.AxisNumbers" /> parameter is not applicable for an
            <see cref="T:Triamec.Tam.ITamDrive" /> or 	when an <see cref="T:Triamec.Tam.ITamDevice" /> rejects an axis related Tria-Link command because
            of illegal arguments or internal state.
            </summary>
    </member>
    <member name="M:Triamec.Tam.AxisCommandRejectedException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.AxisCommandRejectedException" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.AxisCommandRejectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.AxisCommandRejectedException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Triamec.Tam.AxisCommandRejectedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.AxisCommandRejectedException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Triamec.Tam.AxisCommandRejectedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.AxisCommandRejectedException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.Tam.AxisCommandRejectedException.#ctor(Triamec.TriaLink.AxisNumbers)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.AxisCommandRejectedException" /> class.
            </summary>
      <param name="illegalAxisNumbers">The illegal axis numbers.</param>
    </member>
    <member name="M:Triamec.Tam.AxisCommandRejectedException.#ctor(Triamec.TriaLink.AxisNumbers,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.AxisCommandRejectedException" /> class.
            </summary>
      <param name="illegalAxisNumbers">The illegal axis numbers.</param>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Triamec.Tam.AxisCommandRejectedException.#ctor(Triamec.TriaLink.AxisNumbers,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.AxisCommandRejectedException" /> class.
            </summary>
      <param name="illegalAxisNumbers">The illegal axis numbers.</param>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference,
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.Tam.AxisCommandRejectedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that Contains contextual information about the source or destination.</param>
    </member>
    <member name="P:Triamec.Tam.AxisCommandRejectedException.IllegalAxisNumbers">
      <summary>
            Gets the illegal axis numbers.
            </summary>
    </member>
    <member name="T:Triamec.Tam.BootedEventArgs">
      <summary>
            The argument of an <see cref="E:Triamec.Tam.IBootable.Booted" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootedEventArgs.BootMode">
      <summary>
            Gets the boot mode.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootedEventArgs.Exception">
      <summary>
            Gets the exception that occurred in the booting procedure,
            or <see langword="null" /> if no exception occurred.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootedEventArgs.Root">
      <summary>
            Gets the root bootable instance which was booted.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootedEventArgs.Sender">
      <summary>
            Gets the sender of the event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootedEventArgs.SkipResetAllFaults">
      <summary>
            Gets a value indicating whether to skip reset all faults.
            </summary>
    </member>
    <member name="T:Triamec.Tam.BootException">
      <summary>
            Exception thrown by <see cref="T:Triamec.Tam.IBootable" /> methods.
            </summary>
    </member>
    <member name="M:Triamec.Tam.BootException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.BootException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Triamec.Tam.BootException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Triamec.Tam.BootException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.BootException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Triamec.Tam.BootException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.BootException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Triamec.Tam.BootException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that Contains contextual information about the source or destination.</param>
    </member>
    <member name="T:Triamec.Tam.BootingEventArgs">
      <summary>
            The argument of an <see cref="E:Triamec.Tam.IBootable.Booting" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootingEventArgs.BootMode">
      <summary>
            Gets the boot mode,
            or <see cref="F:Triamec.TriaLink.TriaLinkBootMode.None" /> if not applicable.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootingEventArgs.Root">
      <summary>
            Gets the root bootable instance.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootingEventArgs.Sender">
      <summary>
            Gets the sender of the event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.BootingEventArgs.SkipResetAllFaults">
      <summary>
            Gets a value indicating whether to skip reset all faults,
            or <see langword="false" /> if not applicable.
            </summary>
    </member>
    <member name="T:Triamec.Tam.BootState">
      <summary>
            The state of an <see cref="T:Triamec.Tam.IBootable" /></summary>
    </member>
    <member name="F:Triamec.Tam.BootState.Reset">
      <summary>
            Not booted.
            </summary>
    </member>
    <member name="F:Triamec.Tam.BootState.Booting">
      <summary>
            Booting.
            </summary>
    </member>
    <member name="F:Triamec.Tam.BootState.Booted">
      <summary>
            Booting succeeded.
            </summary>
    </member>
    <member name="T:Triamec.Tam.CommandRejectedException">
      <summary>
            The TAM exception that is returned when an <see cref="T:Triamec.Tam.ITamDevice" /> rejects a Tria-Link command because of
            illegal arguments or internal state.
            </summary>
    </member>
    <member name="M:Triamec.Tam.CommandRejectedException.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Triamec.Tam.CommandRejectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Triamec.Tam.CommandRejectedException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Triamec.Tam.CommandRejectedException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, 
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.Tam.CommandRejectedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the
            exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that Contains contextual information about the
            source or destination.</param>
    </member>
    <member name="T:Triamec.Tam.ControlSystemTreatment">
      <summary>
            Cares about how the real time system controls a <see cref="T:Triamec.Tam.TamAxis" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ControlSystemTreatment.GetIsOverridden">
      <summary>
            Gets a value indicating whether the <see cref="T:Triamec.Tam.TamAxis" /> ignores commands from the control system.
            </summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:Triamec.Tam.ControlSystemTreatment.IsSupported" /> is <see langword="false" />.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.ControlSystemTreatment.IsSupported">
      <summary>
            Gets a value indicating whether the firmware supports configuring the treatment of control system commands.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ControlSystemTreatment.Override(System.Boolean)">
      <summary>
            Causes the axis to start or stop ignoring commands from the control system.
            </summary>
      <param name="enabled">Whether to start ignoring commands from the control system.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:Triamec.Tam.ControlSystemTreatment.IsSupported" /> is <see langword="false" />.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.IBootable">
      <summary>
            Interface for all entities in a TAM topology that can 
            reset and boot one or more Tria-Link instances.
            </summary>
    </member>
    <member name="M:Triamec.Tam.IBootable.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.IBootable.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" />.
            </summary>
      <param name="bootMode">The boot mode.</param>
      <param name="skipResetAllFaults">If set to <see langword="true" />, skips calling
            <see cref="M:Triamec.Tam.TamLink.ResetAllFaults" /> at the end of the boot sequence.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke 
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. 
            This object is passed to the <paramref name="requestCallback" /> delegate 
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="M:Triamec.Tam.IBootable.BeginReset(System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.IBootable.Reset" />.
            </summary>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke 
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. 
            This object is passed to the <paramref name="requestCallback" /> delegate 
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="M:Triamec.Tam.IBootable.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)">
      <summary>
            Boots the Tria-Link(s) of this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <param name="bootMode">The boot mode.</param>
      <param name="skipResetAllFaults">If set to <see langword="true" />, skips calling
            <see cref="M:Triamec.Tam.TamLink.ResetAllFaults" /> at the end of the boot sequence.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">Booting failed.</exception>
    </member>
    <member name="E:Triamec.Tam.IBootable.Booted">
      <summary>
            Event raised at the end of the <see cref="M:Triamec.Tam.IBootable.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" />
            and the <see cref="M:Triamec.Tam.IBootable.Reset" /> procedure.
            </summary>
    </member>
    <member name="E:Triamec.Tam.IBootable.Booting">
      <summary>
            Event raised at the beginning of the <see cref="M:Triamec.Tam.IBootable.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" />
            and the <see cref="M:Triamec.Tam.IBootable.Reset" /> procedure.
            </summary>
    </member>
    <member name="P:Triamec.Tam.IBootable.BootState">
      <summary>
            Gets a value indicating whether this instance is booting or whether it was successfully booted before.
            </summary>
    </member>
    <member name="M:Triamec.Tam.IBootable.EndBoot(System.IAsyncResult)">
      <summary>
            Ends an asynchronous call of <see cref="M:Triamec.Tam.IBootable.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)" />.
            </summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> instance returned 
            by a call to the <see cref="M:Triamec.Tam.IBootable.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)" /> method.</param>
      <exception cref="T:System.InvalidOperationException">The method can only be called once for each 
            <see cref="T:System.IAsyncResult" /> instance.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">Booting failed.</exception>
    </member>
    <member name="M:Triamec.Tam.IBootable.EndReset(System.IAsyncResult)">
      <summary>
            Ends an asynchronous call of <see cref="M:Triamec.Tam.IBootable.BeginReset(System.AsyncCallback,System.Object)" />.
            </summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> instance returned 
            by a call to the <see cref="M:Triamec.Tam.IBootable.BeginReset(System.AsyncCallback,System.Object)" /> method.</param>
      <exception cref="T:System.InvalidOperationException">The method can only be called once for each 
            <see cref="T:System.IAsyncResult" /> instance.</exception>
    </member>
    <member name="M:Triamec.Tam.IBootable.Identify">
      <summary>
            Identifies the <see cref="T:Triamec.Tam.TamStation" />s in the Tria-Link(s) represented by this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">
            The identification failed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.IBootable.Initialize">
      <summary>
            Initializes the Tria-Link(s) represented by this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">
            The initialization failed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.IBootable.Reset">
      <summary>
            Resets the Tria-Link(s) of this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:Triamec.Tam.BootException">
            The reset failed.
            </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
    </member>
    <member name="T:Triamec.Tam.ILayoutFactoryAttribute">
      <summary>
            Specifies the layout factory type of an assembly containing a layout.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ILayoutFactoryAttribute.FactoryType">
      <summary>
            Gets the type of the layout factory.
            </summary>
    </member>
    <member name="T:Triamec.Tam.ITamaNodeComponent">
      <summary>
            Marker interface for child nodes of <see cref="T:Triamec.Tam.TamaNode" />s.
            </summary>
    </member>
    <member name="T:Triamec.Tam.ITamDevice">
      <summary>
            Microprocessor with a firmware implementing the Tria-Link protocol.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.ActivateStandAloneStartup(Triamec.TriaLink.StartupSettings)">
      <summary>
            Activates the stand-alone startup mode at this device.
            </summary>
      <param name="startupSettings">The new startup settings to activate.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> or its Tria-Link has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startupSettings" /> is <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">Failed to activate the stand-alone startup mode.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)">
      <summary>
            Adds an observing client and, if not done yet, establishes the observing subscription.
            Registers a client observing the state changes on this <see cref="T:Triamec.Tam.ITamDevice" /> and,
            if not done yet, establishes the observing subscription.
            </summary>
      <param name="clientIdentification">An object identifying the client.
            Must be used by the client when calling <see cref="M:Triamec.Tam.ITamDevice.RemoveStateObserver(System.Object)" />.</param>
      <returns>
            The value of <see cref="P:Triamec.Tam.ITamDevice.StateObserverCount" />
            after <paramref name="clientIdentification" /> has been registered.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="clientIdentification" /> is not valid. The specified client is already registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientIdentification" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
    </member>
    <member name="E:Triamec.Tam.ITamDevice.AnyTransition">
      <summary>
            Occurs whenever the <see cref="E:Triamec.Tam.Requests.ITamRequestDestination.Transition" /> of this <see cref="T:Triamec.Tam.ITamDevice" /> or
            a subsumed <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" /> occurs.
            </summary>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.Control(Triamec.TriaLink.DriveControlCommands,Triamec.TriaLink.MotorBaseConfiguration,Triamec.TriaLink.BridgePowerSwitch)">
      <summary>
            Does the work of <see cref="M:Triamec.Tam.ITamDevice.ResetFault" />, <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" />
            and	<see cref="M:Triamec.Tam.ITamDevice.SwitchOn" />/<see cref="M:Triamec.Tam.ITamDevice.SwitchOff" /> as a whole and in this sequence.
            </summary>
      <param name="commands">A combination of <see cref="T:Triamec.TriaLink.DriveControlCommands" /> to execute.</param>
      <param name="motorBaseConfiguration">The motor base configuration. Only applies when
            <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration" />.</param>
      <param name="powerSwitch">The setting of the power section switch. Only applies when
            <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" />.</param>
      <returns>
            An instance representing this request and its response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="motorBaseConfiguration" /> is <see cref="F:Triamec.TriaLink.MotorBaseConfiguration.Unknown" />.
            </exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
        <para>The drive refused to execute the <paramref name="commands" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.ResetFault" /> and
            		<see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" /> and <paramref name="powerSwitch" /> is
            		<see cref="F:Triamec.TriaLink.BridgePowerSwitch.On" />. Instead, use <see cref="M:Triamec.Tam.ITamDevice.SetOperational" />.</para>
        <para>-or-</para>
        <para>A listener to the <see cref="E:Triamec.Tam.ITamNodeComposite.NodesChanging" /> event vetoed to changing the axis
            configuration of this <see cref="T:Triamec.Tam.ITamDrive" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.DeactivateStandAloneStartup">
      <summary>
            Deactivates the stand-alone startup mode at this device.
            </summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> or its Tria-Link has been disposed.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">Failed to deactivate the stand-alone startup mode.</exception>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.FastTaskPeriod">
      <summary>
            Gets the duration of one cycle of the fast task of a device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.GetStatistics(Triamec.TriaLink.StatisticSelector,System.Boolean)">
      <summary>
            Gets the internal statistics counters.
            </summary>
      <param name="selector">The selector.</param>
      <param name="resetCounters">if set to <see langword="true" />, the counters are reset after returning the
            current values.</param>
      <returns>
            A set of 10 counters, where the meaning depends on <paramref name="selector" /> and the
            kind of device.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred or the device does not support the
            command.</exception>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.IsModuleChanging">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.ITamDevice" /> is currently changing its
            <see cref="P:Triamec.Tam.ITamDevice.Module" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.IsochronousBasePeriod">
      <summary>
            Gets the base period this <see cref="T:Triamec.Tam.ITamDevice" /> delivers
            <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.Module">
      <summary>
            Gets or sets the module assigned to this <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">
            At least one module component of the current <see cref="T:Triamec.Tam.Modules.TamModule" /> could not be locked, which is
            necessary prior to beeing removed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.ReadDeviceError">
      <summary>
            Reads the current device error.
            </summary>
      <returns>
            Returns the current device error or <see cref="F:Triamec.TriaLink.DeviceErrorIdentification.None" /> if the device has no error.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.ReadDeviceState">
      <summary>
            Reads the current state of the device.
            </summary>
      <returns>Returns the current state of the device.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.ReadMotorBaseConfiguration">
      <summary>
            Reads the motor base configuration from the device.
            </summary>
      <returns>
            The current motor base configuration or <see cref="F:Triamec.TriaLink.MotorBaseConfiguration.Unknown" /> if the device does not
            support motor base configurations.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.ReadStartupSettings">
      <summary>
            Reads the startup settings of the device.
            </summary>
      <returns>The settings read from the device, including <see cref="P:Triamec.TriaLink.StartupSettings.StationName" /> and a value
            for <see cref="M:Triamec.TriaLink.ResponseStartupSettings.GetMD5Checksum" />.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> or its Tria-Link has been disposed.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">Failed to deactivate the stand-alone startup mode.</exception>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.Register">
      <summary>
            Gets the root of the register tree of this <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.RegisterLayoutId">
      <summary>
            Gets the Register Layout ID.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.ReloadParameters">
      <summary>
            Reloads the parameter registers from the locally persisted values into register memory.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
        <para>There are no parameters persisted on this device.</para>
        <para>-or-</para>
        <para>A new firmware was downloaded to this device with a new <see cref="P:Triamec.Tam.ITamDevice.RegisterLayoutId" /> since the
            parameters were saved (using <see cref="M:Triamec.Tam.ITamDevice.ActivateStandAloneStartup(Triamec.TriaLink.StartupSettings)" />) the last time.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> or its Tria-Link has been disposed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.RemoveStateObserver(System.Object)">
      <summary>
            Unregisters a client observing the state changes on this <see cref="T:Triamec.Tam.TamDevice" /> and,
            for the last removed observing client,
            deletes the observing subscription.
            </summary>
      <param name="clientIdentification">An object identifying the client.
            Must be the same object used by the client
            with a previous call of <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.</param>
      <returns>
            The value of <see cref="P:Triamec.Tam.ITamDevice.StateObserverCount" />
            after <paramref name="clientIdentification" /> has been unregistered.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="clientIdentification" /> is not valid. The specified client is not registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientIdentification" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.ResetFault">
      <summary>
            Resets the device from fault state.
            </summary>
      <returns>An instance representing this request and its response.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            The device refused to execute the <see cref="F:Triamec.TriaLink.DriveControlCommands.ResetFault" /> command.
            </exception>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.Schedules">
      <summary>
            Gets a read-only list of the different schedules of the device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)">
      <summary>
            Sets the specified motor base configuration with a specified timeout.
            </summary>
      <param name="motorBaseConfiguration">The motor base configuration.</param>
      <returns>
            An instance representing this request and its response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="motorBaseConfiguration" /> is <see cref="F:Triamec.TriaLink.MotorBaseConfiguration.Unknown" />.
            </exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
            A listener to the <see cref="E:Triamec.Tam.ITamNodeComposite.NodesChanging" /> event
            vetoed to changing the axis configuration of this <see cref="T:Triamec.Tam.ITamDrive" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            The device refused to execute the <see cref="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration" /> command.
            </exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.SetOperational">
      <summary>
            Tries to set this device operational if necessary.
            I.e. resets a pending drive fault,
            and switches the bridge power on.
            </summary>
      <param name="clientIdentification">An object identifying the client.
            Must be used by the client when calling <see cref="M:Triamec.Tam.ITamDevice.RemoveStateObserver(System.Object)" />.</param>
      <returns>
            The value of <see cref="P:Triamec.Tam.ITamDevice.StateObserverCount" />
            after <paramref name="clientIdentification" /> has been registered.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">The drive could not be set operational.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="clientIdentification" /> is not valid. The specified client is already registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientIdentification" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.SetReadyToSwitchOn">
      <summary>
            Executes commands to bring this device into state <see cref="F:Triamec.TriaLink.DeviceState.ReadyToSwitchOn" />.
            </summary>
      <param name="clientIdentification">An object identifying the client.
            Must be used by the client when calling <see cref="M:Triamec.Tam.ITamDevice.RemoveStateObserver(System.Object)" />.</param>
      <returns>
            The value of <see cref="P:Triamec.Tam.ITamDevice.StateObserverCount" />
            after <paramref name="clientIdentification" /> has been registered.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            It is not possible to bring the device into state <see cref="F:Triamec.TriaLink.DeviceState.ReadyToSwitchOn" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="clientIdentification" /> is not valid. The specified client is already registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientIdentification" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.StateObserverCount">
      <summary>
            Gets the count of clients observing the state changes on this <see cref="T:Triamec.Tam.ITamDevice" /> registered with
            <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.Station">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamStation" /> where this <see cref="T:Triamec.Tam.ITamDevice" /> belongs to.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.SwitchBridgePower(Triamec.TriaLink.BridgePowerSwitch)">
      <summary>Use <see cref="M:Triamec.Tam.ITamDevice.SwitchOn" /> and <see cref="M:Triamec.Tam.ITamDevice.SwitchOff" /> instead.</summary>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.SwitchOff">
      <summary>
            Switches the device off.
            </summary>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the command.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamDevice.SwitchOn">
      <summary>
            Switches the device on.
            </summary>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the command.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The device was not in state
              <see cref="F:Triamec.TriaLink.DeviceState.ReadyToSwitchOn" /> or already <see cref="F:Triamec.TriaLink.DeviceState.Operational" />.</exception>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.TamaManager">
      <summary>
            Gets the Tama manager of this <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamDevice.TamaVirtualMachineId">
      <summary>
            Gets the Tama virtual machine Id.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.ITamDeviceComponent">
      <summary>
            Marker interface for child nodes of <see cref="T:Triamec.Tam.TamDevice" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamDeviceComponent.Device">
      <summary>
            Gets the TAM device where this component belongs to.
            </summary>
    </member>
    <member name="T:Triamec.Tam.ITamDrive">
      <summary>
            TAM device containing one or more <see cref="P:Triamec.Tam.ITamDrive.Axes" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamDrive.Axes">
      <summary>
            Gets the axes of this drive.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.Control(Triamec.TriaLink.DriveControlCommands,Triamec.TriaLink.DriveStopCommand,Triamec.TriaLink.MotorBaseConfiguration,Triamec.TriaLink.BridgePowerSwitch)">
      <summary>
            Does the work of <see cref="M:Triamec.Tam.ITamDrive.EmergencyStop(Triamec.TriaLink.DriveStopCommand)" />,
            <see cref="M:Triamec.Tam.ITamDevice.ResetFault" />, 
            <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" />
            and	<see cref="M:Triamec.Tam.ITamDevice.SwitchOn" />/<see cref="M:Triamec.Tam.ITamDevice.SwitchOff" /> as a whole and in this sequence.
            </summary>
      <param name="commands">A combination of <see cref="T:Triamec.TriaLink.DriveControlCommands" /> to execute.</param>
      <param name="driveStopCommand">The emergency stop command. Only applies when <paramref name="commands" />
            contains <see cref="F:Triamec.TriaLink.DriveControlCommands.EmergencyStop" />.</param>
      <param name="motorBaseConfiguration">The motor base configuration. Only applies when
            <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration" />.</param>
      <param name="powerSwitch">The setting of the power section switch. Only applies when
            <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" />.</param>
      <returns>
            An instance representing this request and its response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="motorBaseConfiguration" /> is <see cref="F:Triamec.TriaLink.MotorBaseConfiguration.Unknown" />.
            </exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
        <para>The drive refused to execute the <paramref name="commands" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.ResetFault" /> and
            		<see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" /> and <paramref name="powerSwitch" /> is
            		<see cref="F:Triamec.TriaLink.BridgePowerSwitch.On" />. Instead, use <see cref="M:Triamec.Tam.ITamDevice.SetOperational" />.</para>
        <para>-or-</para>
        <para>A listener to the <see cref="E:Triamec.Tam.ITamNodeComposite.NodesChanging" /> event vetoed to changing the axis
            configuration of this <see cref="T:Triamec.Tam.ITamDrive" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.ControlAxes(Triamec.TriaLink.AxisControlCommands)">
      <summary>
            Issues axis control commands to all <see cref="T:Triamec.Tam.TamAxis" /> instances of this <see cref="T:Triamec.Tam.ITamDrive" />
            in order to enable/disable them and/or to recover from errors.
            </summary>
      <param name="axisControlCommands">The combination of axis control commands to execute.</param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded state change.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.ControlTestSignalGenerator(Triamec.TriaLink.CurrentControllerTestSignalCommand,System.Single,System.Single,System.UInt16,System.UInt16)">
      <summary>
            Controls the test signal generator of all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" />.
            </summary>
      <param name="testSignalCommand">The test signal command to send.</param>
      <param name="frequency">The frequency of the test signal, in Hertz. Must be greater than 0Hz.</param>
      <param name="amplitude">The amplitude of the test signal, in Volt. Must be greater than 0V.</param>
      <param name="frameSize">The number of test samples, counted in periods of the current controller.
            Must be greater than <c>0</c>.</param>
      <param name="waitSize">The number of transient samples, counted in periods of the current controller.
            Must be greater than <c>0</c>.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.CoupleIn">
      <summary>
    
            Couples all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" /> as slaves to a master axis.
            
  </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.CoupleIn(System.Boolean)">
      <summary>
            Couples all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" /> as slaves to a master axis.
            </summary>
      <param name="direct">If set to <see langword="true" />, feed the path planner with the delivered values.
            Otherwise, use the values calculated by some electronic gearing Tama task.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.EmergencyStop(Triamec.TriaLink.DriveStopCommand)">
      <summary>
            Emergency stops all axis on the drive with a specified timeout.
            </summary>
      <param name="driveStopCommand">The kind of emergency stop to perform.</param>
      <returns>
            An instance representing this request and its response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
            	The drive refused to execute the <paramref name="driveStopCommand" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveAbsolute(System.Double)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances of this <see cref="T:Triamec.Tam.ITamDrive" /> to the specified absolute
            position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveAbsolute(System.Double,System.Single)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances of this <see cref="T:Triamec.Tam.ITamDrive" /> to the specified absolute
            position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveAbsolute(System.Double,System.Single,System.Single)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances of this <see cref="T:Triamec.Tam.ITamDrive" /> to the specified absolute
            position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveAbsolute(System.Double,System.Single,System.Single,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances of this <see cref="T:Triamec.Tam.ITamDrive" /> to the specified absolute
            position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveAbsolute(System.Double,System.Single,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances of this <see cref="T:Triamec.Tam.ITamDrive" /> to the specified absolute
            position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveAbsolute(System.Double,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances of this <see cref="T:Triamec.Tam.ITamDrive" /> to the specified absolute
            position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveVelocity(System.Single)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" /> using the specified velocity until
            another move command is issued.
            </summary>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveVelocity(System.Single,System.Single)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" /> using the specified velocity until
            another move command is issued.
            </summary>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveVelocity(System.Single,System.Single,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" /> using the specified velocity until
            another move command is issued.
            </summary>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.MoveVelocity(System.Single,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" /> using the specified velocity until
            another move command is issued.
            </summary>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.SetPosition(System.Double)">
      <summary>
            Sets the current <see cref="F:Triamec.TriaLink.SetPositionMode.Absolute" /> position of all <see cref="T:Triamec.Tam.TamAxis" /> instances in
            this <see cref="T:Triamec.Tam.ITamDrive" />.
            </summary>
      <param name="mode">How to interpret <paramref name="position" />.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.SetPosition(System.Double,Triamec.TriaLink.SetPositionMode)">
      <summary>
            Sets the current position of all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" />.
            </summary>
      <param name="mode">How to interpret <paramref name="position" />.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.Stop">
      <summary>
            Stops all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" />.
            </summary>
      <param name="emergency">If set to <see langword="true" />, stops this axis with maximum deceleration.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.Stop(System.Boolean)">
      <summary>
            Stops all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" />.
            </summary>
      <param name="emergency">If set to <see langword="true" />, stops this axis with maximum deceleration.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.ITamDrive.Stop(System.Single)">
      <summary>
            Stops all <see cref="T:Triamec.Tam.TamAxis" /> instances in this <see cref="T:Triamec.Tam.ITamDrive" /> using the specified deceleration.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="T:Triamec.Tam.ITamNode">
      <summary>
            Interface for a leaf node in a TAM topology tree.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamNode.Address">
      <summary>
            Gets the address of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamNode.BrowsableState">
      <summary>
            Gets the browsable state of the <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamNode.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamNode.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.ITamNode.CustomImage">
      <summary>
            Gets the custom <see cref="T:System.Drawing.Image" />
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamNode.DisplayName">
      <summary>Gets the display name of this node.</summary>
    </member>
    <member name="M:Triamec.Tam.ITamNode.FindTamNode(System.Uri)">
      <summary>
            Searches for an existing node within all descendant nodes
            of this node, or the root node of this node.
            </summary>
      <param name="address">An absolute or relative address.</param>
      <returns>
            The node with the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> cannot be mapped to a valid node.</exception>
    </member>
    <member name="M:Triamec.Tam.ITamNode.Load(System.String)">
      <summary>
            Loads different settings from a configuration file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">An exception occurred during deserialization
            or configuration application.
              </exception>
    </member>
    <member name="P:Triamec.Tam.ITamNode.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>
          <see cref="P:Triamec.Tam.ITamNode.CanEditName" /> == <see langword="false" /></c>.
              </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="E:Triamec.Tam.ITamNode.NameChanged">
      <summary>
            Event raised whenever the <see cref="P:Triamec.Tam.ITamNode.Name" /> property has changed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamNode.ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamNode.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />,
            or <see cref="F:Triamec.Tam.TamNodeImage.None" /> when to use <see cref="P:Triamec.Tam.ITamNode.CustomImage" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamNode.Save(System.String)">
      <summary>
            Saves relevant settings as XML configuration to a file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
            Serialization to the file specified by <paramref name="path" /> failed.
            </exception>
    </member>
    <member name="P:Triamec.Tam.ITamNode.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.ITamNode.ShortDescriptionOrName">
      <summary>
            Convenience method to get a description of this <see cref="T:Triamec.Tam.ITamNode" />
            without any <see cref="T:Triamec.Tam.TamException" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ITamNode.Tag">
      <summary>
            Gets or sets a client object related to this node.
            </summary>
    </member>
    <member name="T:Triamec.Tam.ITamNode`1">
      <summary>
            Generic interface for a leaf node in a TAM topology tree.
            </summary>
      <typeparam name="TParent">The type of the parent <see cref="T:Triamec.Tam.ITamNode" />s.</typeparam>
    </member>
    <member name="P:Triamec.Tam.ITamNode`1.ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.ITamNodeComposite">
      <summary>Interface for a non-leaf, composite <see cref="T:Triamec.Tam.ITamNode" /> in a TAM topology tree.</summary>
    </member>
    <member name="P:Triamec.Tam.ITamNodeComposite.Item(System.Int32)">
      <summary>
            Gets a child TAM node at a specified index.
            </summary>
      <param name="index">The index of the child TAM node.</param>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>- or -</para>
        <para>
          <paramref name="index" /> is equal to or greater than
            <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" />.<see cref="P:System.Collections.ICollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.ITamNodeComposite.Item(System.String)">
      <summary>
            Gets a child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not the <see cref="P:Triamec.Tam.ITamNode.Name" />
            of any of the child <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" />.</exception>
    </member>
    <member name="P:Triamec.Tam.ITamNodeComposite.Nodes">
      <summary>Gets the child nodes of this TAM node composite.</summary>
    </member>
    <member name="E:Triamec.Tam.ITamNodeComposite.NodesChanged">
      <summary>
            Event raised after the list of child <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has changed.
            </summary>
    </member>
    <member name="E:Triamec.Tam.ITamNodeComposite.NodesChanging">
      <summary>
            Event raised when child <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> are about to be removed and/or added.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamNodeComposite.TryGetNode(System.String,Triamec.Tam.ITamNode@)">
      <summary>
            Attempts to retrieve a child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <param name="node">A child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" /> with the specified name,
            or <see langword="null" /> if no such child exists.</param>
      <returns>Whether a node with the specified name was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:Triamec.Tam.ITamNodeComposite`2">
      <summary>
            Generic interface for a non-leaf, composite <see cref="T:Triamec.Tam.ITamNode" /> in a TAM topology tree.
            </summary>
      <typeparam name="TParent">The type of the parent <see cref="T:Triamec.Tam.ITamNodeComposite" />
            where this <see cref="T:Triamec.Tam.ITamNodeComposite`2" /> belongs to.</typeparam>
      <typeparam name="TChild">The type of the child <see cref="T:Triamec.Tam.ITamNode" />s.</typeparam>
    </member>
    <member name="P:Triamec.Tam.ITamNodeComposite`2.Item(System.Int32)">
      <summary>
            Gets a strongly typed child TAM node at a specified index.
            </summary>
      <param name="index">The index of the child TAM node.</param>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>- or -</para>
        <para>
          <paramref name="index" /> is equal to or greater than
            <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" />.<see cref="P:System.Collections.ICollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.ITamNodeComposite`2.Item(System.String)">
      <summary>
            Gets a strongly typed child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not the <see cref="P:Triamec.Tam.ITamNode.Name" />
            of any of the child <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" />.</exception>
    </member>
    <member name="P:Triamec.Tam.ITamNodeComposite`2.Nodes">
      <summary>
            Gets the child nodes of this TAM node composite.
            </summary>
    </member>
    <member name="M:Triamec.Tam.ITamNodeComposite`2.TryGetNode(System.String,`1@)">
      <summary>
            Attempts to retrieve a strongly typed child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <param name="node">A child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" /> with the specified name,
            or <see langword="null" /> if no such child exists.</param>
      <returns>Whether a node with the specified name was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:Triamec.Tam.LayoutManager">
      <summary>
            Manager for the dynamic loading and serving of register and periphery layout libraries.
            </summary>
    </member>
    <member name="M:Triamec.Tam.LayoutManager.GetRegisterLayoutFactory(System.UInt32)">
      <summary>
            Gets the register layout factory for a specified RLID.
            </summary>
      <param name="rlid">The register layout identifier.</param>
      <returns>The factory.</returns>
      <exception cref="T:Triamec.Tam.TamException">No factory found for <paramref name="rlid" />.</exception>
    </member>
    <member name="P:Triamec.Tam.LayoutManager.Instance">
      <summary>
            Gets the singleton LayoutManager instance.
            </summary>
    </member>
    <member name="F:Triamec.Tam.LayoutManager.REGISTER_LAYOUT_NAME">
      <summary>
            The first part of the file name of a register layout library.
            <para>The value is <c>"RegisterLayout"</c>.</para></summary>
    </member>
    <member name="E:Triamec.Tam.LayoutManager.UnknownLayout">
      <summary>
            Thrown when a device has a register layout for which this <see cref="T:Triamec.Tam.LayoutManager" /> cannot find
            an assembly.
            </summary>
    </member>
    <member name="T:Triamec.Tam.LayoutType">
      <summary>
            Specification of layout type.
            </summary>
    </member>
    <member name="F:Triamec.Tam.LayoutType.Register">
      <summary>Firmware register layout, identified by RLIDs, handled in the
            <see cref="N:Triamec.Tam.Registers" /> namespace.</summary>
    </member>
    <member name="T:Triamec.Tam.NodesChangedEventArgs">
      <summary>
            The argument of the <see cref="E:Triamec.Tam.ITamNodeComposite.NodesChanged" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.NodesChangedEventArgs.ChangedNodes">
      <summary>Gets the changed nodes reported by this event.</summary>
    </member>
    <member name="P:Triamec.Tam.NodesChangedEventArgs.Sender">
      <summary>
            Gets the sender of the event.
            </summary>
    </member>
    <member name="T:Triamec.Tam.NodesChangingEventArgs">
      <summary>
            The argument of the <see cref="E:Triamec.Tam.ITamNodeComposite.NodesChanging" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.NodesChangingEventArgs.CancelComment">
      <summary>
            Gets or sets a comment for canceling the event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.NodesChangingEventArgs.ChangingNodes">
      <summary>Gets the changing nodes reported by this event.</summary>
    </member>
    <member name="P:Triamec.Tam.NodesChangingEventArgs.Sender">
      <summary>
            Gets the sender of the event.
            </summary>
    </member>
    <member name="T:Triamec.Tam.ResetCompletedEventArgs">
      <summary>
            The argument of an <see cref="E:Triamec.Tam.TamAdapter.ResetCompleted" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ResetCompletedEventArgs.Exception">
      <summary>
            Gets the exception that occurred in the reset procedure,
            or <see langword="null" /> if no exception occurred.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ResetCompletedEventArgs.Role">
      <summary>
            Gets the role of the <see cref="P:Triamec.Tam.ResetCompletedEventArgs.Sender" />,
            or <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> when to leave the current role untouched.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ResetCompletedEventArgs.Sender">
      <summary>
            Gets the sender of the event.
            </summary>
    </member>
    <member name="T:Triamec.Tam.ResettingEventArgs">
      <summary>
            The argument of an <see cref="E:Triamec.Tam.TamAdapter.Resetting" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ResettingEventArgs.Role">
      <summary>
            Gets the role of the <see cref="P:Triamec.Tam.ResettingEventArgs.Sender" />,
            or <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> when to leave the current role untouched.
            </summary>
    </member>
    <member name="P:Triamec.Tam.ResettingEventArgs.Sender">
      <summary>
            Gets the sender of the event.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamaAssembly">
      <summary>
            A representation of a Tama assembly file
            and its verified binary data.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaAssembly.DownloadInfo">
      <summary>
            Gets or sets the download information.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaAssembly.GetBinaryData">
      <summary>
            Gets the binary data of this <see cref="T:Triamec.Tam.TamaAssembly" />.
            </summary>
      <returns>Returns the binary data of this <see cref="T:Triamec.Tam.TamaAssembly" />.</returns>
    </member>
    <member name="P:Triamec.Tam.TamaAssembly.IsBackedOnDisk">
      <summary>
            Gets a value indicating whether the <see cref="T:Triamec.Tam.TamaAssembly" /> has a regular <see cref="P:Triamec.Tam.TamaAssembly.Path" /> configured.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaAssembly.IsEmpty">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.TamaAssembly" /> is empty.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaAssembly.Parent">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamaNode" /> that
            this <see cref="T:Triamec.Tam.TamaAssembly" /> belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaAssembly.Path">
      <summary>
            Gets the file path of this <see cref="T:Triamec.Tam.TamaAssembly" />,
            or <see cref="F:System.String.Empty" /> to mark the empty <see cref="T:Triamec.Tam.TamaAssembly" />,
            or a special string in order to declare that the <see cref="T:Triamec.Tam.TamaAssembly" /> was embedded with a TAM
            configuration,
            or another special string in order to declare that the currently loaded <see cref="T:Triamec.Tam.TamaAssembly" /> has an
            unknown origin.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamAdapter">
      <summary>
            Hard- or software typically providing one physical or simulated <see cref="P:Triamec.Tam.TamAdapter.Link" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.#ctor(Triamec.Tam.TamSystem,Triamec.TriaLink.Adapter.ITriaLinkAdapter,Triamec.TriaLink.Adapter.TriaLinkRole)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TamAdapter" /> class.
            </summary>
      <param name="parent">The parent <see cref="T:Triamec.Tam.TamSystem" />
            where this <see cref="T:Triamec.Tam.TamAdapter" /> belongs to.</param>
      <param name="triaLinkAdapter">The Tria-Link adapter to work with.</param>
      <param name="role">How to reset the card at beginning.</param>
      <exception cref="T:Triamec.Tam.TamException">
        <para>The Tria-Link protocol could not be instantiated.</para>
        <para>-or-</para>
        <para>Failed to remove the current <see cref="T:Triamec.Tam.TamLink" /> instances.</para>
        <para>-or-</para>
        <para>Failed to add the new <see cref="T:Triamec.Tam.TamLink" /> instances.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CanChangeRole" /> of
              <paramref name="triaLinkAdapter" /> is <see langword="false" /> and <paramref name="role" /> is not
              <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> or <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Untouched" />.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="triaLinkAdapter" /> is <see langword="null" />.
              </exception>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.BeginReset(System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.TamAdapter.Reset" />.
            </summary>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation.
            This object is passed to the <paramref name="requestCallback" /> delegate
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.BeginReset(Triamec.TriaLink.Adapter.TriaLinkRole,System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.TamAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" />.
            </summary>
      <param name="role">The role of the Tria-Link adapter.
            Set to <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> to leave the current role untouched.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation.
            This object is passed to the <paramref name="requestCallback" /> delegate
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Triamec.Tam.TamAdapter" /> and optionally releases the managed
            resources.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.EndReset(System.IAsyncResult)">
      <summary>
            Ends an asynchronous call of <see cref="M:Triamec.Tam.TamAdapter.BeginReset(System.AsyncCallback,System.Object)" />.
            </summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> instance returned
            by a call to the <see cref="M:Triamec.Tam.TamAdapter.BeginReset(System.AsyncCallback,System.Object)" /> method.</param>
      <exception cref="T:Triamec.Tam.TamException">
        <para>Failed to remove the current <see cref="T:Triamec.Tam.TamLink" /> instances.</para>
        <para>Failed to add the new <see cref="T:Triamec.Tam.TamLink" /> instances.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamAdapter.IsSimulated">
      <summary>
            Indicates whether this adapter communicates with a simulated instance rather than with hardware.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAdapter.Link">
      <summary>
            Gets the first <see cref="T:Triamec.Tam.TamLink" /> managed by this <see cref="T:Triamec.Tam.TamAdapter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAdapter.Links">
      <summary>
            Gets the links of this adapter.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.OnBeforeReset">
      <summary>
            Called before the actual reset is conducted.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAdapter.PhysicalLayer">
      <summary>
            Indicates the underlying technology used to communicate with remote stations.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.Reset">
      <summary>
            Resets the adapter.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">
        <para>Failed to remove the current <see cref="T:Triamec.Tam.TamLink" /> instances.</para>
        <para>-or-</para>
        <para>Failed to reset the adapter.</para>
        <para>-or-</para>
        <para>Failed to add the new <see cref="T:Triamec.Tam.TamLink" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.TamAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)">
      <summary>
            Resets the adapter, adopting a given role (master or observer).
            </summary>
      <param name="role">
            The role of the Tria-Link adapter.
            Set to <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> to leave the current role untouched.
            </param>
    </member>
    <member name="E:Triamec.Tam.TamAdapter.ResetCompleted">
      <summary>
            Event raised at the end of the <see cref="M:Triamec.Tam.TamAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" /> procedure.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamAdapter.Resetting">
      <summary>
            Event raised at the beginning of the <see cref="M:Triamec.Tam.TamAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" /> procedure.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAdapter.Role">
      <summary>
            Indicates if this Tria-Link adapter is the Tria-Link master or an observer.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAdapter.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamAdapter.Site">
      <summary>
            Indicates where this adapter is located.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAdapter.System">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamSystem" /> where this <see cref="T:Triamec.Tam.TamAdapter" /> belongs to.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamaNode">
      <summary>
            Controls the state and program memory of the Tama virtual machines on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.AsynchronousVM">
      <summary>
            Gets the asynchronous Tama virtual machine
            managed by this <see cref="T:Triamec.Tam.TamaNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaNode.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.TamaNode.CustomImage">
      <summary>
            Gets the custom <see cref="T:System.Drawing.Image" />
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaNode.Dismiss">
      <summary>
            Dismiss the <see cref="T:Triamec.Tam.TamaAssembly" /> on the <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TamException">The download operation failed.</exception>
    </member>
    <member name="M:Triamec.Tam.TamaNode.DoDownload">
      <summary>
            Starts a Tama download.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TamException">The download operation failed.</exception>
    </member>
    <member name="M:Triamec.Tam.TamaNode.DoDownloadAsync">
      <summary>
            Starts a Tama download asynchronously.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">If another asynchronous download is pending.</exception>
    </member>
    <member name="E:Triamec.Tam.TamaNode.DownloadCompleted">
      <summary>
            The event thrown when the <see cref="M:Triamec.Tam.TamaNode.DoDownloadAsync" /> method completed operation.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamaNode.DownloadProgressChanged">
      <summary>
            The event thrown whenever the download routine has new progress information present.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.HasCode">
      <summary>
            Indicates whether a verified Tama assembly is present.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.IsBusy">
      <summary>
            Gets a value indicating whether a download is currently pending.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.IsModified">
      <summary>
            Indicates whether the file specified in <see cref="P:Triamec.Tam.TamaNode.TamaAssemblyPath" /> differs from the currently downloaded
            Tama assembly.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.IsochronousVM">
      <summary>
            Gets the isochronous Tama virtual machine
            managed by this <see cref="T:Triamec.Tam.TamaNode" />.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamaNode.ModifiedChanged">
      <summary>Thrown whenever the value of <see cref="P:Triamec.Tam.TamaNode.IsModified" /> changed.</summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Thrown on any attempt to set the property.
            </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamaNode.PredefinedImage">
      <summary>
            Gets the predefined image specification.
            to use for this <see cref="T:Triamec.Tam.ITamNode" />,
            or <see cref="F:Triamec.Tam.TamNodeImage.None" /> when to use <see cref="P:Triamec.Tam.TamaNode.CustomImage" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaNode.SynchronizeTamaAssembly">
      <summary>
            Checks whether the <see cref="P:Triamec.Tam.TamaNode.UnverifiedAssembly" /> loaded in memory is current compared to the
            assembly on disk and reloads it, if needed.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">The re-loading and verification of the Tama assembly failed.</exception>
    </member>
    <member name="P:Triamec.Tam.TamaNode.TamaAssemblyPath">
      <summary>
            Gets or sets the path of the Tama assembly prepared for downloading
            to the <see cref="P:Triamec.Tam.ITamDeviceComponent.Device" /> where this <see cref="T:Triamec.Tam.TamaNode" /> belongs to.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">The loading and verification of the Tama assembly failed.</exception>
    </member>
    <member name="P:Triamec.Tam.TamaNode.Triamec#Tam#ITamDeviceComponent#Device">
      <summary>
            Gets the parent <see cref="T:Triamec.Tam.ITamDevice" />
            where this <see cref="T:Triamec.Tam.TamaNode" /> belongs to.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamaNode.Triamec#Tam#ITamNode#NameChanged">
      <summary>
            Event raised whenever the <see cref="P:Triamec.Tam.TamaNode.Name" /> property has changed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.UnverifiedAssembly">
      <summary>
            Gets the Tama assembly prepared for downloading
            to the <see cref="P:Triamec.Tam.ITamDeviceComponent.Device" /> where this <see cref="T:Triamec.Tam.TamaNode" /> belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaNode.VerifiedTamaAssemblyPath">
      <summary>
            Gets the file path used to download the current Tama assembly
            on the <see cref="P:Triamec.Tam.ITamDeviceComponent.Device" /> where this <see cref="T:Triamec.Tam.TamaNode" /> belongs to.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamaVirtualMachine">
      <summary>
            Represents a Tama virtual machine
            on a <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.AbortAllTamRequests">
      <summary>
            	Artificially terminates all <see cref="T:Triamec.Tam.Requests.TamRequest" />s 
            	sent to all destinations with 
            	the same <see cref="P:Triamec.Tam.Requests.ITamRequestDestination.DestinationStation" />
            	as this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.AbortTamRequests">
      <summary>
            	Artificially terminates all <see cref="F:Triamec.Tam.Requests.TamRequestState.Pending" /> or
            	<see cref="F:Triamec.Tam.Requests.TamRequestState.Executing" /><see cref="T:Triamec.Tam.Requests.TamRequest" />s sent to this
            	<see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.Address">
      <summary>
            Gets the address of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.BrowsableState">
      <summary>
            Gets the browsable state of the <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.CustomImage">
      <summary>
            Gets the custom <see cref="T:System.Drawing.Image" />
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.DestinationStation">
      <summary>
            Gets the station wherein this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" /> belongs.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.Disable">
      <summary>
            Disables the Tama virtual machine.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">The device reports that it failed to execute the passed command.</exception>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.DisableAndVerify">
      <summary>
            Disables the Tama virtual machine
            and verifies that its becoming <see cref="F:Triamec.TriaLink.TamaVirtualMachineState.Ready" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>The device reports that it failed to execute the passed command.</para>
        <para>-or-</para>
        <para>The Tama virtual machine's state could not be read.</para>
        <para>-or-</para>
        <para>After the disabling, the Tama virtual machine
            is not <see cref="F:Triamec.TriaLink.TamaVirtualMachineState.Ready" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.Enable">
      <summary>
            Enables the Tama virtual machine.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">The device reports that it failed to execute the passed command.</exception>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.EnableAndVerify">
      <summary>
            Enables the Tama virtual machine
            and verifies that its becoming <see cref="F:Triamec.TriaLink.TamaVirtualMachineState.Operational" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>The device reports that it failed to execute the passed command.</para>
        <para>-or-</para>
        <para>The Tama virtual machine's state could not be read.</para>
        <para>-or-</para>
        <para>After the enabling, the Tama virtual machine
            is not <see cref="F:Triamec.TriaLink.TamaVirtualMachineState.Operational" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.FindTamNode(System.Uri)">
      <summary>
            Searches for an existing node within all descendant nodes
            of this node, or the root node of this node.
            </summary>
      <param name="address">An absolute or relative address.</param>
      <returns>
            The node with the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> cannot be mapped to a valid node.</exception>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.Initialize">
      <summary>
            Initializes the Tama virtual machine.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">The device reports that it failed to execute the passed command.</exception>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.Load(System.String)">
      <summary>
            Loads different settings from a configuration file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">An exception occurred during deserialization
            or configuration application.
              </exception>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.MachineType">
      <summary>
            Gets the type of this Tama virtual machine.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Thrown on any attempt to set the property.
            </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.ParentTamaNode">
      <summary>
            Gets the parent <see cref="T:Triamec.Tam.TamaNode" />
            where this Tama virtual machine belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.PredefinedImage">
      <summary>
            Gets the predefined image specification.
            to use for this <see cref="T:Triamec.Tam.ITamNode" />,
            or <see cref="F:Triamec.Tam.TamNodeImage.None" /> when to use <see cref="P:Triamec.Tam.TamaVirtualMachine.CustomImage" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.ProgramCommandRegister">
      <summary>
            Gets the command register of the Tama task executed by this virtual machine.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.ProgramStateRegister">
      <summary>
            Gets the state register of the Tama task executed by this virtual machine.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.Save(System.String)">
      <summary>
            Saves relevant settings as XML configuration to a file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
            Serialization to the file specified by <paramref name="path" /> failed.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.ShortDescriptionOrName">
      <summary>
            Convenience method to get a description of this <see cref="T:Triamec.Tam.ITamNode" />
            without any <see cref="T:Triamec.Tam.TamException" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.StateRegister">
      <summary>
            Gets the state register of this Tama virtual machine.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.Tag">
      <summary>
            Gets or sets a client object related to this node.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamaVirtualMachine.Transition">
      <summary>
            Occurs after the state machine of a Tama program running on this <see cref="T:Triamec.Tam.TamaVirtualMachine" /> was
            triggered.
            </summary>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamaVirtualMachine.Triamec#Tam#ITamNode#CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.Triamec#Tam#ITamNode#DisplayName">
      <summary>Gets the display name of this node.</summary>
    </member>
    <member name="E:Triamec.Tam.TamaVirtualMachine.Triamec#Tam#ITamNode#NameChanged">
      <summary>
            Event raised whenever the <see cref="P:Triamec.Tam.TamaVirtualMachine.Name" /> property has changed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamaVirtualMachine.Triamec#Tam#ITamNode#ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamaVirtualMachineType">
      <summary>
            The type of a <see cref="T:Triamec.Tam.TamaVirtualMachine" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.TamaVirtualMachineType.Asynchronous">
      <summary>Asynchronously executed Tama virtual machine.</summary>
    </member>
    <member name="F:Triamec.Tam.TamaVirtualMachineType.Isochronous">
      <summary>Isochronously executed Tama virtual machine.</summary>
    </member>
    <member name="T:Triamec.Tam.TamAxis">
      <summary>
            Controlled system of an <see cref="T:Triamec.Tam.ITamDrive" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.AbortAllTamRequests">
      <summary>
            Artificially terminates all <see cref="T:Triamec.Tam.Requests.TamRequest" />s
            sent to all destinations with
            the same <see cref="P:Triamec.Tam.Requests.ITamRequestDestination.DestinationStation" />
            as this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.AbortTamRequests">
      <summary>
            Artificially terminates all <see cref="F:Triamec.Tam.Requests.TamRequestState.Pending" /> or
            <see cref="F:Triamec.Tam.Requests.TamRequestState.Executing" /><see cref="T:Triamec.Tam.Requests.TamRequest" />s sent to this
            <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.Address">
      <summary>
            Gets the address of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.AxisIndex">
      <summary>
            Gets the zero based index of the axis.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.BrowsableState">
      <summary>
            Gets the browsable state of the <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.Control(Triamec.TriaLink.AxisControlCommands)">
      <summary>
            Issues an axis control command in order to enable/disable the axis and/or to recover from errors.
            </summary>
      <param name="axisControlCommands">The combination of axis control commands to execute.</param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded state change.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="P:Triamec.Tam.TamAxis.ControlSystemTreatment">
      <summary>
            Gets an instance caring about how the real time system can control this <see cref="T:Triamec.Tam.TamAxis" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.ControlTestSignalGenerator(Triamec.TriaLink.CurrentControllerTestSignalCommand,System.Single,System.Single,System.UInt16,System.UInt16)">
      <summary>
            Controls the test signal generator of this <see cref="T:Triamec.Tam.TamAxis" />.
            </summary>
      <param name="testSignalCommand">The test signal command to send.</param>
      <param name="frequency">The frequency of the test signal, in Hertz. Must be greater than 0Hz.</param>
      <param name="amplitude">The amplitude of the test signal, in Volt. Must be greater than 0V.</param>
      <param name="frameSize">The number of test samples, counted in periods of the current controller.
            Must be greater than <c>0</c>.</param>
      <param name="waitSize">The number of transient samples, counted in periods of the current controller.
            Must be greater than <c>0</c>.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.CoupleIn">
      <summary>
            Couples this axis as a slave to a master axis.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.CoupleIn(System.Boolean)">
      <summary>
            Couples this axis as a slave to a master axis. [Prefer to use <see cref="M:Triamec.Tam.TamAxis.CoupleIn" />]
            </summary>
      <param name="direct">If set to <see langword="true" />, feed the path planner with the delivered values.
            Otherwise, use the values calculated by some electronic gearing Tama task.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.TamAxis.CustomImage">
      <summary>
            Gets the custom <see cref="T:System.Drawing.Image" />
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.DestinationStation">
      <summary>
            Gets the station wherein this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" /> belongs.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.DisplayName">
      <summary>Gets the display name of this node.</summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="P:Triamec.Tam.TamAxis.Drive">
      <summary>
            Gets the drive.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.FindReadonlyRegister``1(System.String)">
      <summary>
            Finds the read-only register with a particular tag key/value pair and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <typeparam name="T">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> of the register.</typeparam>
      <returns>The found register component.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Multiple or no register components found.</exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.FindReadonlyRegister``1(System.String,System.String)">
      <summary>
            Finds the read-only register with a particular tag key/value pair and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <typeparam name="T">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> of the register.</typeparam>
      <returns>The found register component.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Multiple or no register components found.</exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.FindRegister``1(System.String)">
      <summary>
            Finds the writable register with a particular tag key/value pair and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <typeparam name="T">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> of the register.</typeparam>
      <returns>The found register component.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Multiple or no register components found.</exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.FindRegister``1(System.String,System.String)">
      <summary>
            Finds the writable register with a particular tag key/value pair and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <typeparam name="T">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> of the register.</typeparam>
      <returns>The found register component.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Multiple or no register components found.</exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.FindTamNode(System.Uri)">
      <summary>
            Searches for an existing node within all descendant nodes
            of this node, or the root node of this node.
            </summary>
      <param name="address">An absolute or relative address.</param>
      <returns>
            The node with the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> cannot be mapped to a valid node.</exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.GetPositionUnit">
      <summary>
            Gets the unit of positional values of this axis.
            </summary>
      <param name="guess">
            Whether a unspecified unit should be resolved by interpreting encoder pitch and lines.
            </param>
    </member>
    <member name="M:Triamec.Tam.TamAxis.GetPositionUnit(System.Boolean)">
      <summary>
            Gets the unit of positional values of this axis.
            </summary>
      <param name="guess">
            Whether a unspecified unit should be resolved by interpreting encoder pitch and lines.
            </param>
    </member>
    <member name="M:Triamec.Tam.TamAxis.Load(System.String)">
      <summary>
            Loads different settings from a configuration file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">An exception occurred during deserialization
            or configuration application.
              </exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAbsolute(System.Double)">
      <summary>
            Moves to the specified absolute position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAbsolute(System.Double,System.Single)">
      <summary>
            Moves to the specified absolute position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAbsolute(System.Double,System.Single,System.Single)">
      <summary>
            Moves to the specified absolute position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAbsolute(System.Double,System.Single,System.Single,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves to the specified absolute position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAbsolute(System.Double,System.Single,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves to the specified absolute position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAbsolute(System.Double,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves to the specified absolute position.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAdditive(System.Double)">
      <summary>
            Moves by the specified distance additive to the most recently commanded position.
            </summary>
      <param name="distance">The distance to move from the actual position, in meters or radian.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAdditive(System.Double,System.Single)">
      <summary>
            Moves by the specified distance additive to the most recently commanded position.
            </summary>
      <param name="distance">The distance to move from the actual position, in meters or radian.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAdditive(System.Double,System.Single,System.Single)">
      <summary>
            Moves by the specified distance additive to the most recently commanded position.
            </summary>
      <param name="distance">The distance to move from the actual position, in meters or radian.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveAdditive(System.Double,System.Single,System.Single,Triamec.TriaLink.PathPlannerDirection)"></member>
    <member name="M:Triamec.Tam.TamAxis.MoveAdditive(System.Double,System.Single,Triamec.TriaLink.PathPlannerDirection)"></member>
    <member name="M:Triamec.Tam.TamAxis.MoveAdditive(System.Double,Triamec.TriaLink.PathPlannerDirection)"></member>
    <member name="M:Triamec.Tam.TamAxis.MoveRelative(System.Double)">
      <summary>
            Moves from the actual position by the specified distance.
            </summary>
      <param name="distance">The distance to move from the actual position, in meters or radian.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveRelative(System.Double,System.Single)">
      <summary>
            Moves from the actual position by the specified distance.
            </summary>
      <param name="distance">The distance to move from the actual position, in meters or radian.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveRelative(System.Double,System.Single,System.Single)">
      <summary>
            Moves from the actual position by the specified distance.
            </summary>
      <param name="distance">The distance to move from the actual position, in meters or radian.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveRelative(System.Double,System.Single,System.Single,Triamec.TriaLink.PathPlannerDirection)"></member>
    <member name="M:Triamec.Tam.TamAxis.MoveRelative(System.Double,System.Single,Triamec.TriaLink.PathPlannerDirection)"></member>
    <member name="M:Triamec.Tam.TamAxis.MoveRelative(System.Double,Triamec.TriaLink.PathPlannerDirection)"></member>
    <member name="M:Triamec.Tam.TamAxis.MoveVelocity(System.Single)">
      <summary>
            Moves using the specified velocity until another move command is issued.
            </summary>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveVelocity(System.Single,System.Single)">
      <summary>
            Moves using the specified velocity until another move command is issued.
            </summary>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveVelocity(System.Single,System.Single,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves using the specified velocity until another move command is issued.
            </summary>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.MoveVelocity(System.Single,Triamec.TriaLink.PathPlannerDirection)">
      <summary>
            Moves using the specified velocity until another move command is issued.
            </summary>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="P:Triamec.Tam.TamAxis.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>
          <see cref="P:Triamec.Tam.ITamNode.CanEditName" /> == <see langword="false" /></c>.
              </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="E:Triamec.Tam.TamAxis.NameChanged">
      <summary>
            Event raised whenever the <see cref="P:Triamec.Tam.TamAxis.Name" /> property has changed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />,
            or <see cref="F:Triamec.Tam.TamNodeImage.None" /> when to use <see cref="P:Triamec.Tam.TamAxis.CustomImage" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.ReadAxisError">
      <summary>
            Reads the current error of the <see cref="T:Triamec.Tam.TamAxis" />.
            </summary>
      <returns>
            Returns the current error of the <see cref="T:Triamec.Tam.TamAxis" />,
            or <see cref="F:Triamec.TriaLink.AxisErrorIdentification.None" /> if the <see cref="T:Triamec.Tam.TamAxis" /> has no error.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.ReadAxisState">
      <summary>
            Reads the current state of the <see cref="T:Triamec.Tam.TamAxis" />.
            </summary>
      <returns>Returns the current state of the <see cref="T:Triamec.Tam.TamAxis" />.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamAxis.Register">
      <summary>
            Gets the root of the registers related to this <see cref="T:Triamec.Tam.TamAxis" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.Save(System.String)">
      <summary>
            Saves relevant settings as XML configuration to a file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
            Serialization to the file specified by <paramref name="path" /> failed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.SetPosition(System.Double)">
      <summary>
            Sets the current <see cref="F:Triamec.TriaLink.SetPositionMode.Absolute" /> position of this axis.
            </summary>
      <param name="mode">How to interpret <paramref name="position" />.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.SetPosition(System.Double,Triamec.TriaLink.SetPositionMode)">
      <summary>
            Sets the current position of this axis.
            </summary>
      <param name="mode">How to interpret <paramref name="position" />.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="P:Triamec.Tam.TamAxis.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamAxis.ShortDescriptionOrName">
      <summary>
            Convenience method to get a description of this <see cref="T:Triamec.Tam.ITamNode" />
            without any <see cref="T:Triamec.Tam.TamException" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamAxis.Stop">
      <summary>
            Stops this axis.
            </summary>
      <param name="emergency">If set to <see langword="true" />, stops this axis with maximum deceleration.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.Stop(System.Boolean)">
      <summary>
            Stops this axis.
            </summary>
      <param name="emergency">If set to <see langword="true" />, stops this axis with maximum deceleration.</param>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TamAxis.Stop(System.Single)">
      <summary>
            Stops this axis using the specified deceleration.
            </summary>
      <param name="position">The target position for the motion, in meters or radian.</param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
      </param>
      <param name="direction">
        <para id="10">The direction to force.</para>
      </param>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the commanded movement.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="P:Triamec.Tam.TamAxis.Tag">
      <summary>
            Gets or sets a client object related to this node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamAxis.TorqueLimiter">
      <summary>
            Gets the torque limiter.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamAxis.Transition">
      <summary>
            Occurs after the state machine of this <see cref="T:Triamec.Tam.TamAxis" /> was triggered.
            </summary>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamAxis.Triamec#Tam#ITamDeviceComponent#Device">
      <summary>
            Gets the TAM device where this component belongs to.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamDevice">
      <summary>Microprocessor on a <see cref="T:Triamec.Tam.TamStation" /> accepting Tria-Link service commands.</summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.AbortAllTamRequests">
      <summary>
            Artificially terminates all <see cref="T:Triamec.Tam.Requests.TamRequest" />s
            sent to all destinations with
            the same <see cref="P:Triamec.Tam.Requests.ITamRequestDestination.DestinationStation" />
            as this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.AbortTamRequests">
      <summary>
            Artificially terminates all <see cref="F:Triamec.Tam.Requests.TamRequestState.Pending" /> or
            <see cref="F:Triamec.Tam.Requests.TamRequestState.Executing" /><see cref="T:Triamec.Tam.Requests.TamRequest" />s sent to this
            <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.ActivateStandAloneStartup(Triamec.TriaLink.StartupSettings)">
      <summary>
            Activates the stand-alone startup mode at this device.
            </summary>
      <param name="startupSettings">The new startup settings to activate.</param>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> or its Tria-Link has been disposed.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startupSettings" /> is <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">Failed to activate the stand-alone startup mode.</exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.ActiveFirmware">
      <summary>
            Gets the identification of the firmware image currently running on the device.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">The location could not be read out.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.AddStateObserver(System.Object)">
      <summary>
            Adds an observing client and, if not done yet, establishes the observing subscription.
            Registers a client observing the state changes on this <see cref="T:Triamec.Tam.ITamDevice" /> and,
            if not done yet, establishes the observing subscription.
            </summary>
      <param name="clientIdentification">An object identifying the client.
            Must be used by the client when calling <see cref="M:Triamec.Tam.ITamDevice.RemoveStateObserver(System.Object)" />.</param>
      <returns>
            The value of <see cref="P:Triamec.Tam.ITamDevice.StateObserverCount" />
            after <paramref name="clientIdentification" /> has been registered.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="clientIdentification" /> is not valid. The specified client is already registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientIdentification" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
    </member>
    <member name="E:Triamec.Tam.TamDevice.AnyTransition">
      <summary>
            Occurs whenever the <see cref="E:Triamec.Tam.Requests.ITamRequestDestination.Transition" /> of this <see cref="T:Triamec.Tam.ITamDevice" /> or
            a subsumed <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" /> occurs.
            </summary>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.Control(Triamec.TriaLink.DriveControlCommands,Triamec.TriaLink.MotorBaseConfiguration,Triamec.TriaLink.BridgePowerSwitch)">
      <summary>
            Does the work of <see cref="M:Triamec.Tam.ITamDevice.ResetFault" />, <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" />
            and	<see cref="M:Triamec.Tam.ITamDevice.SwitchOn" />/<see cref="M:Triamec.Tam.ITamDevice.SwitchOff" /> as a whole and in this sequence.
            </summary>
      <param name="commands">A combination of <see cref="T:Triamec.TriaLink.DriveControlCommands" /> to execute.</param>
      <param name="motorBaseConfiguration">The motor base configuration. Only applies when
            <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration" />.</param>
      <param name="powerSwitch">The setting of the power section switch. Only applies when
            <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" />.</param>
      <returns>
            An instance representing this request and its response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="motorBaseConfiguration" /> is <see cref="F:Triamec.TriaLink.MotorBaseConfiguration.Unknown" />.
            </exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
        <para>The drive refused to execute the <paramref name="commands" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="commands" /> contains <see cref="F:Triamec.TriaLink.DriveControlCommands.ResetFault" /> and
            		<see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" /> and <paramref name="powerSwitch" /> is
            		<see cref="F:Triamec.TriaLink.BridgePowerSwitch.On" />. Instead, use <see cref="M:Triamec.Tam.ITamDevice.SetOperational" />.</para>
        <para>-or-</para>
        <para>A listener to the <see cref="E:Triamec.Tam.ITamNodeComposite.NodesChanging" /> event vetoed to changing the axis
            configuration of this <see cref="T:Triamec.Tam.ITamDrive" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.DeactivateStandAloneStartup">
      <summary>
            Deactivates the stand-alone startup mode at this device.
            </summary>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> or its Tria-Link has been disposed.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">Failed to deactivate the stand-alone startup mode.</exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.DestinationStation">
      <summary>
            Gets the station wherein this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" /> belongs.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:Triamec.Tam.TamDevice.FastTaskPeriod">
      <summary>
            Gets the duration of one cycle of the fast task of a device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.FirmwareDownloader">
      <summary>
            Provides a means to update the firmware of this <see cref="T:Triamec.Firmware.IFlashArea" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.FirmwareInfo">
      <summary>
            Gets the firmware identification.
            </summary>
      <exception cref="T:System.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.GetStatistics(Triamec.TriaLink.StatisticSelector,System.Boolean)">
      <summary>
            Gets the internal statistics counters.
            </summary>
      <param name="selector">The selector.</param>
      <param name="resetCounters">if set to <see langword="true" />, the counters are reset after returning the
            current values.</param>
      <returns>
            A set of 10 counters, where the meaning depends on <paramref name="selector" /> and the
            kind of device.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred or the device does not support the
            command.</exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Homepage">
      <summary>
            Gets the address where this <see cref="T:Triamec.Tam.TamDevice" /> has its web interface exposed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.IsModuleChanging">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.ITamDevice" /> is currently changing its
            <see cref="P:Triamec.Tam.ITamDevice.Module" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.IsochronousBasePeriod">
      <summary>
            Gets the base period this <see cref="T:Triamec.Tam.ITamDevice" /> delivers
            <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Module">
      <summary>
            Gets or sets the module assigned to this <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">
            At least one module component of the current <see cref="T:Triamec.Tam.Modules.TamModule" /> could not be locked, which is
            necessary prior to beeing removed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.OnAfterMotorBaseConfigurationChangeNodes(System.Boolean)">
      <summary>
            Changes nodes dependent on a newly written <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" />.
            </summary>
      <param name="childrenRemoved">Whether nodes were removed.</param>
    </member>
    <member name="M:Triamec.Tam.TamDevice.OnAfterMotorBaseConfigurationCreateNodes(Triamec.TriaLink.MotorBaseConfiguration)">
      <summary>
            Creates new <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> dependent nodes.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.OnBeforeMotorBaseConfigurationChangeNodes">
      <summary>
            Prepares to change nodes dependent on the current <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" />.
            </summary>
      <returns>
            Whether nodes where removed.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Node removal failed.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.OnBeforeMotorBaseConfigurationDisposeNodes">
      <summary>
            Disposes <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> dependent nodes.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.OnDisposeAfterModule">
      <summary>
            Disposes of resources which a module may depend on.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.ReadDeviceError">
      <summary>
            Reads the current device error.
            </summary>
      <returns>
            Returns the current device error or <see cref="F:Triamec.TriaLink.DeviceErrorIdentification.None" /> if the device has no error.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.ReadDeviceState">
      <summary>
            Reads the current state of the device.
            </summary>
      <returns>Returns the current state of the device.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.ReadMotorBaseConfiguration">
      <summary>
            Reads the motor base configuration from the device.
            </summary>
      <returns>
            The current motor base configuration or <see cref="F:Triamec.TriaLink.MotorBaseConfiguration.Unknown" /> if the device does not
            support motor base configurations.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.ReadStartupSettings">
      <summary>
            Reads the startup settings of the device.
            </summary>
      <returns>The settings read from the device, including <see cref="P:Triamec.TriaLink.StartupSettings.StationName" /> and a value
            for <see cref="M:Triamec.TriaLink.ResponseStartupSettings.GetMD5Checksum" />.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> or its Tria-Link has been disposed.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">Failed to deactivate the stand-alone startup mode.</exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Register">
      <summary>
            Gets the root of the register tree of this <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.RegisterLayoutId">
      <summary>
            Gets the Register Layout ID.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.ReloadParameters">
      <summary>
            Reloads the parameter registers from the locally persisted values into register memory.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
        <para>There are no parameters persisted on this device.</para>
        <para>-or-</para>
        <para>A new firmware was downloaded to this device with a new <see cref="P:Triamec.Tam.ITamDevice.RegisterLayoutId" /> since the
            parameters were saved (using <see cref="M:Triamec.Tam.ITamDevice.ActivateStandAloneStartup(Triamec.TriaLink.StartupSettings)" />) the last time.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> or its Tria-Link has been disposed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.RemoveStateObserver(System.Object)">
      <summary>
            Unregisters a client observing the state changes on this <see cref="T:Triamec.Tam.TamDevice" /> and,
            for the last removed observing client,
            deletes the observing subscription.
            </summary>
      <param name="clientIdentification">An object identifying the client.
            Must be the same object used by the client
            with a previous call of <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.</param>
      <returns>
            The value of <see cref="P:Triamec.Tam.ITamDevice.StateObserverCount" />
            after <paramref name="clientIdentification" /> has been unregistered.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="clientIdentification" /> is not valid. The specified client is not registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientIdentification" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.ResetFault">
      <summary>
            Resets the device from fault state.
            </summary>
      <returns>An instance representing this request and its response.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDevice" /> has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            The device refused to execute the <see cref="F:Triamec.TriaLink.DriveControlCommands.ResetFault" /> command.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Schedules">
      <summary>
            Gets a read-only list of the different schedules of the device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)">
      <summary>
            Sets the specified motor base configuration with a specified timeout.
            </summary>
      <param name="motorBaseConfiguration">The motor base configuration.</param>
      <returns>
            An instance representing this request and its response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="motorBaseConfiguration" /> is <see cref="F:Triamec.TriaLink.MotorBaseConfiguration.Unknown" />.
            </exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
            A listener to the <see cref="E:Triamec.Tam.ITamNodeComposite.NodesChanging" /> event
            vetoed to changing the axis configuration of this <see cref="T:Triamec.Tam.ITamDrive" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            The device refused to execute the <see cref="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration" /> command.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.SetOperational">
      <summary>
            Tries to set this device operational if necessary.
            I.e. resets a pending drive fault,
            and switches the bridge power on.
            </summary>
      <param name="clientIdentification">An object identifying the client.
            Must be used by the client when calling <see cref="M:Triamec.Tam.ITamDevice.RemoveStateObserver(System.Object)" />.</param>
      <returns>
            The value of <see cref="P:Triamec.Tam.ITamDevice.StateObserverCount" />
            after <paramref name="clientIdentification" /> has been registered.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">The drive could not be set operational.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="clientIdentification" /> is not valid. The specified client is already registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientIdentification" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.SetReadyToSwitchOn">
      <summary>
            Executes commands to bring this device into state <see cref="F:Triamec.TriaLink.DeviceState.ReadyToSwitchOn" />.
            </summary>
      <param name="clientIdentification">An object identifying the client.
            Must be used by the client when calling <see cref="M:Triamec.Tam.ITamDevice.RemoveStateObserver(System.Object)" />.</param>
      <returns>
            The value of <see cref="P:Triamec.Tam.ITamDevice.StateObserverCount" />
            after <paramref name="clientIdentification" /> has been registered.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            It is not possible to bring the device into state <see cref="F:Triamec.TriaLink.DeviceState.ReadyToSwitchOn" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="clientIdentification" /> is not valid. The specified client is already registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clientIdentification" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.StateObserverCount">
      <summary>
            Gets the count of clients observing the state changes on this <see cref="T:Triamec.Tam.ITamDevice" /> registered with
            <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Station">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamStation" /> where this <see cref="T:Triamec.Tam.ITamDevice" /> belongs to.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.SwitchOff">
      <summary>
            Switches the device off.
            </summary>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the command.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamDevice.SwitchOn">
      <summary>
            Switches the device on.
            </summary>
      <returns>
            A reference to a tracking instance allowing to wait for the <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> of
            the command.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.Tam.ITamDrive" /> has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The device was not in state
              <see cref="F:Triamec.TriaLink.DeviceState.ReadyToSwitchOn" /> or already <see cref="F:Triamec.TriaLink.DeviceState.Operational" />.</exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.TamaManager">
      <summary>
            Gets the Tama manager of this <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.TamaVirtualMachineId">
      <summary>
            Gets the Tama virtual machine Id.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="E:Triamec.Tam.TamDevice.Transition">
      <summary>
            Occurs after the state machine of this <see cref="T:Triamec.Tam.TamDevice" /> was triggered.
            </summary>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Triamec#Firmware#IFlashArea#FlashName">
      <summary>
            Gets the name of this flash area.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Triamec#Firmware#IFlashArea#MajorRevision">
      <summary>
            Gets the encoded major revision of the product this flash represents.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamDevice.Triamec#Firmware#IFlashArea#Ping">
      <summary>
            Tests whether the area is accessible.
            </summary>
      <returns>
        <see langword="true" /> iff communication succeeded.</returns>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Triamec#Firmware#IFlashArea#Position">
      <summary>
            Gets the position in the product naming scheme this flash area addresses.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamDevice.Triamec#Tam#Modules#IModuleComponentParent#Device">
      <summary>
            Gets the reflexive, transitive ancestor <see cref="T:Triamec.Tam.TamDevice" /> of this instance.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamEnumerable">
      <summary>
            Extension methods for the <see cref="T:Triamec.Tam.ITamNode" /> interface.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamEnumerable.AsDepthFirst``1(Triamec.Tam.ITamNode)">
      <summary>
            Gets all descendants of a specified node, including itself, of a specified type.
            </summary>
      <param name="node">The head node.</param>
      <typeparam name="T">The type of nodes to return.</typeparam>
    </member>
    <member name="M:Triamec.Tam.TamEnumerable.AsDepthFirst``1(Triamec.Tam.ITamNode,System.Func{Triamec.Tam.ITamNode,System.Boolean})">
      <summary>
            Gets all descendants of a specified node, including itself, of a specified type.
            </summary>
      <param name="node">The head node.</param>
      <param name="predicate">Stop criterion regarding depth.</param>
      <typeparam name="T">The type of nodes to return.</typeparam>
    </member>
    <member name="M:Triamec.Tam.TamEnumerable.AsDepthFirstLeaves``1(Triamec.Tam.ITamNode)">
      <summary>
            Gets all descendants of a specified node, excluding itself, of a specified type, treating those type of
            nodes as leaf nodes in the tree.
            </summary>
      <param name="node">The head node.</param>
      <typeparam name="T">The type of nodes to return.</typeparam>
      <returns>
            The sequence of descendant items of type <typeparamref name="T" />, if any exist, or an empty sequence if
            <paramref name="node" /> is of type <typeparamref name="T" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamEnumerable.AsDepthFirstLeavesReflexive``1(Triamec.Tam.ITamNode)">
      <summary>
            Gets all descendants of a specified node, including itself, of a specified type, treating those type of
            nodes as leaf nodes in the tree.
            </summary>
      <param name="node">The head node.</param>
      <typeparam name="T">The type of nodes to return.</typeparam>
      <returns>
            The sequence of reflexive descendant items of type <typeparamref name="T" />, if any exist, or an empty
            sequence if <paramref name="node" /> is of type <typeparamref name="T" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamEnumerable.AsDepthFirstReflexive``1(Triamec.Tam.ITamNode)">
      <summary>
            Gets all descendants of a specified node, including itself, of a specified type.
            </summary>
      <param name="node">The head node.</param>
      <typeparam name="T">The type of nodes to return.</typeparam>
      <returns>The sequence of descendant items of type <typeparamref name="T" />, if any exist, or an empty
            sequence if <paramref name="node" /> is of type <typeparamref name="T" />.</returns>
    </member>
    <member name="M:Triamec.Tam.TamEnumerable.NavigateToRoot(Triamec.Tam.ITamNode)">
      <summary>Navigates to top node in the hierarchy by means of <see cref="P:Triamec.Tam.ITamNode.ParentNode" />.</summary>
      <param name="node">The node.</param>
      <returns></returns>
    </member>
    <member name="T:Triamec.Tam.TamException">
      <summary>
            Base exception thrown when working with the TAM Software.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TamException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Triamec.Tam.TamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Triamec.Tam.TamException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TamException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Triamec.Tam.TamException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TamException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="M:Triamec.Tam.TamException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that Contains contextual information about the source or destination.</param>
    </member>
    <member name="T:Triamec.Tam.TamFullAdapter">
      <summary>
        <see cref="T:Triamec.Tam.TamAdapter" /> possibly providing access to peripheral functions, and providing product information.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamFullAdapter.BeginReset(Triamec.TriaLink.Adapter.TriaLinkRole,System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.TamAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" />.
            </summary>
      <param name="role">The role of the Tria-Link adapter.
            Set to <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> to leave the current role untouched.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation.
            This object is passed to the <paramref name="requestCallback" /> delegate
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.CanChangeRole">
      <summary>
            Indicates whether this adapter supports changing its role using
            <see cref="M:Triamec.Tam.TamAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.FirmwareInfo">
      <summary>
            Gets the firmware identification.
            </summary>
      <exception cref="T:System.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.HardwareSerialNumber">
      <summary>
            Gets the raw serial number.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.HasSdramFifo">
      <summary>
            Indicates whether the SDRAM FIFO
            (Synchronous Dynamic Random Access Memory)
            physically exist on this adapter.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.IsSoftwareObserverEnabled">
      <summary>
            Gets or sets a value indicating whether another application may observe this link.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.Periphery">
      <summary>
            Gets the root of the periphery register tree of this <see cref="T:Triamec.Tam.Periphery.IPeripheryLayoutOwner" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.PeripheryLayoutId">
      <summary>
            Gets the periphery register layout identifier.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.ProductInfo">
      <summary>
            Gets the identification about the product represented by this <see cref="T:Triamec.Tam.TamAdapter" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamFullAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)">
      <summary>
            Resets the adapter, adopting a given role (master or observer).
            </summary>
      <param name="role">
            The role of the Tria-Link adapter.
            Set to <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> to leave the current role untouched.
            </param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Tam.TamFullAdapter.CanChangeRole" /> is <see langword="false" /> and <paramref name="role" /> is not
            <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> or <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Untouched" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.Role">
      <summary>
            Indicates if this Tria-Link adapter is the Tria-Link master or an observer.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.SdramFifo">
      <summary>
            Gets the SDRAM FIFO.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.SerialNumber">
      <summary>
            Gets the serial number of the product.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.Triamec#Firmware#IFlashArea#FirmwareDownloader">
      <summary>
            Provides a means to update the firmware of this <see cref="T:Triamec.Firmware.IFlashArea" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.Triamec#Firmware#IFlashArea#FlashName">
      <summary>
            Gets the name of this flash area.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.Triamec#Firmware#IFlashArea#MajorRevision">
      <summary>
            Gets the encoded major revision of the product this flash represents.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamFullAdapter.Triamec#Firmware#IFlashArea#Ping">
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.Triamec#Firmware#IFlashArea#Position">
      <summary>
            Gets the position in the product naming scheme this flash area addresses.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamFullAdapter.Triamec#Tam#Firmware#IProduct#PackageDownloader">
      <summary>
            Provides a means to update the firmware of this <see cref="T:Triamec.Tam.Firmware.IProduct" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamLink">
      <summary>
            Physical or simulated communication channel connecting a <see cref="T:Triamec.Tam.TamAdapter" /> with
            <see cref="T:Triamec.Tam.TamStation" />s. 
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.Adapter">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamAdapter" /> where this <see cref="T:Triamec.Tam.TamLink" /> belongs to.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamLink.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.IBootable.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" />.
            </summary>
      <param name="bootMode">The boot mode.</param>
      <param name="skipResetAllFaults">If set to <see langword="true" />, skips calling
            <see cref="M:Triamec.Tam.TamLink.ResetAllFaults" /> at the end of the boot sequence.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke 
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. 
            This object is passed to the <paramref name="requestCallback" /> delegate 
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamLink.BeginReset(System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.IBootable.Reset" />.
            </summary>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke 
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. 
            This object is passed to the <paramref name="requestCallback" /> delegate 
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamLink.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)">
      <summary>
            Boots the Tria-Link(s) of this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <param name="bootMode">The boot mode.</param>
      <param name="skipResetAllFaults">If set to <see langword="true" />, skips calling
            <see cref="M:Triamec.Tam.TamLink.ResetAllFaults" /> at the end of the boot sequence.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">Booting failed.</exception>
    </member>
    <member name="E:Triamec.Tam.TamLink.Booted">
      <summary>
            Event raised at the end of the <see cref="M:Triamec.Tam.TamLink.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" />
            and the <see cref="M:Triamec.Tam.TamLink.Reset" /> procedure.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamLink.Booting">
      <summary>
            Event raised at the beginning of the <see cref="M:Triamec.Tam.TamLink.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" />
            and the <see cref="M:Triamec.Tam.TamLink.Reset" /> procedure.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.BootState">
      <summary>
            Gets a value indicating whether this instance is booting or whether it was successfully booted before.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.CanChangeEndpoint2">
      <summary>
            Gets a value indicating whether this instance can change its data-logging endpoint using
            <see cref="M:Triamec.Tam.TamLink.DetachIsochronousChannel(System.Boolean)" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.ChecksumErrorCount">
      <summary>
            Gets the number of cyclic redundancy check transmission errors.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamLink.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.TamLink.CurrentTime">
      <summary>
            Gets the current time, represented as a relative value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamLink.DetachIsochronousChannel(System.Boolean)">
      <summary>
            Detaches the isochronous channel.
            </summary>
      <param name="autoAttach">Whether to automatically attach the port again if detected.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:Triamec.Tam.TamLink.CanChangeEndpoint2" /> is <see langword="false" />.
            </exception>
      <exception cref="T:System.IO.IOException">An error occurred during an I/O operation.</exception>
      <exception cref="T:System.InvalidOperationException">This method was already called.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="autoAttach" /> is <see langword="true" /> on another platform than windows.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamLink.EmergencyStop">
      <summary>
            Emergently stops all <see cref="T:Triamec.Tam.ITamDevice" />s within this link.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
    </member>
    <member name="M:Triamec.Tam.TamLink.EmergencySwitchOff">
      <summary>
            Unconditionally switches all power sections within this link off immediately.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
    </member>
    <member name="M:Triamec.Tam.TamLink.EndBoot(System.IAsyncResult)">
      <summary>
            Ends an asynchronous call of <see cref="M:Triamec.Tam.IBootable.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)" />.
            </summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> instance returned 
            by a call to the <see cref="M:Triamec.Tam.IBootable.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)" /> method.</param>
      <exception cref="T:System.InvalidOperationException">The method can only be called once for each 
            <see cref="T:System.IAsyncResult" /> instance.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">Booting failed.</exception>
    </member>
    <member name="M:Triamec.Tam.TamLink.EndReset(System.IAsyncResult)">
      <summary>
            Ends an asynchronous call of <see cref="M:Triamec.Tam.IBootable.BeginReset(System.AsyncCallback,System.Object)" />.
            </summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> instance returned 
            by a call to the <see cref="M:Triamec.Tam.IBootable.BeginReset(System.AsyncCallback,System.Object)" /> method.</param>
      <exception cref="T:System.InvalidOperationException">The method can only be called once for each 
            <see cref="T:System.IAsyncResult" /> instance.</exception>
    </member>
    <member name="M:Triamec.Tam.TamLink.GetMasterStatistics(Triamec.TriaLink.StatisticSelector,System.Boolean,Triamec.TriaLink.Groups.SubBus)">
      <summary>
            Gets the internal statistics counters.
            </summary>
      <param name="selector">The selector.</param>
      <param name="resetCounters">if set to <see langword="true" />, the counters are reset after returning the
            current values.</param>
      <returns>
            A set of 10 counters, where the meaning depends on <paramref name="selector" /> and the
            kind of device.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred or the device does not support the
            command.</exception>
    </member>
    <member name="P:Triamec.Tam.TamLink.HasEndpoint2">
      <summary>
            Gets a value indicating whether this link has an endpoint <see cref="F:Triamec.TriaLink.TriaLinkEndpointType.Two" /> used
            for data-logging.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamLink.Identify">
      <summary>
            Identifies the <see cref="T:Triamec.Tam.TamStation" />s in the Tria-Link(s) represented by this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">
            The identification failed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamLink.Initialize">
      <summary>
            Initializes the Tria-Link(s) represented by this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">
            The initialization failed.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamLink.IsChangingEndpoint2">
      <summary>
            Gets a value indicating whether this instance is currently changing the data-logging endpoint.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.IsClosed">
      <summary>
            Gets a value indicating whether the link is functional.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.IsochronousBasePeriod">
      <summary>
            Gets the smallest period of sending isochronous packets,
            in units of Tria-Link <see cref="P:Triamec.TriaLink.TriaLinkProtocol.TickTime" /> increments.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.IsSynchronized">
      <summary>
            Gets a value indicating whether all <see cref="P:Triamec.Tam.TamLink.Stations" /> share a common time.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.MaxRoundtrip">
      <summary>
            Gets the maximal duration for opened communication sessions, before a timeout occurs.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.ReceiveOverflowCount">
      <summary>
            Gets the number of times an incoming packet was ignored becase the receive buffer was full.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamLink.Reset">
      <summary>
            Resets the Tria-Link(s) of this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:Triamec.Tam.BootException">
            The reset failed.
            </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
    </member>
    <member name="M:Triamec.Tam.TamLink.ResetAllFaults">
      <summary>
            Acknowledges all <see cref="F:Triamec.TriaLink.DeviceState.FaultPending" /><see cref="T:Triamec.Tam.ITamDevice" />s within this
            <see cref="T:Triamec.Tam.TamLink" />.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">
        <para>Not all <see cref="T:Triamec.Tam.ITamDevice" />s were <see cref="F:Triamec.TriaLink.DeviceState.ReadyToSwitchOn" />.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
        <para>The <c>Source</c> property contains the <see cref="P:Triamec.Tam.ITamNode.Address" /> of this
              <see cref="T:Triamec.Tam.TamLink" />. The <see cref="P:System.Exception.InnerException" /> is an <see cref="T:System.AggregateException" />
            where the <c>Source</c> property of each of the
              <see cref="P:System.AggregateException.InnerExceptions" /> is set to the <see cref="P:Triamec.Tam.ITamNode.Address" /> of the
            failing <see cref="T:Triamec.Tam.ITamDevice" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.TamLink.ResetAllFaults(System.Int32)">
      <summary>Use <see cref="M:Triamec.Tam.TamLink.ResetAllFaults" />.</summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.StationAddress">
      <summary>
            Gets the unique address of the adapter station within this instance.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.Stations">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamStation" />s managed by this <see cref="T:Triamec.Tam.TamLink" />, sorted by their
            <see cref="P:Triamec.Tam.ITamNode.Name" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamLink.SubscriptionManager">
      <summary>
            Gets the subscription manager.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamLink.SynchronizedWith(Triamec.Tam.TamLink)">
      <summary>
            Indicates whether this <see cref="T:Triamec.Tam.TamLink" /> runs synchronized with another specified
            <see cref="T:Triamec.Tam.TamLink" />.
            </summary>
      <param name="other">The other <see cref="T:Triamec.Tam.TamLink" />.</param>
    </member>
    <member name="P:Triamec.Tam.TamLink.TickPeriod">
      <summary>
            Gets the time unit of the link <see cref="T:Triamec.TriaLink.Timestamp" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamNodeComposite`2">
      <summary>A base implementation of <see cref="T:Triamec.Tam.ITamNodeComposite`2" />.</summary>
      <typeparam name="TParent">The type of the <see cref="P:Triamec.Tam.TamNodeComposite`2.ParentNode" /><see cref="T:Triamec.Tam.ITamNodeComposite" />.</typeparam>
      <typeparam name="TChild">The type of the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.</typeparam>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.AddChild(`1)">
      <summary>
            Adds a child to the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.
            </summary>
      <param name="child">The child to add.</param>
      <param name="renameDuplicates">Whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> of <paramref name="child" /> may
            be renamed if there are other ones with the same name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="child" /> does not have a <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>A child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" /> with the same <see cref="P:Triamec.Tam.ITamNode.Name" />
            of the <paramref name="child" /> to insert exists already.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">Adding the child was canceled by a client listening to the
              <see cref="E:Triamec.Tam.TamNodeComposite`2.NodesChanging" /> event.</exception>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.AddChild(`1,System.Boolean)">
      <summary>
            Adds a child to the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.
            </summary>
      <param name="child">The child to add.</param>
      <param name="renameDuplicates">Whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> of <paramref name="child" /> may
            be renamed if there are other ones with the same name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="child" /> does not have a <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>A child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" /> with the same <see cref="P:Triamec.Tam.ITamNode.Name" />
            of the <paramref name="child" /> to insert exists already.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">Adding the child was canceled by a client listening to the
              <see cref="E:Triamec.Tam.TamNodeComposite`2.NodesChanging" /> event.</exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Address">
      <summary>
            Gets the address of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.BrowsableState">
      <summary>
            Gets the browsable state of the <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.ClearChildren">
      <summary>
            Clears the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Clearing of child nodes was canceled
            by a client listening to the <see cref="E:Triamec.Tam.TamNodeComposite`2.NodesChanging" /> event.</exception>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.CustomImage">
      <summary>
            Gets the custom <see cref="T:System.Drawing.Image" />
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.DisplayName">
      <summary>Gets the display name of this node.</summary>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.FindTamNode(System.Uri)">
      <summary>
            Searches for an existing node within all descendant nodes
            of this node, or the root node of this node.
            </summary>
      <param name="address">An absolute or relative address.</param>
      <returns>
            The node with the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> cannot be mapped to a valid node.</exception>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.IndexOfChild(`1)">
      <summary>
            Searches for the specified child node and returns
            the zero-based index of the first occurrence within the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.
            </summary>
      <param name="child">The child to locate in the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.</param>
      <returns>
            The zero-based index of the first occurrence of <paramref name="child" />
            within the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />, if found; otherwise, –1.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.InsertChild(System.Int32,System.Boolean,`1)">
      <summary>Inserts a child node at the specified index.</summary>
      <param name="index">The zero-based index at which the <paramref name="childToInsert" /> should be
            inserted.</param>
      <param name="renameDuplicates">Whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> of <paramref name="childToInsert" />
            may be renamed if there are other ones with the same name.</param>
      <param name="childToInsert">The child nodes to insert.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="childToInsert" /> does not have a <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>The <see cref="P:Triamec.Tam.ITamNode.Name" />s of the existing child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />
            and the <paramref name="childToInsert" /> are not unique.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">Inserting nodes was canceled by a client listening to the
            <see cref="E:Triamec.Tam.TamNodeComposite`2.NodesChanging" /> event.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childToInsert" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is greater than <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.<see cref="P:System.Collections.ICollection.Count" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.InsertChildren(System.Int32,`1[])">
      <summary>Inserts child nodes at the specified index.</summary>
      <param name="index">The zero-based index at which the <paramref name="childrenToInsert" /> should be
            inserted.</param>
      <param name="childrenToInsert">The child nodes to insert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childrenToInsert" /> is
            <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>An element of <paramref name="childrenToInsert" /> is
            <see langword="null" />.</para>
        <para>An element of <paramref name="childrenToInsert" /> does not have a
            <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>The <see cref="P:Triamec.Tam.ITamNode.Name" />s of the existing child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />
            and the <paramref name="childrenToInsert" /> are not unique.</para>
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is greater than
            <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.<see cref="P:System.Collections.ICollection.Count" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">Inserting nodes was canceled by a client listening to the
            <see cref="E:Triamec.Tam.TamNodeComposite`2.NodesChanging" /> event.</exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Item(System.Int32)">
      <summary>
            Gets a strongly typed child TAM node at a specified index.
            </summary>
      <param name="index">The index of the child TAM node.</param>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>- or -</para>
        <para>
          <paramref name="index" /> is equal to or greater than
            <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" />.<see cref="P:System.Collections.ICollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Item(System.String)">
      <summary>
            Gets a strongly typed child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not the <see cref="P:Triamec.Tam.ITamNode.Name" />
            of any of the child <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" />.</exception>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.Load(System.String)">
      <summary>
            Loads different settings from a configuration file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">An exception occurred during deserialization
            or configuration application.
              </exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>
          <see cref="P:Triamec.Tam.ITamNode.CanEditName" /> == <see langword="false" /></c>.
              </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="E:Triamec.Tam.TamNodeComposite`2.NameChanged">
      <summary>
            Event raised whenever the <see cref="P:Triamec.Tam.TamNodeComposite`2.Name" /> property has changed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Nodes">
      <summary>
            Gets the child nodes of this TAM node composite.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamNodeComposite`2.NodesChanged">
      <summary>
            Event raised after the list of child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" /> has changed.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamNodeComposite`2.NodesChanging">
      <summary>
            Event raised before child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" /> are removed and/or added.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.OnNameChanged(System.EventArgs)">
      <summary>Raises the <see cref="E:Triamec.Tam.TamNodeComposite`2.NameChanged" /> event.</summary>
      <param name="args">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.RemoveChildAt(System.Int32)">
      <summary>
            Removes the child node at the specified index of the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.
            </summary>
      <param name="childIndex">The zero-based index of the child node to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="childIndex" /> is less than 0.</para>
        <para>- or -</para>
        <para>
          <paramref name="childIndex" /> is equal to or greater than
            <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.<see cref="P:System.Collections.ICollection.Count" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">Removing the child node at the specified <paramref name="childIndex" /> was
            canceled by a client listening to the <see cref="E:Triamec.Tam.TamNodeComposite`2.NodesChanging" /> event.</exception>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.RemoveChildren(`1[])">
      <summary>
            Removes the specified child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.
            </summary>
      <param name="childrenToRemove">The children to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childrenToRemove" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
            Some elements of <paramref name="childrenToRemove" /> do not belong to the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.
            </exception>
      <exception cref="T:Triamec.Tam.TamException">Removing the specified child nodes was canceled
            by a client listening to the <see cref="E:Triamec.Tam.TamNodeComposite`2.NodesChanging" /> event.</exception>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.Save(System.String)">
      <summary>
            Saves relevant settings as XML configuration to a file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
            Serialization to the file specified by <paramref name="path" /> failed.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.ShortDescriptionOrName">
      <summary>
            Convenience method to get a description of this <see cref="T:Triamec.Tam.ITamNode" />
            without any <see cref="T:Triamec.Tam.TamException" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Tag">
      <summary>
            Gets or sets a client object related to this node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Triamec#Tam#ITamNode#ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Triamec#Tam#ITamNodeComposite#Item(System.Int32)">
      <summary>
            Gets a child TAM node at a specified index.
            </summary>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>- or -</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.<see cref="P:System.Collections.ICollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Triamec#Tam#ITamNodeComposite#Item(System.String)">
      <summary>
            Gets a child TAM node with a specified name.
            </summary>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not the <see cref="P:Triamec.Tam.ITamNode.Name" />
            of any of the child <see cref="P:Triamec.Tam.TamNodeComposite`2.Nodes" />.</exception>
    </member>
    <member name="P:Triamec.Tam.TamNodeComposite`2.Triamec#Tam#ITamNodeComposite#Nodes">
      <summary>
            Gets the child nodes of this TAM node composite.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.Triamec#Tam#ITamNodeComposite#TryGetNode(System.String,Triamec.Tam.ITamNode@)">
      <summary>
            Attempts to retrieve a child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <param name="node">A child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" /> with the specified name,
            or <see langword="null" /> if no such child exists.</param>
      <returns>Whether a node with the specified name was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.TamNodeComposite`2.TryGetNode(System.String,`1@)">
      <summary>
            Attempts to retrieve a strongly typed child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <param name="node">A child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" /> with the specified name,
            or <see langword="null" /> if no such child exists.</param>
      <returns>Whether a node with the specified name was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:Triamec.Tam.TamNodeExtensions">
      <summary>
            Extensions for nodes.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamNodeExtensions.FindNode(Triamec.Tam.ITamNodeComposite,System.Uri)">
      <summary>
            Gets the node with the specified address relative to a root node.
            </summary>
      <param name="root">The root node.</param>
      <param name="relativeAddress">The address relative to <paramref name="root" />.</param>
      <returns>The node or <see langword="null" /> if no such node exists.</returns>
      <exception cref="T:System.ArgumentNullException">Any argument is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeAddress" /> isn't relative.</exception>
    </member>
    <member name="T:Triamec.Tam.TamNodeImage">
      <summary>
            Enumeration of predefined images
            to use for <see cref="T:Triamec.Tam.ITamNode" />s.
            </summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.None">
      <summary>No predefied image.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamTopology">
      <summary>Image of the root node in a TAM topology.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamSystem">
      <summary>Image of a <see cref="T:Triamec.Tam.TamSystem" />.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamAdapter">
      <summary>Image of a PCI <see cref="T:Triamec.Tam.TamAdapter" /> .</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamUsbAdapter">
      <summary>Image of a <see cref="T:Triamec.Tam.TamAdapter" /> via USB.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamLink">
      <summary>Image of a <see cref="T:Triamec.Tam.TamLink" />.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamStation">
      <summary>Image of a <see cref="T:Triamec.Tam.TamStation" />.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamDevice">
      <summary>Image of an <see cref="T:Triamec.Tam.ITamDevice" />.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamDrive">
      <summary>Image of an <see cref="T:Triamec.Tam.ITamDrive" />.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamDoubleDrive">
      <summary>Image of an <see cref="T:Triamec.Tam.ITamDrive" /> with two axes.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamMonitorDevice">
      <summary>Image of a secondary device.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.RegisterComposite">
      <summary>Image of a non-array derivate of a <see cref="F:Triamec.Tam.TamNodeImage.RegisterComposite" />.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.RegisterComponentArray">
      <summary>Image of an array derivate of a <see cref="T:Triamec.Tam.Registers.RegisterComponent" />.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamRegister">
      <summary>Image of an <see cref="T:Triamec.Tam.Registers.ITamReadonlyRegister" />, 
            <see cref="T:Triamec.Tam.Registers.ITamRegister" />, or derivate.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamArray">
      <summary>Image of a <see cref="T:Triamec.Tam.Registers.TamReadonlyArray`1" />, <see cref="T:Triamec.Tam.Registers.TamArray`1" />, or
            derivate.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.Tama">
      <summary>Image of a Tama file.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamaFile">
      <summary>Image of a Tama file.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamModule">
      <summary>Image of a TAM module.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.ModuleComponent">
      <summary>Image of a TAM module component.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamLinkObserver">
      <summary>Image of a <see cref="F:Triamec.Tam.TamNodeImage.TamLink" /> or derivate in observer role.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.RotaryEncoder">
      <summary>Image of a rotary encoder.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.InputOutput">
      <summary>Image of an I/O component.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamNetworkAdapter">
      <summary>Image of a <see cref="T:Triamec.Tam.TamAdapter" /> via Ethernet.</summary>
    </member>
    <member name="F:Triamec.Tam.TamNodeImage.TamSerialAdapter">
      <summary>Image of a <see cref="T:Triamec.Tam.TamAdapter" /> via a true serial port.</summary>
    </member>
    <member name="T:Triamec.Tam.TamOptionModuleDevice">
      <summary>
            Secondary device which is installed in an option slot.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamOptionModuleDevice.OptionModuleInfo">
      <summary>
            Gets basic information about this option module.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamPeripheralDevice">
      <summary>
            Option module which is controlled by an alternative peripheral bus.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamPeripheralDevice.ActiveFirmware">
      <exception cref="T:Triamec.Tam.TamException">The location could not be read out.</exception>
    </member>
    <member name="P:Triamec.Tam.TamPeripheralDevice.BrowsableState">
      <summary>
            Gets the browsable state of the <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamPeripheralDevice.Periphery">
      <summary>
            Gets the root of the periphery register tree of this <see cref="T:Triamec.Tam.Periphery.IPeripheryLayoutOwner" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamPeripheralDevice.PeripheryLayoutId">
      <summary>
            Gets the periphery register layout identifier.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamPeripheralDevice.SerialNumber">
      <summary>
            Gets the unique identifier of this option module.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamPeripheralDevice.Triamec#Tam#Periphery#IPeripheryLayoutOwner#Link">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamLink" /> associated to this <see cref="T:Triamec.Tam.Periphery.IPeripheryLayoutOwner" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamSecondaryDevice">
      <summary>
            Peripheral device with its own firmware, accessed through a peripheral <see cref="P:Triamec.Tam.TamSecondaryDevice.Device" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSecondaryDevice.#ctor(System.String,System.String,Triamec.Tam.Periphery.IUpdatablePeripheryDevice)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TamSecondaryDevice" /> class.
            </summary>
      <param name="name">The name of the device.</param>
      <param name="category">The category of the device or the empty string.</param>
      <param name="device">The peripheral device.</param>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.ActiveFirmware">
      <exception cref="T:Triamec.Tam.TamException">The location could not be read out.</exception>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Address">
      <summary>
            Gets the address of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.BrowsableState">
      <summary>
            Gets the browsable state of the <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSecondaryDevice.CreateFirmwareDownloader">
      <summary>
            Creates an instance to use for <see cref="P:Triamec.Tam.TamSecondaryDevice.FirmwareDownloader" />.
            </summary>
      <returns>The instance or <see langword="null" /> in case it's not possible to download firmware.</returns>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Device">
      <summary>
            Gets the peripheral device used for communication with the secondary device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSecondaryDevice.Dispose">
      <summary>Releases unmanaged and - optionally - managed resources.</summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.FirmwareDownloader">
      <summary>
            Provides a means to update the firmware of this <see cref="T:Triamec.Firmware.IFlashArea" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.FirmwareInfo">
      <summary>
            Gets the firmware identification.
            </summary>
      <exception cref="T:System.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>
          <see cref="P:Triamec.Tam.ITamNode.CanEditName" /> == <see langword="false" /></c>.
              </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />,
            or <see cref="F:Triamec.Tam.TamNodeImage.None" /> when to use <see cref="P:Triamec.Tam.ITamNode.CustomImage" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Firmware#IFlashArea#FlashName">
      <summary>
            Gets the name of this flash area.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Firmware#IFlashArea#MajorRevision">
      <summary>
            Gets the encoded major revision of the product this flash represents.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSecondaryDevice.Triamec#Firmware#IFlashArea#Ping">
      <summary>
            Tests whether the area is accessible.
            </summary>
      <returns>
        <see langword="true" /> iff communication succeeded.</returns>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Firmware#IFlashArea#Position">
      <summary>
            Gets the position in the product naming scheme this flash area addresses.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#CustomImage">
      <summary>
            Gets the custom <see cref="T:System.Drawing.Image" />
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#DisplayName">
      <summary>Gets the display name of this node.</summary>
    </member>
    <member name="M:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#FindTamNode(System.Uri)">
      <summary>
            Searches for an existing node within all descendant nodes
            of this node, or the root node of this node.
            </summary>
      <param name="address">An absolute or relative address.</param>
      <returns>
            The node with the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> cannot be mapped to a valid node.</exception>
    </member>
    <member name="M:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#Load(System.String)">
      <summary>
            Loads different settings from a configuration file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">An exception occurred during deserialization
            or configuration application.
              </exception>
    </member>
    <member name="E:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#NameChanged">
      <summary>
            Event raised whenever the <see cref="P:Triamec.Tam.ITamNode.Name" /> property has changed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#Save(System.String)">
      <summary>
            Saves relevant settings as XML configuration to a file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
            Serialization to the file specified by <paramref name="path" /> failed.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#ShortDescriptionOrName">
      <summary>
            Convenience method to get a description of this <see cref="T:Triamec.Tam.ITamNode" />
            without any <see cref="T:Triamec.Tam.TamException" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSecondaryDevice.Triamec#Tam#ITamNode#Tag">
      <summary>
            Gets or sets a client object related to this node.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamStation">
      <summary>
            Addressable party within the <see cref="T:Triamec.Tam.TamLink" /> typically wrapping one <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.ChecksumErrorCount">
      <summary>
            Gets the number of cyclic redundancy check transmission errors.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamStation.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.Device">
      <summary>
            Gets the <see cref="T:Triamec.Tam.ITamDevice" /> contained by this <see cref="T:Triamec.Tam.TamStation" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.DisplayName">
      <summary>Gets the display name of this node.</summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.FirmwareId">
      <summary>
            Gets the firmware currently running on the FPGA, or <c>0</c> when no FPGA is present.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.FirmwareInfo">
      <summary>
            Gets the firmware identification.
            </summary>
      <exception cref="T:System.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.HardwareId">
      <summary>
            Gets the station's hardware identification.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">The hardware identification could not be read out.</exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.HardwareIdDetails">
      <summary>
            Gets the hardware identification details of the hardware device.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.HardwareSerialNumber">
      <summary>
            Gets the raw serial number.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">The ID could not be read out.</exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.HardwareSite">
      <summary>
            Gets information about where this <see cref="T:Triamec.Tam.TamStation" /> is located within the bus.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.HasController">
      <summary>
            Indicates if the hardware accessed by this <see cref="T:Triamec.Tam.TamStation" /> has a CPU.
            </summary>
    </member>
    <member name="F:Triamec.Tam.TamStation.InvalidSerialNumber">
      <summary>
            The invalid serial number for <see cref="T:Triamec.Tam.TamStation" />s.
            The value is <c>default(<see cref="T:Triamec.TriaLink.UniqueDeviceId" />)</c>.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.Link">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamLink" /> where this <see cref="T:Triamec.Tam.TamStation" /> belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>
          <see cref="P:Triamec.Tam.ITamNode.CanEditName" /> == <see langword="false" /></c>.
              </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.Periphery">
      <summary>
            Gets the root of the periphery register tree of this <see cref="T:Triamec.Tam.Periphery.IPeripheryLayoutOwner" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.PeripheryLayoutId">
      <summary>
            Gets the periphery register layout identifier.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.TamStation.Ping">
      <summary>
            Tests whether the area is accessible.
            </summary>
      <returns>
        <see langword="true" /> iff communication succeeded.</returns>
    </member>
    <member name="P:Triamec.Tam.TamStation.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.ProductInfo">
      <summary>
            Gets information about the product.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.ReceiveOverflowCount">
      <summary>
            Gets the number of times an incoming packet was ignored becase the receive buffer was full.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.SerialNumber">
      <summary>
            Gets the serial number of the product.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.TamStation.StationAddress">
      <summary>
            Gets the unique address of this <see cref="T:Triamec.Tam.TamStation" /> within the <see cref="P:Triamec.Tam.TamStation.Link" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.TamStation.StationHostName">
      <summary>
            The host name used for machine related addressing.
            <para>The value is <c>"mc"</c>.</para></summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.Triamec#Firmware#IFlashArea#FirmwareDownloader"></member>
    <member name="P:Triamec.Tam.TamStation.Triamec#Firmware#IFlashArea#FlashName">
      <summary>
            Gets the name of this flash area.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.Triamec#Firmware#IFlashArea#MajorRevision">
      <summary>
            Gets the encoded major revision of the product this flash represents.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.Triamec#Firmware#IFlashArea#Position">
      <summary>
            Gets the position in the product naming scheme this flash area addresses.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamStation.Triamec#Tam#Firmware#IProduct#PackageDownloader">
      <summary>
            Provides a means to update the firmware of this <see cref="T:Triamec.Tam.Firmware.IProduct" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamSystem">
      <summary>
            Aggregation of all <see cref="T:Triamec.Tam.TamAdapter" />s found on a computer.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSystem.Adapters">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamAdapter" />s managed by this <see cref="T:Triamec.Tam.TamSystem" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSystem.AddPalBus(System.String,System.String)">
      <summary>
            Adds a PALbus adapter accessible through the specified serial ports.
            </summary>
      <param name="asynchronousSerialPortName">Name of the asynchronous serial port.</param>
      <param name="isochronousSerialPortName">Name of the isochronous serial port or
            <see langword="null" /> or <see cref="F:System.String.Empty" /> if isochronous communication is not intended.</param>
      <returns>The newly created PALbus adapter.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asynchronousSerialPortName" /> is
            <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Cannot create a PALbus adapter with the specified serial ports.</exception>
    </member>
    <member name="M:Triamec.Tam.TamSystem.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.IBootable.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" />.
            </summary>
      <param name="bootMode">The boot mode.</param>
      <param name="skipResetAllFaults">If set to <see langword="true" />, skips calling
            <see cref="M:Triamec.Tam.TamLink.ResetAllFaults" /> at the end of the boot sequence.</param>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke 
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. 
            This object is passed to the <paramref name="requestCallback" /> delegate 
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamSystem.BeginReset(System.AsyncCallback,System.Object)">
      <summary>
            Asynchronous call of <see cref="M:Triamec.Tam.IBootable.Reset" />.
            </summary>
      <param name="requestCallback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke 
            when the operation is complete.</param>
      <param name="state">A user-defined object that contains information about the operation. 
            This object is passed to the <paramref name="requestCallback" /> delegate 
            when the operation is complete.</param>
      <returns>
            An <see cref="T:System.IAsyncResult" /> instance that references the asynchronous request.
            </returns>
    </member>
    <member name="M:Triamec.Tam.TamSystem.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)">
      <summary>
            Boots all <see cref="T:Triamec.Tam.TamLink" />s on all <see cref="P:Triamec.Tam.TamSystem.Adapters" /> of this <see cref="T:Triamec.Tam.TamSystem" />.
            </summary>
      <param name="bootMode">The boot mode.</param>
      <param name="skipResetAllFaults">If set to <see langword="true" />, skips calling
            <see cref="M:Triamec.Tam.TamLink.ResetAllFaults" /> at the end of the boot sequence.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">Booting failed.</exception>
    </member>
    <member name="E:Triamec.Tam.TamSystem.Booted">
      <summary>
            Event raised at the end of the <see cref="M:Triamec.Tam.TamSystem.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" /> 
            and the <see cref="M:Triamec.Tam.TamSystem.Reset" /> procedure.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamSystem.Booting">
      <summary>
            Event raised at the beginning of the <see cref="M:Triamec.Tam.TamSystem.Boot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean)" />
            and the <see cref="M:Triamec.Tam.TamSystem.Reset" /> procedure.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamSystem.BootState">
      <summary>
            Gets a value indicating whether this instance is booting or whether it was successfully booted before.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSystem.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="M:Triamec.Tam.TamSystem.EndBoot(System.IAsyncResult)">
      <summary>
            Ends an asynchronous call of <see cref="M:Triamec.Tam.IBootable.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)" />.
            </summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> instance returned 
            by a call to the <see cref="M:Triamec.Tam.IBootable.BeginBoot(Triamec.TriaLink.TriaLinkBootMode,System.Boolean,System.AsyncCallback,System.Object)" /> method.</param>
      <exception cref="T:System.InvalidOperationException">The method can only be called once for each 
            <see cref="T:System.IAsyncResult" /> instance.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">Booting failed.</exception>
    </member>
    <member name="M:Triamec.Tam.TamSystem.EndReset(System.IAsyncResult)">
      <summary>
            Ends an asynchronous call of <see cref="M:Triamec.Tam.IBootable.BeginReset(System.AsyncCallback,System.Object)" />.
            </summary>
      <param name="result">An <see cref="T:System.IAsyncResult" /> instance returned 
            by a call to the <see cref="M:Triamec.Tam.IBootable.BeginReset(System.AsyncCallback,System.Object)" /> method.</param>
      <exception cref="T:System.InvalidOperationException">The method can only be called once for each 
            <see cref="T:System.IAsyncResult" /> instance.</exception>
    </member>
    <member name="M:Triamec.Tam.TamSystem.Identify">
      <summary>
            Identifies the <see cref="T:Triamec.Tam.TamStation" />s in the Tria-Link(s) represented by this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">
            The identification failed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.TamSystem.Initialize">
      <summary>
            Initializes the Tria-Link(s) represented by this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:Triamec.Tam.BootException">
            The initialization failed.
            </exception>
    </member>
    <member name="P:Triamec.Tam.TamSystem.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>
          <see cref="P:Triamec.Tam.ITamNode.CanEditName" /> == <see langword="false" /></c>.
              </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamSystem.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamSystem.Reset">
      <summary>
            Resets the Tria-Link(s) of this <see cref="T:Triamec.Tam.IBootable" />.
            </summary>
      <exception cref="T:Triamec.Tam.BootException">
            The reset failed.
            </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
    </member>
    <member name="P:Triamec.Tam.TamSystem.Topology">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamTopology" /> where this <see cref="T:Triamec.Tam.TamSystem" /> belongs to.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TamTopology">
      <summary>
            A container class for TAM systems.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamTopology.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TamTopology" /> class.
            </summary>
      <param name="name">The display name of the TAM topology.</param>
    </member>
    <member name="M:Triamec.Tam.TamTopology.AddLocalSystem(Triamec.TriaLink.Adapter.DataLinkLayers)">
      <summary>
            Adds the local TAM system to this topology.
            </summary>
      <param name="layersToAcquire">
            Lower layer implementations to use or <see cref="F:Triamec.TriaLink.Adapter.DataLinkLayers.Unspecified" /> to use the
            <c>Acquired adapters</c> setting.
            </param>
      <returns>
            The local <see cref="T:Triamec.Tam.TamSystem" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">
        <para>Failures occurred when finding or acquiring adapters. An instance is created nevertheless and may
            be accessed using the <see cref="P:Triamec.Tam.TamTopology.Systems" /> property.</para>
        <para>-or-</para>
        <para>The local node could not be added.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
            The local system has already been added to this <see cref="T:Triamec.Tam.TamTopology" />.
              </exception>
    </member>
    <member name="M:Triamec.Tam.TamTopology.AddLocalTamSystem(System.String,Triamec.TriaLink.Adapter.ITriaLinkAdapter[])">
      <summary>
            Adds the local or a simulated TAM system to this topology.
            </summary>
      <param name="name">The display name of the system or <see langword="null" /> in order to use the host
            name.</param>
      <param name="adapters">The Tria-Link adapters to use or <see langword="null" /> or an empty array.</param>
      <returns>
            The local <see cref="T:Triamec.Tam.TamSystem" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">
        <para>Failures occurred when finding or acquiring adapters. An instance is created nevertheless and may
            be accessed using the <see cref="P:Triamec.Tam.TamTopology.Systems" /> property.</para>
        <para>-or-</para>
        <para>The local node could not be added.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
            The local system has already been added to this <see cref="T:Triamec.Tam.TamTopology" />.
              </exception>
    </member>
    <member name="P:Triamec.Tam.TamTopology.Address">
      <summary>
            Gets the address of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamTopology.BrowseDevicesAsync">
      <summary>
            Opens a new page in your default web browser allowing to access all devices with a web interface.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Failed to create the server.</exception>
    </member>
    <member name="E:Triamec.Tam.TamTopology.Connected">
      <summary>
            Occurs when the process of connecting to a <see cref="T:Triamec.Tam.TamSystem" /> has finished.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamTopology.Connecting">
      <summary>
            Occurs when a connection to a <see cref="T:Triamec.Tam.TamSystem" /> is going to be established.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamTopology.ConnectTo(System.Uri,System.String,Triamec.TriaLink.Adapter.ITriaLinkAdapter[])">
      <summary>
            Adds a system to this topology.
            </summary>
      <param name="address">The absolute address where the system is located.</param>
      <param name="name">The display name of the system or <see langword="null" /> in order to use the host
            name.</param>
      <param name="adapters">The Tria-Link adapters to relate to the new system, or <see langword="null" /> or an
            empty array in order to use the internal factory for creating adapters.</param>
      <returns>
            The system.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">
        <para>Failures occurred when finding or acquiring adapters. An instance is created nevertheless and may
            be accessed using the <see cref="P:Triamec.Tam.TamTopology.Systems" /> property.</para>
        <para>-or-</para>
        <para>The node could not be added.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">A system with the specified address has already been added to
            this <see cref="T:Triamec.Tam.TamTopology" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> has <see cref="P:System.Uri.Host" /> equal to
              <see cref="F:Triamec.Tam.TamStation.StationHostName" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="address" /> is not absolute.</para>
        <para>
          <paramref name="address" />The scheme is not <c>"tam://"</c>.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.TamTopology.ConnectTo(System.Uri,Triamec.TriaLink.Adapter.ITriaLinkAdapter[])">
      <summary>
            Adds a system to this topology.
            </summary>
      <param name="address">The absolute address where the system is located.</param>
      <param name="name">The display name of the system or <see langword="null" /> in order to use the host
            name.</param>
      <param name="adapters">The Tria-Link adapters to relate to the new system, or <see langword="null" /> or an
            empty array in order to use the internal factory for creating adapters.</param>
      <returns>
            The system.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">
        <para>Failures occurred when finding or acquiring adapters. An instance is created nevertheless and may
            be accessed using the <see cref="P:Triamec.Tam.TamTopology.Systems" /> property.</para>
        <para>-or-</para>
        <para>The node could not be added.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">A system with the specified address has already been added to
            this <see cref="T:Triamec.Tam.TamTopology" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> has <see cref="P:System.Uri.Host" /> equal to
              <see cref="F:Triamec.Tam.TamStation.StationHostName" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="address" /> is not absolute.</para>
        <para>
          <paramref name="address" />The scheme is not <c>"tam://"</c>.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.TamTopology.ConnectToRemoteSystems">
      <summary>
            Connects to remote systems.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamTopology.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.TamTopology.DisableMachineRelatedAddressing">
      <summary>
            Gets or sets a value indicating whether to disable node addresses to be machine related.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamTopology.Disconnect(System.Uri)">
      <summary>
            Removes the <see cref="T:Triamec.Tam.TamSystem" /> with the specified address.
            </summary>
      <param name="address">The <see cref="P:Triamec.Tam.ITamNode.Address" /> of the <see cref="T:Triamec.Tam.TamSystem" /> to
            disconnect.</param>
      <exception cref="T:System.InvalidOperationException">No system found with the specified address.</exception>
      <exception cref="T:Triamec.Tam.TamException">Removal was canceled by a client listening to the
            <see cref="E:Triamec.Tam.ITamNodeComposite.NodesChanging" /> event.</exception>
    </member>
    <member name="M:Triamec.Tam.TamTopology.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:Triamec.Tam.TamTopology.EnableSoftwareObserver">
      <summary>
            Whether <see cref="T:Triamec.Tam.TamAdapter" /> instances created in the future will provide one connection to other
            applications, and other <see cref="T:Triamec.Tam.TamSystem" /> instances created in the future will attempt a connection
            to Tria-Link adapters by means of existing applications if they fail to directly connect to hardware.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TamTopology.EnableWebServerAsync">
      <summary>
            Starts the server sub-system (if not already started) which allows to access all devices with a web
            interface.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Failed to create the server.</exception>
    </member>
    <member name="F:Triamec.Tam.TamTopology.InvalidNameChars">
      <summary>
            The characters any <see cref="P:Triamec.Tam.ITamNode.Name" /> must not contain.
            <para>The list of characters is <c>/#?,;</c>.</para></summary>
    </member>
    <member name="M:Triamec.Tam.TamTopology.Kill">
      <summary>
            To be called before <see cref="M:System.Environment.Exit(System.Int32)" /> in order to circumvent a hung process due to open I/O requests.
            </summary>
    </member>
    <member name="E:Triamec.Tam.TamTopology.LastTopologyDisposed">
      <summary>
            Occurs whenever the last <see cref="T:Triamec.Tam.TamTopology" /> instance gets disposed.
            </summary>
    </member>
    <member name="F:Triamec.Tam.TamTopology.Localhost">
      <summary>
            The address of the local <see cref="T:Triamec.Tam.TamSystem" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamTopology.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>
          <see cref="P:Triamec.Tam.ITamNode.CanEditName" /> == <see langword="false" /></c>.
              </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.TamTopology.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TamTopology.Systems">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamSystem" />s managed by this <see cref="T:Triamec.Tam.TamTopology" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.TamTopology.UriScheme">
      <summary>
            Gets the URI scheme for addressing into a <see cref="T:Triamec.Tam.TamTopology" />.
            <para>The value is <c>"tam"</c>.</para></summary>
    </member>
    <member name="M:Triamec.Tam.TamTopology.WaitForSoftwareObserverDisconnectAsync">
      <summary>
            Waits until the software observer has disconnected.
            </summary>
    </member>
    <member name="T:Triamec.Tam.TimeoutException">
      <summary>
            The TAM exception that is returned when no response is received for a request after a specified time.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TimeoutException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TimeoutException" /> class.
            </summary>
      <param name="message">A message that describes the command for which no response was received.</param>
      <param name="inner">The exception that is the cause of the current exception.  If not
            <see langword="null" />, the current exception is raised in a catch block that handles the inner
            exception.</param>
    </member>
    <member name="M:Triamec.Tam.TimeoutException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TimeoutException" /> class.
            </summary>
      <param name="message">A message that describes the command for which no response was received.</param>
      <param name="inner">The exception that is the cause of the current exception.  If not
            <see langword="null" />, the current exception is raised in a catch block that handles the inner
            exception.</param>
    </member>
    <member name="M:Triamec.Tam.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TimeoutException" /> class.
            </summary>
      <param name="message">A message that describes the command for which no response was received.</param>
      <param name="inner">The exception that is the cause of the current exception.  If not
            <see langword="null" />, the current exception is raised in a catch block that handles the inner
            exception.</param>
    </member>
    <member name="M:Triamec.Tam.TimeoutException.#ctor(System.String,Triamec.TriaLink.Sessions.ISession,Triamec.TriaLink.Groups.IAddressee)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.TimeoutException" /> class, passing information about a session.
            </summary>
      <param name="message">A message that describes the command for which no response was received.</param>
      <param name="session">The session which timed out.</param>
      <param name="addressee">The addressee whose response was missing.</param>
    </member>
    <member name="M:Triamec.Tam.TimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the
            exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that Contains contextual information about the
            source or destination.</param>
    </member>
    <member name="T:Triamec.Tam.TorqueLimiter">
      <summary>
            Limits moves to a specified current limit.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TorqueLimiter.IsSupported">
      <summary>
            Indicates whether the <see cref="T:Triamec.Tam.TorqueLimiter" /> is supported on the <see cref="T:Triamec.Tam.TamAxis" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.TorqueLimiter.Mode">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TorqueLimitMode" /> set by <see cref="M:Triamec.Tam.TorqueLimiter.SetMode(Triamec.Tam.TorqueLimitMode)" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.TorqueLimiter.SetLimit(System.Single)">
      <summary>
            Sets the limit for the supplied current.
            </summary>
      <param name="current">The limit in Amperes.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.AxisCommandRejectedException">
        <para>The command was not correct according to the axis' state.</para>
        <para>-or-</para>
        <para>The axis is no longer valid because the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> of the
            <see cref="P:Triamec.Tam.TamAxis.Drive" /> changed.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The command is not supported by the <see cref="T:Triamec.Tam.ITamDevice" />.
            	<note type="note">With firmware released before June 2013, no exception will be thrown, but the command
            will be ignored silently.</note></exception>
      <exception cref="T:System.ObjectDisposedException">The object has been disposed.
            <note type="note">
            This happens every time <see cref="M:Triamec.Tam.ITamDevice.SetMotorBaseConfiguration(Triamec.TriaLink.MotorBaseConfiguration)" /> is called.</note></exception>
    </member>
    <member name="M:Triamec.Tam.TorqueLimiter.SetMode(Triamec.Tam.TorqueLimitMode)">
      <summary>
            Sets the <see cref="P:Triamec.Tam.TorqueLimiter.Mode" /> to use for future moves.
            </summary>
      <param name="mode">The mode to use.</param>
    </member>
    <member name="T:Triamec.Tam.TorqueLimitMode">
      <summary>
            Mode used by the <see cref="T:Triamec.Tam.TorqueLimiter" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.TorqueLimitMode.Off">
      <summary>
            The <see cref="T:Triamec.Tam.TorqueLimiter" /> is not active.
            </summary>
    </member>
    <member name="F:Triamec.Tam.TorqueLimitMode.MoveLimited">
      <summary>
            Future moves will be torque limited.
            </summary>
    </member>
    <member name="T:Triamec.Tam.UnknownLayoutEventArgs">
      <summary>
            The argument of a <see cref="E:Triamec.Tam.LayoutManager.UnknownLayout" /><see langword="event" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.UnknownLayoutEventArgs.Id">
      <summary>
            Gets the identifier of the layout.
            </summary>
    </member>
    <member name="P:Triamec.Tam.UnknownLayoutEventArgs.LayoutType">
      <summary>
            Gets the type of the layout.
            </summary>
    </member>
    <member name="T:Triamec.Tam.UnknownLayoutEventHandler">
      <summary>
            Prototype for an event listener method of the <see cref="E:Triamec.Tam.LayoutManager.UnknownLayout" /><see langword="event" />.
            </summary>
      <param name="sender">
            The <see cref="T:Triamec.Tam.LayoutManager" /> raising the <see cref="E:Triamec.Tam.LayoutManager.UnknownLayout" /><see langword="event" />.
            </param>
      <param name="args">
            The <see langword="event" /> arguments.
            </param>
      <returns>
        <para>The name of the assembly where the layout specified by <see cref="P:Triamec.Tam.UnknownLayoutEventArgs.LayoutType" />
            and <see cref="P:Triamec.Tam.UnknownLayoutEventArgs.Id" /> is located or <see langword="null" /> if not found.</para>
        <para>The value must be suitable for <see cref="M:System.Reflection.Assembly.Load(System.String)" />.</para>
        <para>When <see cref="T:Triamec.Tam.LayoutType" /> is <see cref="F:Triamec.Tam.LayoutType.Register" />, the value must be
            	<code>LayoutManager.REGISTER_LAYOUT_NAME + '.' + Id</code> per
            	convention.</para>
      </returns>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.DumpFile">
      <summary>
            Represents a binary file produced by a device from isochronous data.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Acquisitions.DumpFile.Extension">
      <summary>
            Gets the default file extension, including the period.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.DumpFile.IsSupported(System.IO.Stream)">
      <summary>
            Gets a value indicating whether the specified <see cref="T:System.IO.Stream" /> represents a dump file supported by this
            implementation.
            </summary>
      <exception cref="T:System.IO.IOException">
        <paramref name="stream" />
        <see cref="P:System.IO.Stream.CanSeek">can seek</see> and resetting the
            <see cref="P:System.IO.Stream.Position" /> failed.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.DumpFile.IsSupported(System.String)">
      <summary>
            Gets a value indicating whether the specified file system path represents a dump file supported by this
            implementation.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.DumpFile.Read(System.IO.Stream)">
      <summary>
            Reads the dump from the specified <see cref="T:System.IO.Stream" />.
            </summary>
      <returns>A 4-byte signed integer read from the current stream.</returns>
      <exception cref="T:System.NotSupportedException">Unsupported format.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.DumpFile.Read(System.String)">
      <summary>
            Reads the dump from the specified file system path.
            </summary>
      <returns>A 4-byte signed integer read from the current stream.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Unsupported format.</exception>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached. </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpFile.Rows">
      <summary>
            The samples.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpFile.SamplingTime">
      <summary>
            Gets the time resolution.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpFile.Signals">
      <summary>
            Gets information about the captured registers.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpFile.StartTime">
      <summary>
            Gets the time corresponding to the first instance in <see cref="P:Triamec.Tam.Acquisitions.DumpFile.Rows" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpFile.TriggerTime">
      <summary>
            Gets the time where the notable event covered by this <see cref="T:Triamec.Tam.Acquisitions.DumpFile" /> happened.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.DumpSignal">
      <summary>
            Describes how to find and interpret the data in <see cref="P:Triamec.Tam.Acquisitions.DumpFile.Rows" /> corresponding to one signal.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpSignal.DataType">
      <summary>
            Gets the raw data type of the captured register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpSignal.Index">
      <summary>
            Gets the index in each row in <see cref="P:Triamec.Tam.Acquisitions.DumpFile.Rows" /> containing the samples corresponding to this
            <see cref="T:Triamec.Tam.Acquisitions.DumpSignal" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpSignal.Source">
      <summary>
            Gets the identifier representing the captured register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.DumpVariable">
      <summary>
            Access a <see cref="T:Triamec.Tam.Acquisitions.DumpFile" /> via the <see cref="N:Triamec.Tam.Acquisitions" /> framework.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpVariable.Count">
      <summary>
            Gets the number of elements in the collection.
            </summary>
      <returns>The number of elements in the collection. </returns>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.DumpVariable.CreateAll(Triamec.Tam.Acquisitions.DumpFile,Triamec.Tam.Registers.RegisterComposite)">
      <summary>
            Creates a <see cref="T:Triamec.Tam.Acquisitions.DumpVariable" /> for each instance in the <see cref="P:Triamec.Tam.Acquisitions.DumpFile.Signals" /> of the
            specified <see cref="T:Triamec.Tam.Acquisitions.DumpFile" />.
            </summary>
      <param name="dump">The dump file.</param>
      <param name="registerRoot">A reference to the register, or <see langword="null" /> if not available.</param>
      <returns>
            An instance implementing <see cref="T:Triamec.Acquisitions.IVariable`1" /> twice. One interface offers <see cref="T:System.Double" /> values,
            the other's values are of a <see cref="T:System.Type" /> corresponding to the <see cref="P:Triamec.Tam.Acquisitions.DumpSignal.DataType" /> of the
            <see cref="T:Triamec.Tam.Acquisitions.DumpSignal" />,
            or the <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> of the <see cref="T:Triamec.Tam.Registers.ITamReadonlyRegister" />
            representing the <see cref="P:Triamec.Tam.Acquisitions.DumpSignal.Source" /> of the <see cref="T:Triamec.Tam.Acquisitions.DumpSignal" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dump" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.DumpVariable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpVariable.Info">
      <summary>
            Gets miscellaneous information about the variable.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpVariable.IsRegular">
      <summary>
            Gets a value indicating whether all acquired samples are equally spaced to each other.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpVariable.SamplingTime">
      <summary>
            Gets the distance between two samples.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpVariable.Segments">
      <summary>
            Gets the regular segments of this <see cref="T:Triamec.Acquisitions.IVariable" /> instance.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpVariable.StartTime">
      <summary>
            Gets the start time of this instance.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.DumpVariable.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.DumpVariable.TriggerTime">
      <summary>
            Gets the time where the notable event happened.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.IProlongingTamAcquisition">
      <summary>
            Simultaneous prolonging data acquisition for a list of <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" /> instances.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.ITamAcquisition">
      <summary>
            Simultaneous data acquisition for a list of <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" /> instances.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.ITamAcquisition.Acquire(System.TimeSpan,Triamec.Tam.Acquisitions.ITamTrigger)">
      <summary>
            Acquires data spanning the specified duration.
            </summary>
      <param name="duration">The duration defining data size.</param>
      <param name="trigger">
            The condition for the publisher to send data, or <see langword="null" /> in order to send unconditionally.
            </param>
      <returns>
            Whether more data can be acquired.
            </returns>
      <exception cref="T:System.ArgumentException">
            The <see cref="P:Triamec.Tam.Acquisitions.ITamTrigger.Source" /> of the <paramref name="trigger" /> is <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">
        <para>The <see cref="P:Triamec.Tam.Acquisitions.ITamTrigger.Kind" /> is none of the <see cref="T:Triamec.TriaLink.PublicationCommand" /> values.</para>
        <para>-or-</para>
        <para>Trigger involving several devices is not implemented.</para>
        <para>-or-</para>
        <para>Acquiring failed.</para>
        <para>-or-</para>
        <para>
          <see cref="M:Triamec.Tam.Acquisitions.ITamTrigger.Stimulate" /> failed.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">An acquisition is already ongoing.</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been <see cref="M:System.IDisposable.Dispose" />d.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="duration" /> is negative.</para>
        <para>This instance doesn't implement <see cref="T:Triamec.Acquisitions.IProlongingAcquisition`1" /> and
              <paramref name="duration" /> is <see cref="F:System.TimeSpan.Zero" />.</para>
        <para>This instance implements <see cref="T:Triamec.Acquisitions.IProlongingAcquisition`1" /> and
              <paramref name="duration" /> is greater than
              <see cref="P:Triamec.Acquisitions.IProlongingAcquisition`1.TimeLimit" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamAcquisition.Clock">
      <summary>
            Gets the clock allowing to relate <see cref="P:Triamec.Acquisitions.IVariableSegment.StartTime" />s to
            <see cref="T:Triamec.TriaLink.Timestamp" />s.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.ITamClock">
      <summary>
            Clock allowing to relate <see cref="T:System.DateTime" /> time information to <see cref="T:Triamec.TriaLink.Timestamp" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.ITamClock.GetTriaLinkTime(System.DateTime)">
      <summary>
            Gets the relative time on the Tria-Link associated with the specified <see cref="T:System.DateTime" />.
            </summary>
      <param name="dateTime">The absolute <see cref="T:System.DateTime" /> instance.</param>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamClock.TickTime">
      <summary>
            Gets the tick time of the <see cref="T:Triamec.TriaLink.Timestamp" />s.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.ITamTrigger">
      <summary>
            Subscription publishing condition.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamTrigger.Kind">
      <summary>
            Gets the trigger kind.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamTrigger.LevelOrEpsilon">
      <summary>
            Gets the level or epsilon value for the trigger, depending on <see cref="P:Triamec.Tam.Acquisitions.ITamTrigger.Kind" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamTrigger.Source">
      <summary>
            Gets an instance indicating where to trigger.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.ITamTrigger.Stimulate">
      <summary>
            Executes code such that the conditions are met.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Stimulation failed.</exception>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamTrigger.Timeout">
      <summary>
            Gets the maximal duration to wait for the trigger being hit.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.ITamVariable">
      <summary>
            Variable used to acquire from an <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" /> instance in the TAM system.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.ITamVariable.AssignRawVariable(Triamec.Acquisitions.IVariable{Triamec.TriaLink.TamValue32[]},System.Int32)">
      <summary>
            Infrastructure. Assigns the underlying raw variable.
            </summary>
      <param name="rawVariable">The variable delivering Tria-Link packets.</param>
      <param name="valueIndex">Index of the value in an <see cref="T:Triamec.TriaLink.TamValue32" />[] packet.</param>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.ITamVariable.AssignRawVariableHigh(Triamec.Acquisitions.IVariable{Triamec.TriaLink.TamValue32[]})">
      <summary>
            If applicable, assigns the raw variable which delivers most significant word values.
            </summary>
      <param name="rawVariableHigh">The raw variable delivering the most significant values.</param>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamVariable.DesiredSamplingTime">
      <summary>
            Gets the desired sampling time.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamVariable.ShrinkFloat40">
      <summary>
            Gets a value indicating whether to only transmit the single precision component of a <see cref="T:Triamec.TriaLink.Float40" />
            register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.ITamVariable.Source">
      <summary>
            Gets the data source.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.ITamVariable`1">
      <summary>
            Strongly typed variable used to acquire from a TAM system.
            </summary>
      <typeparam name="T">Sample type.</typeparam>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.Stimulus">
      <summary>
            Produces a side effect activating a <see cref="T:Triamec.Tam.Acquisitions.TamTrigger" />.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Stimulus failed.</exception>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.TamAcquisition">
      <summary>
            Implementation for <see cref="T:Triamec.Tam.Acquisitions.ITamAcquisition" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisition.Create(System.TimeSpan,Triamec.Tam.Acquisitions.ITamVariable[])">
      <summary>
            Initializes an instance for simultaneous acquisition of the specified variables,
            supporting multiple takes with adjacent samples.
            </summary>
      <param name="timeLimit">The maximum duration for which space must be reserved for acquired data. A feasible
            value depends on the durations passed to
            <see cref="M:Triamec.Acquisitions.IAcquisition.Acquire(System.TimeSpan)" /> as well as to the duration
            between two calls to <see cref="M:Triamec.Acquisitions.IAcquisition.Acquire(System.TimeSpan)" />.</param>
      <param name="variables">The variables to simultaneously acquire. This parameter is considered
            constant.</param>
      <returns>
            A new thread save instance.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="variables" /> contains no elements.</para>
        <para>-or-</para>
        <para>An element of the variables, or <see cref="P:Triamec.Tam.Acquisitions.ITamVariable.Source" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> of the <see cref="P:Triamec.Tam.Acquisitions.ITamVariable.Source" /> of any
              <paramref name="variables" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeLimit" /> is less than or equal to
              <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">
        <para>Failed to read the current time.</para>
        <para>-or-</para>
        <para>
          <paramref name="variables" /> originate from unsynchronized sources.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisition.Create(Triamec.Tam.Acquisitions.ITamVariable[])">
      <summary>
            Initializes an instance for simultaneous acquisition of the specified variables.
            </summary>
      <param name="timeLimit">The maximum duration for which space must be reserved for acquired data. A feasible
            value depends on the durations passed to
            <see cref="M:Triamec.Acquisitions.IAcquisition.Acquire(System.TimeSpan)" /> as well as to the duration
            between two calls to <see cref="M:Triamec.Acquisitions.IAcquisition.Acquire(System.TimeSpan)" />.</param>
      <param name="variables">The variables to simultaneously acquire. This parameter is considered
            constant.</param>
      <returns>
            A new thread save instance.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="variables" /> contains no elements.</para>
        <para>-or-</para>
        <para>An element of the variables, or <see cref="P:Triamec.Tam.Acquisitions.ITamVariable.Source" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> of the <see cref="P:Triamec.Tam.Acquisitions.ITamVariable.Source" /> of any
              <paramref name="variables" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">
        <para>Failed to read the current time.</para>
        <para>-or-</para>
        <para>
          <paramref name="variables" /> originate from unsynchronized sources.</para>
      </exception>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.TamAcquisitionExtensions">
      <summary>
            Provides a set of extension methods for asynchronously starting acquisitions.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.Acquire(Triamec.Tam.Acquisitions.ITamVariable,System.TimeSpan)">
      <summary>
            Acquires data spanning the specified duration.
            </summary>
      <param name="duration">The duration defining data size.</param>
      <returns>
            Whether more data can be acquired.
            </returns>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">Acquiring failed.</exception>
      <exception cref="T:System.InvalidOperationException">An acquisition is already ongoing.</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been <see cref="M:System.IDisposable.Dispose" />d.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="duration" /> is negative.</para>
        <para>This instance doesn't implement <see cref="T:Triamec.Acquisitions.IProlongingAcquisition`1" /> and
              <paramref name="duration" /> is <see cref="F:System.TimeSpan.Zero" />.</para>
        <para>This instance implements <see cref="T:Triamec.Acquisitions.IProlongingAcquisition`1" /> and
              <paramref name="duration" /> is greater than
              <see cref="P:Triamec.Acquisitions.IProlongingAcquisition`1.TimeLimit" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.Acquire(Triamec.Tam.Acquisitions.ITamVariable,System.TimeSpan,Triamec.Tam.Acquisitions.ITamTrigger)">
      <summary>
            Acquires data spanning the specified duration.
            </summary>
      <param name="duration">The duration defining data size.</param>
      <param name="trigger">
            The condition for the publisher to send data, or <see langword="null" /> in order to send unconditionally.
            </param>
      <returns>
            Whether more data can be acquired.
            </returns>
      <exception cref="T:System.ArgumentException">
            The <see cref="P:Triamec.Tam.Acquisitions.ITamTrigger.Source" /> of the <paramref name="trigger" /> is <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">
        <para>The <see cref="P:Triamec.Tam.Acquisitions.ITamTrigger.Kind" /> is none of the <see cref="T:Triamec.TriaLink.PublicationCommand" /> values.</para>
        <para>-or-</para>
        <para>Trigger involving several devices is not implemented.</para>
        <para>-or-</para>
        <para>Acquiring failed.</para>
        <para>-or-</para>
        <para>
          <see cref="M:Triamec.Tam.Acquisitions.ITamTrigger.Stimulate" /> failed.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">An acquisition is already ongoing.</exception>
      <exception cref="T:System.ObjectDisposedException">
            The object has been <see cref="M:System.IDisposable.Dispose" />d.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="duration" /> is negative.</para>
        <para>This instance doesn't implement <see cref="T:Triamec.Acquisitions.IProlongingAcquisition`1" /> and
              <paramref name="duration" /> is <see cref="F:System.TimeSpan.Zero" />.</para>
        <para>This instance implements <see cref="T:Triamec.Acquisitions.IProlongingAcquisition`1" /> and
              <paramref name="duration" /> is greater than
              <see cref="P:Triamec.Acquisitions.IProlongingAcquisition`1.TimeLimit" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.Acquire``1(Triamec.Tam.Registers.ITamReadonlyRegister{``0},System.TimeSpan)">
      <summary>
            Reads isochronous values of the specified register for a defined duration with the default sampling time.
            </summary>
      <param name="desiredSamplingTime">
    
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            
  </param>
      <param name="register">
    The register.
  </param>
      <param name="duration">
    The duration defining data size.
  </param>
      <typeparam name="T">
    The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.
  </typeparam>
      <returns>The isochronous values.</returns>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">Acquiring failed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is <see cref="F:System.TimeSpan.Zero" /> or negative.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="register" /> are
              <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.Acquire``1(Triamec.Tam.Registers.ITamReadonlyRegister{``0},System.TimeSpan,System.TimeSpan)">
      <summary>
            Reads isochronous values of the specified register for a defined duration.
            </summary>
      <param name="desiredSamplingTime">
    
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            
  </param>
      <param name="register">
    The register.
  </param>
      <param name="duration">
    The duration defining data size.
  </param>
      <typeparam name="T">
    The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.
  </typeparam>
      <returns>The isochronous values.</returns>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">Acquiring failed.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is <see cref="F:System.TimeSpan.Zero" /> or negative.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="register" /> are
              <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.AcquireAsync(Triamec.Tam.Acquisitions.ITamAcquisition,System.TimeSpan,Triamec.Tam.Acquisitions.ITamTrigger)">
      <summary>
            Asynchronously begins to acquire.
            </summary>
      <param name="acquisition">The acquisition.</param>
      <param name="duration">The duration defining data size.</param>
      <param name="trigger">
            The condition for the publisher to send data, or <see langword="null" /> in order to send unconditionally.
            </param>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.AcquireAsync(Triamec.Tam.Acquisitions.ITamAcquisition,System.TimeSpan,Triamec.Tam.Acquisitions.ITamTrigger,Triamec.Acquisitions.AcquireContinuation)"></member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.AcquireAsync(Triamec.Tam.Acquisitions.ITamAcquisition,System.TimeSpan,Triamec.Tam.Acquisitions.ITamTrigger,Triamec.Acquisitions.AcquireFuture)">
      <summary>
            Asynchronously begins to acquire.
            </summary>
      <param name="acquisition">The acquisition.</param>
      <param name="duration">The duration defining data size.</param>
      <param name="trigger">The condition for the publisher to send data, or <see langword="null" /> in
            order to send unconditionally.</param>
      <param name="onCompleted">If specified, provides a callback processing the results of the
            acquisition. If left <see langword="null" />, any <see cref="T:Triamec.Acquisitions.AcquisitionException" /> occurring will be
            swallowed.</param>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.AcquireAsync(Triamec.Tam.Acquisitions.ITamVariable,System.TimeSpan,Triamec.Acquisitions.AcquireContinuation)"></member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.AcquireAsync(Triamec.Tam.Acquisitions.ITamVariable,System.TimeSpan,Triamec.Acquisitions.AcquireFuture)">
      <summary>
            Asynchronously begins to acquire.
            </summary>
      <param name="variable">The variable to acquire from.</param>
      <param name="duration">The duration defining data size.</param>
      <param name="onCompleted">If specified, provides a callback processing the results of the
            acquisition.</param>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.AcquireAsync(Triamec.Tam.Acquisitions.ITamVariable,System.TimeSpan,Triamec.Tam.Acquisitions.ITamTrigger,Triamec.Acquisitions.AcquireContinuation)"></member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.AcquireAsync(Triamec.Tam.Acquisitions.ITamVariable,System.TimeSpan,Triamec.Tam.Acquisitions.ITamTrigger,Triamec.Acquisitions.AcquireFuture)">
      <summary>
            Asynchronously begins to acquire.
            </summary>
      <param name="variable">The variable to acquire from.</param>
      <param name="duration">The duration defining data size.</param>
      <param name="trigger">The condition for the publisher to send data, or <see langword="null" /> in
            order to send unconditionally.</param>
      <param name="onCompleted">If specified, provides a callback processing the results of the
            acquisition.</param>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.CreateVariable(Triamec.Tam.Registers.ITamReadonlyRegister)">
      <summary>
            Creates a variable from the specified register which can be used to acquire data.
            </summary>
      <param name="register">The register.</param>
      <param name="desiredSamplingTime">
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            </param>
      <returns>
            A variable which will contain full precision floating point data.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="register" /> are
              <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.CreateVariable(Triamec.Tam.Registers.ITamReadonlyRegister,System.TimeSpan)">
      <summary>
            Creates a variable from the specified register which can be used to acquire data.
            </summary>
      <param name="register">The register.</param>
      <param name="desiredSamplingTime">
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            </param>
      <returns>
            A variable which will contain full precision floating point data.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="register" /> are
              <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.CreateVariable``1(Triamec.Tam.Registers.ITamReadonlyRegister{``0})">
      <summary>
            Creates a variable from the specified register which can be used to acquire data.
            </summary>
      <param name="register">The register.</param>
      <param name="desiredSamplingTime">
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            </param>
      <typeparam name="T">
    The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.
  </typeparam>
      <returns>
            A variable which will contain data of type <typeparamref name="T" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="register" /> are
              <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.CreateVariable``1(Triamec.Tam.Registers.ITamReadonlyRegister{``0},System.TimeSpan)">
      <summary>
            Creates a variable from the specified register which can be used to acquire data.
            </summary>
      <param name="register">The register.</param>
      <param name="desiredSamplingTime">
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            </param>
      <typeparam name="T">
    The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.
  </typeparam>
      <returns>
            A variable which will contain data of type <typeparamref name="T" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="register" /> are
              <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.CreateVariable``1(Triamec.Tam.Registers.ITamReadonlyRegister{``0},Triamec.Tam.Acquisitions.DumpSignal)">
      <summary>
            Associates the specified <see cref="T:Triamec.Tam.Acquisitions.DumpSignal" /> to a register, allowing to get strongly typed data.
            </summary>
      <exception cref="T:System.ArgumentNullException">One of the arguments is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.CreateVariableShrunken(Triamec.Tam.Registers.ITamReadonlyRegister,System.TimeSpan)">
      <summary>
            Creates a variable from the specified <see cref="T:Triamec.TriaLink.Float40" /> register, configured to transmit only the
            single precision component of the <see cref="T:Triamec.TriaLink.Float40" /> values.
            </summary>
      <param name="register">The register.</param>
      <param name="desiredSamplingTime">
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            </param>
      <returns>
            A variable which will contain full precision floating point data.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="register" /> is not a <see cref="T:Triamec.TriaLink.Float40" /> register.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.CreateVariableShrunken(Triamec.Tam.Registers.ITamReadonlyRegister{Triamec.TriaLink.Float40})">
      <summary>
            Creates a variable from the specified <see cref="T:Triamec.TriaLink.Float40" /> register, configured to transmit only the
            single precision component of the <see cref="T:Triamec.TriaLink.Float40" /> values.
            </summary>
      <param name="register">The register.</param>
      <param name="desiredSamplingTime">
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            </param>
      <typeparam name="T">
    The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.
  </typeparam>
      <returns>
            A variable which will contain single precision floating point values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="register" /> are
              <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.CreateVariableShrunken(Triamec.Tam.Registers.ITamReadonlyRegister{Triamec.TriaLink.Float40},System.TimeSpan)">
      <summary>
            Creates a variable from the specified <see cref="T:Triamec.TriaLink.Float40" /> register, configured to transmit only the
            single precision component of the <see cref="T:Triamec.TriaLink.Float40" /> values.
            </summary>
      <param name="register">The register.</param>
      <param name="desiredSamplingTime">
            The desired sampling time. The actual <see cref="P:Triamec.Acquisitions.IVariableSegment.SamplingTime" /> will be rounded to the
            next supported value. Specifying <see cref="F:System.TimeSpan.Zero" /> will result in the fastest possible sampling
            time.
            </param>
      <typeparam name="T">
    The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.
  </typeparam>
      <returns>
            A variable which will contain single precision floating point values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="register" /> are
              <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.Discretize(Triamec.Tam.TamStation,System.TimeSpan)">
      <summary>
            Discretizes the specified duration according to the <see cref="T:Triamec.Tam.TamStation" />'s sampling quantization.
            </summary>
      <param name="station">The station.</param>
      <param name="value">The duration to discretize.</param>
      <returns>The discretized value.</returns>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamAcquisitionExtensions.StartAcquiring(Triamec.Tam.Acquisitions.ITamVariable,System.TimeSpan)">
      <summary>
            Starts acquiring data from the specified variable.
            </summary>
      <param name="timeLimit">The maximum duration for which space must be reserved for acquired data. A feasible
            value depends on the durations passed to
            <see cref="M:Triamec.Acquisitions.IAcquisition.Acquire(System.TimeSpan)" /> as well as to the duration
            between two calls to <see cref="M:Triamec.Acquisitions.IAcquisition.Acquire(System.TimeSpan)" />.</param>
      <param name="variables">The variables to simultaneously acquire. This parameter is considered
            constant.</param>
      <returns>
            A new thread save instance.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="variables" /> contains no elements.</para>
        <para>-or-</para>
        <para>An element of the variables, or <see cref="P:Triamec.Tam.Acquisitions.ITamVariable.Source" /> or
              <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> of the <see cref="P:Triamec.Tam.Acquisitions.ITamVariable.Source" /> of any
              <paramref name="variables" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeLimit" /> is less than or equal to
              <see cref="F:System.TimeSpan.Zero" />.</exception>
      <exception cref="T:Triamec.Acquisitions.AcquisitionException">
        <para>Failed to read the current time.</para>
        <para>-or-</para>
        <para>
          <paramref name="variables" /> originate from unsynchronized sources.</para>
      </exception>
    </member>
    <member name="T:Triamec.Tam.Acquisitions.TamTrigger">
      <summary>
            Implementation of <see cref="T:Triamec.Tam.Acquisitions.ITamTrigger" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamTrigger.#ctor(Triamec.Tam.Subscriptions.ISubscribable,Triamec.TriaLink.PublicationCommand,Triamec.TriaLink.TamValue32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Acquisitions.TamTrigger" /> class configuring a trigger that may be hit at
            an arbitrary duration after the start of the acquisition.
            </summary>
      <param name="source">An instance indicating where to trigger.</param>
      <param name="kind">The level or epsilon value for the trigger, depending on <see cref="P:Triamec.Tam.Acquisitions.TamTrigger.Kind" />.</param>
      <param name="levelOrEpsilon">The level or epsilon. The value needs to be constructed in accordance to the
            <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> of the <paramref name="source" />.</param>
      <param name="stimulus">The stimulus for trigger activating or <see langword="null" /> if not needed.</param>
      <param name="timeout">The maximal duration after starting an acquisition after which the trigger is
            expected to be hit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or
            <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of <paramref name="source" /> are <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamTrigger.#ctor(Triamec.Tam.Subscriptions.ISubscribable,Triamec.TriaLink.PublicationCommand,Triamec.TriaLink.TamValue32,Triamec.Tam.Acquisitions.Stimulus,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Acquisitions.TamTrigger" /> class.
            </summary>
      <param name="source">An instance indicating where to trigger.</param>
      <param name="kind">The level or epsilon value for the trigger, depending on <see cref="P:Triamec.Tam.Acquisitions.TamTrigger.Kind" />.</param>
      <param name="levelOrEpsilon">The level or epsilon. The value needs to be constructed in accordance to the
            <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> of the <paramref name="source" />.</param>
      <param name="stimulus">The stimulus for trigger activating or <see langword="null" /> if not needed.</param>
      <param name="timeout">The maximal duration after starting an acquisition after which the trigger is
            expected to be hit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> or <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> properties of
            	<paramref name="source" /> are <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="timeout" /> is negative and does not equal
            <see cref="F:System.Threading.Timeout.Infinite" /> milliseconds.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="kind" /> must not be
            <see cref="F:Triamec.TriaLink.PublicationCommand.Off" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.TamTrigger.Kind">
      <summary>
            Gets the trigger kind.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.TamTrigger.LevelOrEpsilon">
      <summary>
            Gets the level or epsilon value for the trigger, depending on <see cref="P:Triamec.Tam.Acquisitions.ITamTrigger.Kind" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.TamTrigger.Source">
      <summary>
            Gets an instance indicating where to trigger.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Acquisitions.TamTrigger.Stimulate">
      <summary>
            Executes code such that the conditions are met.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Stimulation failed.</exception>
    </member>
    <member name="P:Triamec.Tam.Acquisitions.TamTrigger.Timeout">
      <summary>
            Gets the maximal duration to wait for the trigger being hit.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.ChildrenMatchException">
      <summary>
            Error occurred mapping the child configuration nodes of a TAM configuration to targets.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice">
      <summary>
            Gets all target descendant nodes not already successfully matched.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants">
      <summary>
            Gets a readonly list of descendants which could not be matched.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.Deserializer">
      <summary>
            Represents the loading mechanism used within the configuration namespace with the
            <see cref="T:Triamec.Tam.Configuration.TamTopologyConfiguration" /> configuration type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.Deserializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.Deserializer" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.Deserializer.#ctor(System.ComponentModel.IContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.Deserializer" /> class.
            </summary>
      <param name="container">The container.</param>
    </member>
    <member name="T:Triamec.Tam.Configuration.ITamConfigurationComposite">
      <summary>
            Composite in a TAM configuration tree.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.ITamConfigurationComposite.Add(Triamec.Tam.Configuration.ITamConfigurationNode)">
      <summary>
            Adds the specified child, if supported.
            </summary>
      <param name="child">The child configuration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="child" /> has an incorrect type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">The instance does not support to add children.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.ITamConfigurationComposite.Remove(Triamec.Tam.Configuration.ITamConfigurationNode)">
      <summary>
            Removes the specified descendant.
            </summary>
      <param name="descendant">The descendant configuration.</param>
      <returns>
            Whether <paramref name="descendant" /> was successfully removed. This method also returns
            <see langword="false" /> if <paramref name="descendant" /> is not within the descendants of the
            <see cref="T:Triamec.Tam.Configuration.ITamConfigurationComposite" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="descendant" /> has an incorrect type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descendant" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Configuration.ITamConfigurationNode">
      <summary>
            A node in a TAM configuration tree.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.ITamConfigurationNode.Adapt(Triamec.Tam.ITamNode)">
      <summary>
            Changes this configuration in order to <see cref="P:Triamec.Configuration.MatchResult.Match" /> the specified
            target.
            </summary>
      <param name="target">The node which shall be configured by this configuration.</param>
      <returns>Whether adaption succeeded.</returns>
    </member>
    <member name="P:Triamec.Tam.Configuration.ITamConfigurationNode.Address">
      <summary>
            Gets the target address of the configured instance or its name if it is a root node.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.ITamConfigurationNode.EstablishParentNavigation(Triamec.Tam.Configuration.ITamConfigurationComposite)">
      <summary>
            Ensures this configuration provides a value for its <see cref="P:Triamec.Tam.Configuration.ITamConfigurationNode.Parent" /> property.
            </summary>
      <param name="parent">The parent of this configuration or <see langword="null" /> if this configuration is a
            root element.</param>
    </member>
    <member name="M:Triamec.Tam.Configuration.ITamConfigurationNode.IsCompliant(Triamec.Tam.ITamNode)">
      <summary>
            Determines whether this configuration is compliant with the specified target.
            </summary>
      <param name="target">A TAM node.</param>
      <returns>
        <see langword="true" /> if the specified target is compliant; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Configuration.ITamConfigurationNode.Parent">
      <summary>
            Gets the parent configuration.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.MismatchCode">
      <summary>
            Distinct mismatch codes for <see cref="T:Triamec.Configuration.MatchException" /> 
            <see cref="P:Triamec.Configuration.MatchException.Token" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.TamConfigurationMismatch">
      <summary>Identifies a general mismatch in the TAM configuration system.</summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.CommunicationFailure">
      <summary>Identifies a communication timeout during matching.</summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.ChildMissing">
      <summary>
            Identifies a mismatch where no targets are found for one or several configurations.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the
            <see cref="P:Triamec.Tam.Configuration.ITamConfigurationNode.Parent" /> of the child configurations, the children themselves are passed
            as <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />. <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice" />
            contains all unconfigured children <see cref="T:Triamec.Tam.ITamNode" />s which were not matched by other configurations.
            </para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.WrongAddress">
      <summary>
            Identifies a mismatch where the address <see cref="T:System.Uri" /> of target and actual location differ.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.UnknownAddress">
      <summary>
            Identifies a mismatch where an identifying address <see cref="T:System.Uri" /> of the target location is not
            known to the actual system.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.AdapterMismatch">
      <summary>Identifies a mismatch where actual and target adapter don't match.</summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.StationMismatch">
      <summary>Identifies a mismatch where actual and target station don't match.</summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.MotorBaseConfigurationNotSupported">
      <summary>
            Identifies a mismatch where the hardware doesn't support the specified
            <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.WrongRegisterLayout">
      <summary>
            Identifies a mismatch where the actual <see cref="T:Triamec.Tam.ITamDevice" /> has another
            <see cref="P:Triamec.Tam.ITamDevice.RegisterLayoutId" /> than the configuration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterTypeMissing">
      <summary>
            Identifies a <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" /> without
            <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Type" /> information.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.WrongRegisterType">
      <summary>
            Identifies a <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" /> with wrong
            <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Type" /> compared to the actual register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterValueMissing">
      <summary>
            Identifies a <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" /> without defined
            <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterValueCorrupt">
      <summary>
            Identifies a boolean <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" />
            with a non-boolean <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterEnumValueUndefined">
      <summary>
            Identifies an enumeration <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" />
            with a <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" /> which is not enumerated.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterBoolValueCorrupt">
      <summary>
            Identifies a boolean <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" />
            with a non-boolean <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterIntegerValueCorrupt">
      <summary>
            Identifies an integer <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" />
            with a non-integer <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterFloatValueCorrupt">
      <summary>
            Identifies a float <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" />
            with a non-float <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterFloat40ValueCorrupt">
      <summary>
            Identifies a <see cref="T:Triamec.TriaLink.Float40" /><see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" />
            with a non-<see cref="T:Triamec.TriaLink.Float40" /><see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterDoubleValueCorrupt">
      <summary>
            Identifies a double <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" /> with a
            non-<see langword="double" /><see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.UnsupportedRegisterType">
      <summary>
            Identifies a <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" /> with an
            unsupported <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Type" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.RegisterAddressMissing">
      <summary>
            Identifies a mismatch where the identifying
            <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.PersistedAddress" /> is not specified.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.InvalidTamaAssemblyFile">
      <summary>Identifies a mismatch where a Tama assembly file could not be found.</summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.ActiveModuleDetected">
      <summary>
            Identifies an <see cref="F:Triamec.Tam.Modules.ActivityState.Active" /><see cref="T:Triamec.Tam.Modules.ModuleComponent" /> during matching.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.ModuleLoadFailure">
      <summary>
            Identifies a mismatch where a <see cref="T:Triamec.Tam.Modules.TamModule" /> assembly could not be loaded.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, while the <see cref="T:Triamec.Tam.Modules.Configuration.TamModuleConfiguration" />
            is passed with <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.IllegalModuleType">
      <summary>
            Identifies a mismatch where the specified <see cref="T:Triamec.Tam.Modules.TamModule" /> type has the wrong format.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, while the <see cref="T:Triamec.Tam.Modules.Configuration.TamModuleConfiguration" />
            is passed with <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.
            <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice" /> is always <see langword="null" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.ModuleTypeNotFound">
      <summary>
            Identifies a mismatch where a specified <see cref="T:Triamec.Tam.Modules.TamModule" /> type could not be resolved.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, while the <see cref="T:Triamec.Tam.Modules.Configuration.TamModuleConfiguration" />
            is passed with <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.ModuleNotApplicable">
      <summary>
            Identifies a mismatch where a specified <see cref="T:Triamec.Tam.Modules.TamModule" /> cannot be assigned to the
            <see cref="T:Triamec.Tam.TamDevice" />.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, while the <see cref="T:Triamec.Tam.Modules.Configuration.TamModuleConfiguration" />
            is passed with <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.
            <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice" /> is always <see langword="null" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.WrongModuleType">
      <summary>
            Identifies a mismatch where the <see cref="T:Triamec.Tam.Modules.TamModule" /> type did not match.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.UnknownParameter">
      <summary>
            Identifies a mismatch where the configuration contains one or several
            <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />s not present in the actual
            <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, the unmatched parameters themselves are passed
            as <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.
            <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice" /> is always <see langword="null" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.UnknownModuleComponent">
      <summary>
            Identifies a mismatch where the configuration specifies one or several child
            <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s not present in the actual <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, the unmatched components themselves are passed
            as <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.
            <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice" /> is always <see langword="null" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.ParameterValueMissing">
      <summary>
            Identifies a <see cref="T:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration" /> without defined value.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, the bad parameter itself is passed
            as <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.
            <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice" /> is always <see langword="null" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.ParameterEnumValueUndefined">
      <summary>
            Identifies an enumeration <see cref="T:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration" />
            with a <see cref="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value" /> which is not enumerated.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, the bad parameter itself is passed
            as <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.
            <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice" /> is always <see langword="null" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.WrongParameterType">
      <summary>
            Identifies an <see cref="T:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration" /> with an unexpected
            type.
            <para>The <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode" /> is set to the ancestor
            <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" />, the bad parameter itself is passed
            as <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.UnmatchedDescendants" />.
            <see cref="P:Triamec.Tam.Configuration.ChildrenMatchException.Choice" /> is always <see langword="null" />.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.InvalidPeripheryDevice">
      <summary>
            One of the persistent peripheral values refers to a <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> which does not 
            exist in the target <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.InvalidPeripheryAddress">
      <summary>
            One of the persistent peripheral addresses is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.MismatchCode.Motion">
      <summary>
            The system is in motion.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.RegisterInclude">
      <summary>
            Specifies the include configurations for registers.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.RegisterInclude.Always">
      <summary>
            Always.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.RegisterInclude.Never">
      <summary>
            Never.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamAdapterConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.TamAdapter" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamAdapterConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamAdapterConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamAdapterConfiguration.AdaptTo(Triamec.Tam.ITamNode)">
      <summary>
            Changes this configuration in order to <see cref="P:Triamec.Configuration.MatchResult.Match" /> the specified
            target.
            </summary>
      <param name="target">The node which shall be configured by this configuration.</param>
      <returns>Whether adaption succeeded.</returns>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamAdapterConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies the configuration.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" /> and
            is used by the method.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamAdapterConfiguration.FpgaFirmwareId">
      <summary>
            Gets or sets the FPGA firmware id.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamAdapterConfiguration.HardwareRevision">
      <summary>
            Gets the hardware revision of the adapter device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamAdapterConfiguration.HardwareSerialNumber">
      <summary>
            Gets or sets the hardware serial number.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamAdapterConfiguration.Peripherals">
      <summary>
            Gets or sets the persistent values for periphery registers.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamAdapterConfiguration.PeripheryLayoutId">
      <summary>
            Gets or sets the periphery layout id.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamAdapterConfiguration.ProductName">
      <summary>
            Gets the product name of the adapter device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamAdapterConfiguration.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamaNodeConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.TamaNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamaNodeConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamaNodeConfiguration" /> class.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamaNodeConfiguration.AbsoluteTamaAssemblyPath">
      <summary>
            Gets the absolute path to the Tama assembly.
            </summary>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
            The absolute path cannot be determined.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamaNodeConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies this configuration to the configured TAM node.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" /> and
            is used by the method.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamaNodeConfiguration.CodeAsBase64">
      <summary>
            Gets or sets the base64 encoded Tama program.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamaNodeConfiguration.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamaNodeConfiguration.TamaAssemblyPath">
      <summary>
            Gets or sets the path to the Tama assembly relative to the configuration file.
            </summary>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> contains invalid characters.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamaNodeConfiguration.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamConfigurationMatchException">
      <summary>
            Error occurred during the match of a TAM configuration.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamConfigurationMatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamConfigurationMatchException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the
            serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains
            contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or
            <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamConfigurationMatchException.ConfigurationNode">
      <summary>
            Gets the configuration which does not match with the <see cref="P:Triamec.Tam.Configuration.TamConfigurationMatchException.TargetNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamConfigurationMatchException.DetailMessage">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <returns>The error message that explains the reason for the exception, or an empty string("").</returns>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamConfigurationMatchException.TargetNode">
      <summary>
            Gets the target node of the mismatch.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamDeserializer`1">
      <summary>
            Deserializer for TAM system configurations.
            </summary>
      <typeparam name="TConfiguration">The type of the configuration.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamDeserializer`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamDeserializer`1" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamDeserializer`1.#ctor(System.ComponentModel.IContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamDeserializer`1" /> class.
            </summary>
      <param name="container">The container.</param>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamDeserializer`1.CreateLoadResult">
      <summary>
            Creates an instance representing a successful load.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeserializer`1.TamReference">
      <summary>
            Gets or sets a reference to the TAM system.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamDeviceConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamDeviceConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamDeviceConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamDeviceConfiguration.Add(Triamec.Tam.Configuration.ITamConfigurationNode)">
      <summary>
            Adds the specified child, if supported.
            </summary>
      <param name="child">The child configuration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="child" /> has an incorrect type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">The instance does not support to add children.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.Address">
      <summary>
            Gets the target address of the configured instance or
            <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name" /> if it is a root node.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamDeviceConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies this configuration to the configured TAM node.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Tam.TamException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.CpuRelease">
      <summary>
            Gets or sets the release number of the CPU firmware.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamDeviceConfiguration.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Tam.TamException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.FastTaskCycleTime">
      <summary>Gets or sets the cycle time of a fast controller.</summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.RegisterLayoutId">
      <summary>
            Gets or sets the Register Layout ID.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.Registers">
      <summary>
            Gets or sets the registers configuration.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamDeviceConfiguration.Remove(Triamec.Tam.Configuration.ITamConfigurationNode)">
      <summary>
            Removes the specified descendant.
            </summary>
      <param name="descendant">The descendant configuration.</param>
      <returns>
            Whether <paramref name="descendant" /> was successfully removed. This method also returns
            <see langword="false" /> if <paramref name="descendant" /> is not within the descendants of the
            <see cref="T:Triamec.Tam.Configuration.ITamConfigurationComposite" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="descendant" /> has an incorrect type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descendant" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.SuperFastTaskCycleTime">
      <summary>Gets or sets the cycle time of a super fast controller.</summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.TamaNode">
      <summary>
            Gets or sets the Tama node configuration.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.TamaVirtualMachineId">
      <summary>
            Gets or sets the Tama virtual machine id.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamDeviceConfiguration.TamModule">
      <summary>
            Gets or sets the TAM module configuration.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamLinkConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.TamLink" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamLinkConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamLinkConfiguration" /> class.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1">
      <summary>
            Base for topology configuration classes.
            </summary>
      <typeparam name="TTamNode">The type of the configured TAM nodes.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1" /> class.
            </summary>
      <param name="allowEmptyName">Whether <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name" /> is allowed to be empty.</param>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.#ctor(Triamec.Tam.Configuration.ITamConfigurationComposite,`0,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1" /> class
            with a specified configured TAM node.
            </summary>
      <param name="parent">The parent TAM configuration node or <see langword="null" /> if this is a root
            node.</param>
      <param name="configuredTamNode">The configured TAM node.</param>
      <param name="allowEmptyName">Whether <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name" /> is allowed to be empty.</param>
      <param name="persistName">
        <see langword="true" /> to persist the name.</param>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.#ctor(Triamec.Tam.Configuration.TamNodeComponentConfiguration{`0},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1" /> class from
            an original node.
            </summary>
      <param name="original">The original to clone.</param>
      <param name="allowEmptyName">Whether <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name" /> is allowed to be empty.</param>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Adapt(Triamec.Tam.ITamNode)">
      <summary>
            Changes this configuration in order to <see cref="P:Triamec.Configuration.MatchResult.Match" /> the specified
            target.
            </summary>
      <param name="target">The node which shall be configured by this configuration.</param>
      <returns>Whether adaption succeeded.</returns>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.AdaptTo(Triamec.Tam.ITamNode)">
      <summary>
            Changes this configuration in order to <see cref="P:Triamec.Configuration.MatchResult.Match" /> the specified
            target.
            </summary>
      <param name="target">The node which shall be configured by this configuration.</param>
      <returns>If not overridden, always <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Address">
      <summary>
            Gets the target address of the configured instance or <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name" /> if it is a root node.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies this configuration to the configured TAM node.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" /> and
            is used by the method.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.EstablishParentNavigation(Triamec.Tam.Configuration.ITamConfigurationComposite)">
      <summary>
            Ensures this configuration provides a value for its <see cref="P:Triamec.Tam.Configuration.ITamConfigurationNode.Parent" /> property.
            </summary>
      <param name="parent">The parent of this configuration or <see langword="null" /> if this configuration is a
            root element.</param>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.ExpectedVersion">
      <summary>
             Gets the configuration version the software understands.
             </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.IsCompliant(Triamec.Tam.ITamNode)">
      <summary>
            Determines whether this configuration is compliant with the specified target.
            </summary>
      <param name="target">A TAM node.</param>
      <returns>
        <see langword="true" /> if the specified target is compliant; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Match(System.Object)">
      <summary>
            Matches the specified instance.
            </summary>
      <param name="configuredInstance">The configured Instance.</param>
      <returns>
            An instance describing the result of the match operation.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="configuredInstance" /> has the wrong runtime
            <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configuredInstance" /> is
            <see langword="null" /> but needed for the operation.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <exception cref="T:System.UriFormatException">The name is not a valid relative URI.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Parent">
      <summary>
            Gets the parent configuration.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Target">
      <summary>
            Gets the configured TAM node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.TargetNode">
      <summary>
            Gets the configured TAM node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Version">
      <summary>
            Gets or sets a string identifying the current version of the software, if this is the root node.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2">
      <summary>
            A composite configuration component.
            </summary>
      <typeparam name="TTamNode">The type of the configured TAM nodes.</typeparam>
      <typeparam name="TChild">The type of child nodes.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2" /> class.
            </summary>
      <param name="allowEmptyName">
            Whether <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name" /> is allowed to be empty.
            </param>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.#ctor(Triamec.Tam.Configuration.ITamConfigurationComposite,`0,Triamec.Tam.Configuration.TamSerializer,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2" /> class.
            </summary>
      <param name="parent">The parent TAM configuration node or <see langword="null" /> if this is a root
            node.</param>
      <param name="configuredTamNode">The configured TAM node.</param>
      <param name="serializer">The serializer that contains information on what has to be saved.</param>
      <param name="allowEmptyName">
            Whether <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name" /> is allowed to be empty.
            </param>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.#ctor(Triamec.Tam.Configuration.ITamConfigurationComposite,`0,Triamec.Tam.Configuration.TamSerializer,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2" /> class.
            </summary>
      <param name="parent">The parent TAM configuration node or <see langword="null" /> if this is a root
            node.</param>
      <param name="configuredTamNode">The configured TAM node.</param>
      <param name="serializer">The serializer that contains information on what has to be saved.</param>
      <param name="allowEmptyName">
            Whether <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Name" /> is allowed to be empty.
            </param>
      <param name="forceIncludeName">
        <see langword="true" /> to persist the name unconditionally.</param>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.Add(Triamec.Tam.Configuration.ITamConfigurationNode)">
      <summary>
            Adds the specified child, if supported.
            </summary>
      <param name="child">The child configuration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="child" /> has an incorrect type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">The instance does not support to add children.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.Address">
      <summary>
            Gets the target address of the configured instance or
            <see langword="TamNodeComponentConfiguration{TTamNode}.AddressSegment" /> if it is a root node.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies the configuration.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" /> and
            is used by the method.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.Children">
      <summary>
            Gets the children.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Tam.TamException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamNodeCompositeConfiguration`2.Remove(Triamec.Tam.Configuration.ITamConfigurationNode)">
      <summary>
            Removes the specified descendant.
            </summary>
      <param name="descendant">The descendant configuration.</param>
      <returns>
            Whether <paramref name="descendant" /> was successfully removed. This method also returns
            <see langword="false" /> if <paramref name="descendant" /> is not within the descendants of the
            <see cref="T:Triamec.Tam.Configuration.ITamConfigurationComposite" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="descendant" /> has an incorrect type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descendant" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamSerializer">
      <summary>
            The save mechanism of the configuration of the TAM API.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.#ctor(System.Boolean,Triamec.Tam.ITamNode[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamSerializer" /> class.
            </summary>
      <param name="closestAncestorIsRoot">If set to <see langword="true" />, the closest common ancestor
            <see cref="T:Triamec.Tam.ITamNode" /> of the specified <paramref name="coverage" /> defines the root element of the TAM
            configuration file; Otherwise, the XML root element is a serialized
            <see cref="T:Triamec.Tam.Configuration.TamTopologyConfiguration" />.</param>
      <param name="coverage">A list of nodes with at least one element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="coverage" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="coverage" /> must not be empty.</para>
        <para>-or-</para>
        <para>One of the elements of <paramref name="coverage" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.#ctor(Triamec.Tam.ITamNode[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamSerializer" /> class.
            </summary>
      <param name="closestAncestorIsRoot">If set to <see langword="true" />, the closest common ancestor
            <see cref="T:Triamec.Tam.ITamNode" /> of the specified <paramref name="coverage" /> defines the root element of the TAM
            configuration file; Otherwise, the XML root element is a serialized
            <see cref="T:Triamec.Tam.Configuration.TamTopologyConfiguration" />.</param>
      <param name="coverage">A list of nodes with at least one element.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="coverage" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="coverage" /> must not be empty.</para>
        <para>-or-</para>
        <para>One of the elements of <paramref name="coverage" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.CancelAsync">
      <summary>
            Requests cancelation of a pending save operation.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.Coverage">
      <summary>
            Gets the read-only list of nodes to persist.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.Dispose">
      <summary> 
            Clean up any resources being used.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.IncludeModuleAssignments">
      <summary>
            Gets or sets a value indicating whether to include module assignments.
            </summary>
      <exception cref="T:System.InvalidOperationException">The instance <see cref="P:Triamec.Tam.Configuration.TamSerializer.IsBusy" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.IncludeModuleParameters">
      <summary>
            Gets or sets a value indicating whether to include module parameters.
            </summary>
      <exception cref="T:System.InvalidOperationException">The instance <see cref="P:Triamec.Tam.Configuration.TamSerializer.IsBusy" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.IncludeMotorBaseConfiguration">
      <summary>
            Gets or sets a value indicating whether to include motor base configuration.
            </summary>
      <exception cref="T:System.InvalidOperationException">The instance is busy.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.IncludeRegisters">
      <summary>
            Gets or sets a value indicating when to include registers.
            </summary>
      <exception cref="T:System.InvalidOperationException">The instance is busy.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.IncludeTamaDownloads">
      <summary>
            Gets or sets a value indicating whether to include Tama downloads.
            </summary>
      <exception cref="T:System.InvalidOperationException">The instance is busy.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.IsBusy">
      <summary>
            Gets a value indicating whether a save operation is pending.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.OriginalCoverage">
      <summary>
            Gets the coverage provided when the object was instantiated.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.Path">
      <summary>
            Gets or sets the path to the configuration to save.
            </summary>
      <exception cref="T:System.InvalidOperationException">The operation is set and the instance is busy.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.Save">
      <summary>
            Saves the covered TAM nodes respecting the different include settings.
            </summary>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
        <para>The TAM configuration could not be successfully read out.</para>
        <para>-or-</para>
        <para>Serialization to the file specified by <see cref="P:Triamec.Tam.Configuration.TamSerializer.Path" /> failed.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.Save(System.String,System.Object)">
      <summary>
            Saves relevant settings as XML configuration to a file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <param name="configuration">The configuration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configuration" /> is <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Configuration.ConfigurationException">Serialization failed.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.Save(System.Xml.XmlWriter)">
      <summary>
            Saves the covered TAM nodes respecting the different include settings, using the specified writer.
            </summary>
      <param name="writer">The XML writer.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
        <para>The TAM configuration could not be successfully read out.</para>
        <para>-or-</para>
        <para>Serialization to the file specified by <see cref="P:Triamec.Tam.Configuration.TamSerializer.Path" /> failed.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.Save(System.Xml.XmlWriter,System.Object)">
      <summary>
            Saves relevant settings as XML configuration using a specified writer.
            </summary>
      <param name="writer">The XML writer.</param>
      <param name="configuration">The configuration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configuration" /> is <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Configuration.ConfigurationException">Could not correctly serialize the TAM configuration.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.SaveAsync">
      <summary>
            Saves the covered TAM nodes respecting the different include settings.
            </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:Triamec.Tam.Configuration.TamSerializer" /> <see cref="P:Triamec.Tam.Configuration.TamSerializer.IsBusy" />.
              </exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSerializer.SaveAsync(System.Xml.XmlWriter)">
      <summary>
            Saves the covered TAM nodes respecting the different include settings.
            </summary>
      <param name="writer">The XML writer.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:Triamec.Tam.Configuration.TamSerializer" /> <see cref="P:Triamec.Tam.Configuration.TamSerializer.IsBusy" />.
            </exception>
    </member>
    <member name="E:Triamec.Tam.Configuration.TamSerializer.SaveCompleted">
      <summary>
            The event thrown when the <see cref="M:Triamec.Tam.Configuration.TamSerializer.SaveAsync" /> and <see cref="M:Triamec.Tam.Configuration.TamSerializer.SaveAsync(System.Xml.XmlWriter)" /> methods
            completed operation.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Configuration.TamSerializer.SaveProgressChanged">
      <summary>
            The event thrown whenever the save routine has new progress information present.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSerializer.StartFromTopology">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="P:Triamec.Tam.Configuration.TamSerializer.Coverage" /> and to persist the whole
            <see cref="T:Triamec.Tam.TamTopology" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">The instance is busy.</exception>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamStationConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.TamStation" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamStationConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamStationConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamStationConfiguration.AdaptTo(Triamec.Tam.ITamNode)">
      <summary>
            Changes this configuration in order to <see cref="P:Triamec.Configuration.MatchResult.Match" /> the specified
            target.
            </summary>
      <param name="target">The node which shall be configured by this configuration.</param>
      <returns>Whether adaption succeeded.</returns>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamStationConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies the configuration.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamStationConfiguration.FpgaFirmwareId">
      <summary>
            Gets or sets the FPGA firmware id of the configured station.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamStationConfiguration.HardwareRevision">
      <summary>
            Gets or sets the hardware revision number of the configured station.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamStationConfiguration.HardwareSerialNumber">
      <summary>
            Gets or sets the hardware serial number of the configured station.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamStationConfiguration.IsCompliant(Triamec.Tam.ITamNode)">
      <summary>
            Determines whether this configuration is compliant with the specified target.
            </summary>
      <param name="target">A TAM node.</param>
      <returns>
        <see langword="true" /> if the specified target is compliant; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamStationConfiguration.LocalNodeNumber">
      <summary>
            Gets or sets the local node number of the configured station.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamStationConfiguration.MotorBaseConfiguration">
      <summary>
            Gets or sets the motor base configuration of the configured station.
            </summary>
      <exception cref="T:System.ArgumentException">
            Passed an unknown <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> to the setter.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamStationConfiguration.Peripherals">
      <summary>
            Gets or sets the persistent values for periphery registers.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamStationConfiguration.PeripheryLayoutId">
      <summary>
            Gets or sets the periphery layout id of the configured station.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamStationConfiguration.ProductName">
      <summary>
            Gets or sets the product name of the configured station.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamStationConfiguration.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamSystemConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.TamSystem" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSystemConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamSystemConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSystemConfiguration.AdaptTo(Triamec.Tam.ITamNode)">
      <summary>
            Changes this configuration in order to <see cref="P:Triamec.Configuration.MatchResult.Match" /> the specified
            target.
            </summary>
      <param name="target">The node which shall be configured by this configuration.</param>
      <returns>Whether adaption succeeded.</returns>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSystemConfiguration.Address">
      <summary>
            Gets the target address of the configured instance or <see langword="null" /> if it is a root node.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSystemConfiguration.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Tam.TamException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamSystemConfiguration.PersistedAddress">
      <summary>
            Gets the address.
            </summary>
      <exception cref="T:System.UriFormatException">The address is not an absolute URI.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamSystemConfiguration.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.Tam.Configuration.TamTopologyConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.TamTopology" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamTopologyConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Configuration.TamTopologyConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamTopologyConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies the configuration.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" /> and
            is used by the method.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamTopologyConfiguration.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Tam.TamException">The loaded configuration is not a valid configuration.</exception>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="M:Triamec.Tam.Configuration.TamTopologyConfiguration.Remove(Triamec.Tam.Configuration.ITamConfigurationNode)">
      <summary>
            Removes the specified descendant.
            </summary>
      <param name="descendant">The descendant configuration.</param>
      <returns>
            Whether <paramref name="descendant" /> was successfully removed. This method also returns
            <see langword="false" /> if <paramref name="descendant" /> is not within the descendants of the
            <see cref="T:Triamec.Tam.Configuration.ITamConfigurationComposite" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="descendant" /> has an incorrect type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descendant" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamTopologyConfiguration.Stations">
      <summary>
            Gets a machine related list of stations.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Configuration.TamTopologyConfiguration.TamConfigurationPath">
      <summary>
            Gets the full path to the TAM configuration to use at startup.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.TamTopologyConfiguration.VERSION">
      <summary>
            The TAM configuration XML schema version.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.Resolving.CompliantProductTypeResolver">
      <summary>
            Allows to load configurations containing one of several interchangeable product variants.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Configuration.Resolving.CompliantProductTypeResolver.Resolve(Triamec.Configuration.MatchException)">
      <summary>
            Resolves the specified mismatch.
            </summary>
      <param name="mismatch">The mismatch.</param>
      <returns>
        <see langword="true" /> when the mismatch could be resolved, otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Configuration.Resolving.CompliantProductTypeResolver.SupportedCodes">
      <summary>
            Gets the type of mismatches this instance may be able to resolve.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Configuration.Resolving.ResolveUserInteraction">
      <summary>
            Specification whether a specific part of TAM configuration resolving can be automatically done or whether it
            needs some user interaction.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.Resolving.ResolveUserInteraction.No">
      <summary>Resolving can take place automatically.</summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.Resolving.ResolveUserInteraction.Yes">
      <summary>
            Resolving involves the user, but can also be done automatically in an non-interactive environment.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Configuration.Resolving.ResolveUserInteraction.Force">
      <summary>
            Resolving can only be successful by a manual step.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Diagnostics.StationHealthCounterState">
      <summary>
            The values of the <see cref="P:Triamec.Tam.Diagnostics.StationMonitor.CounterState" /> property.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Diagnostics.StationHealthCounterState.Normal">
      <summary>
            No errors occurred.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Diagnostics.StationHealthCounterState.Error">
      <summary>
            Errors occurred.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Diagnostics.StationHealthCounterState.LinkDown">
      <summary>
            The link was down at least once.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Diagnostics.StationHealthCounterState.Saturated">
      <summary>
            One of the counters is at its maximum possible value.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Diagnostics.StationMonitor">
      <summary>
            Provides health data about a station within a Tria-Link ring topology.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.CounterState">
      <summary>
            Gets a value indicating the state of the error counters.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.CrcErrorsRing1">
      <summary>
            Gets the counted CRC errors from Tria-Link ring 1.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.CrcErrorsRing2">
      <summary>
            Gets the counted CRC errors from Tria-Link ring 2.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Diagnostics.StationMonitor.Create(Triamec.Tam.TamAdapter)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Diagnostics.StationMonitor" /> class from a <see cref="T:Triamec.Tam.TamAdapter" />.
            </summary>
      <param name="adapter">The adapter representing the adapter station.</param>
      <returns>
            The monitor or <see langword="null" /> if <paramref name="adapter" /> is not a Tria-Link adapter.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="adapter" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Diagnostics.StationMonitor.Create(Triamec.Tam.TamStation)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Diagnostics.StationMonitor" /> class from a <see cref="T:Triamec.Tam.TamStation" />.
            </summary>
      <param name="station">The station.</param>
      <returns>
            The monitor or <see langword="null" /> if <paramref name="station" /> is not a Tria-Link station.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="station" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.FrameLengthErrorsRing1">
      <summary>
            Gets the counted frames with incorrect length from Tria-Link ring 1.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.FrameLengthErrorsRing2">
      <summary>
            Gets the counted frames with incorrect length from Tria-Link ring 2.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.FrequencyDeviation">
      <summary>
            Gets the current deviation, in PPM, from the default Tria-Link clock frequency of the station.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.GapLengthErrorsRing1">
      <summary>
            Gets the counted gaps with incorrect length from Tria-Link ring 1.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.GapLengthErrorsRing2">
      <summary>
            Gets the counted gaps with incorrect length from Tria-Link ring 2.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.LinkDown">
      <summary>
            Gets the number of times the link was not ready from the monitored station's perspective.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.Name">
      <summary>
            Gets a description of the station.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.PhaseDeviation">
      <summary>
            Gets the phase deviation of the rings.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.ReceiveErrorsRing1">
      <summary>
            Gets the counted Rx errors from Tria-Link ring 1.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.ReceiveErrorsRing2">
      <summary>
            Gets the counted Rx errors from Tria-Link ring 2.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Diagnostics.StationMonitor.Refresh">
      <summary>
            Synchronizes the values of <see cref="P:Triamec.Tam.Diagnostics.StationMonitor.CrcErrorsRing1" />, <see cref="P:Triamec.Tam.Diagnostics.StationMonitor.CrcErrorsRing2" />,
            <see cref="P:Triamec.Tam.Diagnostics.StationMonitor.FrameLengthErrorsRing1" />, <see cref="P:Triamec.Tam.Diagnostics.StationMonitor.FrameLengthErrorsRing2" /> and
            <see cref="P:Triamec.Tam.Diagnostics.StationMonitor.ReceiveErrorsRing1" />, <see cref="P:Triamec.Tam.Diagnostics.StationMonitor.ReceiveErrorsRing2" /> and
            <see cref="P:Triamec.Tam.Diagnostics.StationMonitor.FrequencyDeviation" /> from the link.
            </summary>
      <returns>
            A message about any delta compared to the previous call to this method, or <see langword="null" /> if the
            error counters didn't change. Additionally, a flag to indicate a fatal counter change.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Diagnostics.StationMonitor.Reset">
      <summary>
            Resets the error counters to zero.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.StreamGapCountAxis0">
      <summary>
            Gets the number of missing stream data packets of the first axis.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Diagnostics.StationMonitor.StreamGapCountAxis1">
      <summary>
            Gets the number of missing stream data packets of the second axis.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Firmware.CpuFirmwareDownloader">
      <summary>
            Downloads CPU firmware using the Tria-Link protocol.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.CheckFirmwareFile(System.String,System.IProgress{System.String})">
      <summary>
            Checks the given firmware file if it may be downloaded.
            </summary>
      <param name="firmwareFile">Path to the firmware file to check.</param>
      <param name="progress">The progress maintainer.</param>
      <returns>
        <see langword="null" /> if the check was successful; otherwise, a mismatch message.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.Compose(System.IProgress{System.String},Triamec.Firmware.Composition.Package,Triamec.Firmware.Composition.FirmwareEntry,System.Boolean@)">
      <summary>
            Composes firmware for the <see cref="P:Triamec.Firmware.FirmwareDownloader.Target" /> and optionally additional firmwares to a desired format.
            </summary>
      <param name="progress">The progress maintainer.</param>
      <param name="package">The composed firmware package.</param>
      <param name="mainEntry">Contains the image specific to the <see cref="P:Triamec.Firmware.FirmwareDownloader.Target" />.</param>
      <param name="firmwareChangeExpected">
            Whether it's expected that the firmware name changes. If not overridden, returns <see langword="false" />.
            </param>
      <returns>If not overridden, doesn't compose anything, but just reads <paramref name="mainEntry" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>This method is overridden and <paramref name="package" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="mainEntry" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Triamec.Firmware.FirmwareException">Composition failed.</exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.DetectFileType(System.IO.Stream)">
      <summary>
            Determines the type of the firmware file.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.DownloadAsync(System.IO.Stream,Triamec.ICancelableProgress{Triamec.Firmware.FirmwareProgressState})">
      <summary>
            Executes the download.
            </summary>
      <param name="firmware">The firmware to program.</param>
      <param name="progress">The progress service.</param>
      <exception cref="T:Triamec.Firmware.FirmwareException">The download operation could not complete successfully.</exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.Epilogue(System.IProgress{Triamec.Firmware.FirmwareProgressState},System.Boolean)">
      <summary>
            Concludes final tasks after all downloads have completed.
            </summary>
      <param name="progress">An object to report progress.</param>
      <param name="isRootDownload">
            The download completed by the epilogue is not part of a composite download.
            </param>
    </member>
    <member name="P:Triamec.Tam.Firmware.CpuFirmwareDownloader.FileQueries">
      <summary>
            Indicates how to find matching firmware for this downloader.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.CpuFirmwareDownloader.FirmwareDownloaderId">
      <summary>
            The Id of this <see cref="T:Triamec.Firmware.FirmwareDownloader" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.GetTargetReadiness">
      <summary>
            Determines whether the <see cref="P:Triamec.Firmware.FirmwareDownloader.Target" /> is ready to be updated.
            </summary>
      <returns>
        <see langword="null" /> if the <see cref="P:Triamec.Firmware.FirmwareDownloader.Target" /> is ready; a reason otherwise.</returns>
    </member>
    <member name="P:Triamec.Tam.Firmware.CpuFirmwareDownloader.Infrastructure">
      <summary>
            Gets a value indicating the infrastructure used for managing firmware upgrades.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.ReadActiveFirmware">
      <summary>
            Reads the active firmware status.
            </summary>
      <returns>Returns the location of currently active firmware image.</returns>
      <exception cref="T:Triamec.Firmware.FirmwareException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.ReadImage(System.IO.Stream,Triamec.Tam.Firmware.FirmwareFileFormat,Triamec.ICancelableProgress{Triamec.Firmware.FirmwareProgressState},System.Single)">
      <summary>
            Reads the firmware image from the specified stream according to the already detected format.
            </summary>
      <param name="firmware">The firmware file stream.</param>
      <param name="format">The firmware file format.</param>
      <param name="progress">The object to report progress.</param>
      <param name="fraction">The progress fraction at start.</param>
      <returns>The image and the new progress fraction.</returns>
    </member>
    <member name="P:Triamec.Tam.Firmware.CpuFirmwareDownloader.SlownessReason">
      <summary>
            Gets a reason why the download is slower than usual in the given context.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Firmware.DeviceFirmwareDownloader">
      <summary>
            This class associates a Firmware file
            to an <see cref="T:Triamec.Tam.TamDevice" />
            and manages the download of the file 
            to the <see cref="T:Triamec.Tam.TamDevice" /> through the micro-controller of the same <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.DeviceFirmwareDownloader.#ctor(Triamec.Firmware.IFlashArea,Triamec.Tam.TamDevice,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Triamec.Tam.Firmware.DeviceFirmwareDownloader" /> class.</summary>
      <param name="target">The target to program.</param>
      <param name="programmer">The device through which the <paramref name="target" /> will be programmed.</param>
      <param name="addressedFirmware">The index of the addressed firmware. Ignored in a
            <see cref="F:Triamec.TriaLink.FirmwareLocation.Base" />/<see cref="F:Triamec.TriaLink.FirmwareLocation.Application" /> 
            <see cref="P:Triamec.Tam.Firmware.StagedFirmwareDownloader.Infrastructure" />, where there are no secondary firmwares.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="programmer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.DeviceFirmwareDownloader.#ctor(Triamec.Tam.TamDevice)">
      <summary>Initializes a new instance of the <see cref="T:Triamec.Tam.Firmware.DeviceFirmwareDownloader" /> class.</summary>
      <param name="target">The target to program.</param>
      <param name="programmer">The device through which the <paramref name="target" /> will be programmed.</param>
      <param name="addressedFirmware">The index of the addressed firmware. Ignored in a
            <see cref="F:Triamec.TriaLink.FirmwareLocation.Base" />/<see cref="F:Triamec.TriaLink.FirmwareLocation.Application" /> 
            <see cref="P:Triamec.Tam.Firmware.StagedFirmwareDownloader.Infrastructure" />, where there are no secondary firmwares.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="programmer" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.DeviceFirmwareDownloader.ActivateFirmware(Triamec.TriaLink.FirmwareLocation)">
      <summary>
            Activates the firmware at a specified location.
            </summary>
      <param name="destination">The destination. Ignored in a <see cref="F:Triamec.TriaLink.FirmwareLocation.Factory" />/
            <see cref="F:Triamec.TriaLink.FirmwareLocation.Alternative" /> <see cref="P:Triamec.Tam.Firmware.StagedFirmwareDownloader.Infrastructure" />,
            where always the <see cref="F:Triamec.TriaLink.FirmwareLocation.Alternative" /> firmware is activated.</param>
      <exception cref="T:Triamec.Firmware.FirmwareException">
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>The device refused to activate the firmware.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.DeviceFirmwareDownloader.ActivateFirmware(Triamec.TriaLink.FirmwareLocation,Triamec.TriaLink.FirmwareLocation)">
      <summary>
            Activates the firmware at a specified location.
            </summary>
      <param name="destination">The firmware to switch to or to remain on.</param>
      <param name="affectedFirmware">The firmware which is verified and enabled if switched to,
            or which is deactivated if not <paramref name="destination" />.</param>
      <exception cref="T:Triamec.Firmware.FirmwareException">
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>The device refused to activate the firmware.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Firmware.DeviceFirmwareDownloader.Device">
      <summary>
            Gets the device where this <see cref="T:Triamec.Tam.Firmware.DeviceFirmwareDownloader" /> belongs to.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.DeviceFirmwareDownloader.GetTransferInformation(System.String[])">
      <summary>
            Gets information about the chosen firmware file as well as the download location.
            </summary>
      <param name="paths">The list of paths to the files containing firmwares.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="paths" /> is <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Firmware.FirmwareException">Getting information failed.</exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.DeviceFirmwareDownloader.ReadStartCode(Triamec.TriaLink.FirmwareLocation)">
      <summary>
            Gets a value indicating whether the start code of the specified firmware is set.
            </summary>
      <param name="destination">
            The destination. Ignored in a
            <see cref="F:Triamec.TriaLink.FirmwareLocation.Factory" />/<see cref="F:Triamec.TriaLink.FirmwareLocation.Alternative" /> 
            <see cref="P:Triamec.Tam.Firmware.StagedFirmwareDownloader.Infrastructure" />, where always the start code of the
            <see cref="F:Triamec.TriaLink.FirmwareLocation.Alternative" /> firmware is checked.
            </param>
      <returns>
        <see langword="true" /> if set; otherwise <see langword="false" />.</returns>
      <exception cref="T:Triamec.Firmware.FirmwareException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Firmware.DspFirmwareDownloader">
      <summary>
            Downloads DSP/FPGA composed firmware using the Tria-Link protocol.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.DspFirmwareDownloader.Compose(Triamec.Firmware.Composition.Package,System.String,Triamec.Firmware.Composition.FirmwareEntry,Triamec.Firmware.Composition.FirmwareEntry,System.String)">
      <summary>
            Composes a specific image from an FPGA and, optionally, a CPU image.
            </summary>
      <returns>The composed stream.</returns>
    </member>
    <member name="T:Triamec.Tam.Firmware.FirmwareFile">
      <summary>
            Representation of the Metadata and binary image data
            of a firmware file for a DSP-based device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.FirmwareFile.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Firmware.FirmwareFile" /> class.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.BootloaderImage">
      <summary>
            Gets or sets the binary image of the bootloader or <see langword="null" /> if not present.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.BootloaderImageData">
      <summary>
            Gets or sets the base64 encoded bootloader image data or <see langword="null" /> if not present.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.Company">
      <summary>
            Gets or sets the company.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.Copyright">
      <summary>
            Gets or sets the copyright.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.FirmwareFile.CreateDefaultInstance">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Firmware.FirmwareFile" /> class
            and initializes it with default metadata values.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.Date">
      <summary>
            Gets or sets the date.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.Description">
      <summary>
            Gets or sets the description.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.DspFirmwareId">
      <summary>
            Gets or sets the DSP firmware id.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.FirmwareFile.FIRMWARE_TAG_NAME">
      <summary>
            The XML tag name of the root tag.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.FirmwareDownloaderId">
      <summary>
            Gets or sets the firmware downloader id.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.FpgaFirmwareId">
      <summary>
            Gets or sets the FPGA firmware id.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.Guid">
      <summary>
            Gets or sets the <see cref="P:Triamec.Tam.Firmware.FirmwareFile.Guid" />,
            a unique identifier for a <see cref="T:Triamec.Tam.Firmware.FirmwareFile" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.Image">
      <summary>
            Gets or sets the binary image of the firmware.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.FirmwareFile.IMAGE_TAG_NAME">
      <summary>
            The XML tag name of the <see cref="P:Triamec.Tam.Firmware.FirmwareFile.Image" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.ImageData">
      <summary>
            Gets or sets the base64 encoded image data.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.IsochronousPeriod">
      <summary>
            Gets or sets the isochronous period.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.PeripheralFirmwares">
      <summary>
            Gets or sets additional firmwares to update peripheral devices.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.PeripheryLayoutId">
      <summary>
            Gets or sets the periphery register layout id.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.Product">
      <summary>
            Gets or sets the product.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.RegisterLayoutId">
      <summary>
            Gets or sets the register layout id.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.FirmwareFile.SIGNATURE_TAG_NAME">
      <summary>
            The XML tag name of the signature.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.TamaVirtualMachineId">
      <summary>
            Gets or sets the Tama virtual machine id.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.TargetHardwareRevisions">
      <summary>
            Gets or sets the supported target hardware revisions.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.TargetProductTypes">
      <summary>
            Gets or sets the supported target hardware types.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.FirmwareFile.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.FirmwareFile.Verify(System.String)">
      <summary>
            Verifies the signature of an XML firmware file.
            </summary>
      <param name="path">The path of the XML firmware file to verify.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="path" /> is <see langword="null" />.</para>
        <para>Internal error: can't retrieve the public key to verify the signature.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">
        <para>The signed XML file could not be loaded.</para>
        <para>The signed XML file does not contain one signature tag with the name of <see cref="F:Triamec.Tam.Firmware.FirmwareFile.SIGNATURE_TAG_NAME" />.</para>
        <para>The signed XML file does not contain a valid signature.</para>
        <para>The signature of the signed XML file could not be verified.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.FirmwareFile.VerifyAndLoad(System.IO.Stream)">
      <summary>
            Verifies the signature of an XML firmware file
            and loads it into a new instance of the <see cref="T:Triamec.Tam.Firmware.FirmwareFile" /> class.
            </summary>
      <param name="stream">The firmware XML to load.</param>
      <param name="path">The path of the XML firmware file to load.</param>
      <returns>
            Returns a new instance of the <see cref="T:Triamec.Tam.Firmware.FirmwareFile" /> class.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="path" /> is <see langword="null" />.</para>
        <para>Internal error: can't retrieve the public key to verify the signature.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">
        <para>The signed XML file could not be loaded.</para>
        <para>The signed XML file does not contain one signature tag with the name of
            	<see cref="F:Triamec.Tam.Firmware.FirmwareFile.SIGNATURE_TAG_NAME" />.</para>
        <para>The signed XML file does not contain a valid signature.</para>
        <para>The signature of the signed XML file could not be verified.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>The XML firmware file does not contain one tag with the name of <see cref="F:Triamec.Tam.Firmware.FirmwareFile.IMAGE_TAG_NAME" />.</para>
        <para>Failed to decode the base64 encoded image data of the firmware.</para>
        <para>Failed to deserialize the XML firmware file.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Firmware.FirmwareFile.VerifyAndLoad(System.String)">
      <summary>
            Verifies the signature of an XML firmware file
            and loads it into a new instance of the <see cref="T:Triamec.Tam.Firmware.FirmwareFile" /> class.
            </summary>
      <param name="path">The path of the XML firmware file to load.</param>
      <returns>
            Returns a new instance of the <see cref="T:Triamec.Tam.Firmware.FirmwareFile" /> class.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="path" /> is <see langword="null" />.</para>
        <para>Internal error: can't retrieve the public key to verify the signature.</para>
      </exception>
      <exception cref="T:System.Xml.XmlException">
        <para>The signed XML file could not be loaded.</para>
        <para>The signed XML file does not contain one signature tag with the name of
            	<see cref="F:Triamec.Tam.Firmware.FirmwareFile.SIGNATURE_TAG_NAME" />.</para>
        <para>The signed XML file does not contain a valid signature.</para>
        <para>The signature of the signed XML file could not be verified.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>The XML firmware file does not contain one tag with the name of <see cref="F:Triamec.Tam.Firmware.FirmwareFile.IMAGE_TAG_NAME" />.</para>
        <para>Failed to decode the base64 encoded image data of the firmware.</para>
        <para>Failed to deserialize the XML firmware file.</para>
      </exception>
    </member>
    <member name="T:Triamec.Tam.Firmware.FirmwareFileFormat">
      <summary>
            Different firmware file types detected by <see cref="M:Triamec.Tam.Firmware.CpuFirmwareDownloader.DetectFileType(System.IO.Stream)" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.FirmwareFileFormat.Binary">
      <summary>
            Binary stream.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.FirmwareFileFormat.SignedXml">
      <summary>
            Consistent with <see cref="T:Triamec.Tam.Firmware.FirmwareFile" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.FirmwareFileFormat.Package">
      <summary>
            Containerized format.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Firmware.IProduct">
      <summary>
            Represents a product.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.IProduct.PackageDownloader">
      <summary>
            Provides a means to update the firmware of this <see cref="T:Triamec.Tam.Firmware.IProduct" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.IProduct.ProductInfo">
      <summary>
            Gets information about the product.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.IProduct.SerialNumber">
      <summary>
            Gets the serial number of the product.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Firmware.MonitorFirmwareDownloader">
      <summary>
            Association of a Monitor firmware file to a <see cref="T:Triamec.Tam.Periphery.IPeripheryLayoutOwner" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.MonitorFirmwareDownloader.CheckFirmwareFile(System.String,System.IProgress{System.String})">
      <summary>
            Checks the given firmware file if it may be downloaded.
            </summary>
      <param name="firmwareFile">Path to the firmware file to check.</param>
      <param name="progress">The progress maintainer.</param>
      <returns>
        <see langword="null" /> if the check was successful; otherwise, a mismatch message.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Firmware.MonitorFirmwareDownloader.FileQueries">
      <summary>
            Indicates how to find matching firmware for this downloader.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.MonitorFirmwareDownloader.FirmwareDownloaderId">
      <summary>
            The Id of this <see cref="T:Triamec.Tam.Firmware.MonitorFirmwareDownloader" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.MonitorFirmwareDownloader.Infrastructure">
      <summary>
            Gets a value indicating the infrastructure used for managing firmware upgrades.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.MonitorFirmwareDownloader.MonBaseHeader">
      <summary>The string found in the S-Record block header of the Monitor device base image.
            <para>The value is <c>"BaseMon"</c>.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.MonitorFirmwareDownloader.MonBootLoaderHeader">
      <summary>The string found in the S-Record block header of the Monitor device boot loader image.
            <para>The value is <c>"MonBootLoader"</c>.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.MonitorFirmwareDownloader.MonitorFileExtension">
      <summary>
            Gets the file extension for STM firmware files.
            <para>The value is <c>"srec"</c>.</para></summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.MonitorFirmwareDownloader.ReadActiveFirmware">
      <summary>
            Reads the active firmware status.
            </summary>
      <returns>Returns the location of currently active firmware image.</returns>
      <exception cref="T:Triamec.Firmware.FirmwareException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Firmware.OptionModuleInfo">
      <summary>
            Identifies an option module.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.OptionModuleInfo.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates an instance of the <see cref="T:Triamec.Tam.Firmware.OptionModuleInfo" /> class.
            </summary>
      <param name="name">The name of the option module.</param>
      <param name="description">What the option module provides or accomplishes.</param>
      <param name="revision">The revision of the option module.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="name" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="description" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="revision" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Firmware.OptionModuleInfo.Description">
      <summary>
            Gets the short description of the option module.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.OptionModuleInfo.Name">
      <summary>
            Gets the name of the option module.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.OptionModuleInfo.Revision">
      <summary>
            Gets the option module revision number.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.OptionModuleInfo.ToString">
      <summary>
            Gets a short representation of the option module.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.OptionModuleInfo.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of this <see cref="T:Triamec.Tam.Firmware.OptionModuleInfo" /> using the specified format.
            </summary>
      <param name="format">
        <para>
          <c>"R"</c> to get the major revision number, including the major revisions from any installed option
            	modules.
            	</para>
        <para>-or-</para>
        <para>
          <c>"r"</c> to get the complete revision number, including revisions from any installed option modules.
            	</para>
        <para>-or-</para>
        <para>Any other <see langword="string" /> or <see langword="null" /> to use the default format.</para>
      </param>
      <param name="formatProvider">
        <para>The provider to use to format the value.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to obtain the numeric format information from the current locale setting of
            	the operating system.
            	</para>
      </param>
    </member>
    <member name="T:Triamec.Tam.Firmware.ProductInfo">
      <summary>
            Identification of a product for display and firmware update purposes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.ProductInfo.AllowUpdateWhenOperational">
      <summary>
            Gets a value indicating whether this product may receive a firmware update while in operational state.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.ProductInfo.FirmwareRelease">
      <summary>
            Gets the identifier of the firmware currently running on this product.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.ProductInfo.IsEthercat">
      <summary>
             Gets a value indicating whether the product supports the EtherCAT fieldbus.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.ProductInfo.Manufacturer">
      <summary>Gets the manufacturer of the product.</summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.ProductInfo.Name">
      <summary>
            Gets the product name.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.ProductInfo.OptionA">
      <summary>Gets information about the first installed option module.</summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.ProductInfo.OptionB">
      <summary>Gets information about the second installed option module.</summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.ProductInfo.Revision">
      <summary>
            Gets the product revision number.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.ProductInfo.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:Triamec.Tam.Firmware.ProductInfo.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of this <see cref="T:Triamec.Firmware.FirmwareUnit" /> using the specified format.
            </summary>
      <param name="format">
        <para>
          <c>"P"</c> to get the product name and the major revision number, including the major revisions from
            		any installed option modules.
            	</para>
        <para>-or-</para>
        <para>
          <c>"p"</c> to get the product name and complete revision number, including revisions from any
            		installed option modules.
            	</para>
        <para>-or-</para>
        <para>
          <c>"R"</c> to get the major revision number, including the major revisions from any installed option
            		modules.
            	</para>
        <para>-or-</para>
        <para>
          <c>"r"</c> to get the complete revision number, including revisions from any installed option
            		modules.
            	</para>
        <para>-or-</para>
        <para>
            		Any other <see langword="string" /> or <see langword="null" /> to use a default, verbose format.
            	</para>
      </param>
      <param name="formatProvider">
        <para>The provider to use to format the value.</para>
        <para>-or-</para>
        <para>
          <see langword="null" /> to obtain the numeric format information from the current locale setting of
            	the operating system.
            	</para>
      </param>
      <returns>The value of the current instance in the specified format.</returns>
    </member>
    <member name="T:Triamec.Tam.Firmware.StagedFirmwareDownloader">
      <summary>
            This class associates a Firmware file
            to a staged <see cref="T:Triamec.Firmware.IFlashArea" /> and manages the download of the file to the target.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.StagedFirmwareDownloader.#ctor(Triamec.Firmware.IFlashArea)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Firmware.StagedFirmwareDownloader" /> class.
            </summary>
      <param name="target">The flash area.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Firmware.StagedFirmwareDownloader.Infrastructure">
      <summary>
            Gets a value indicating the infrastructure used for managing firmware upgrades.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.StagedFirmwareDownloader.IsTargetIntact">
      <summary>
            Gets a value indicating whether the firmware is running normally on this flash area.
            </summary>
      <returns>
        <see langword="true" /> if <see cref="P:Triamec.Tam.Firmware.StagedFirmwareDownloader.Infrastructure" /> is <see cref="F:Triamec.TriaLink.FirmwareLocation.Factory" />.
            Otherwise, whether <see cref="M:Triamec.Tam.Firmware.StagedFirmwareDownloader.ReadActiveFirmware" /> returns <see cref="F:Triamec.TriaLink.FirmwareLocation.Application" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Firmware.StagedFirmwareDownloader.ReadActiveFirmware">
      <summary>
            Reads the active firmware status.
            </summary>
      <returns>Returns the location of currently active firmware image.</returns>
      <exception cref="T:Triamec.Firmware.FirmwareException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Firmware.StmFirmwareDownloader">
      <summary>
            Association of a STM firmware file to a <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.StmFirmwareDownloader.CheckFirmwareFile(System.String,System.IProgress{System.String})">
      <summary>
            Checks the given firmware file if it may be downloaded.
            </summary>
      <param name="firmwareFile">Path to the firmware file to check.</param>
      <param name="progress">The progress maintainer.</param>
      <returns>
        <see langword="null" /> if the check was successful; otherwise, a mismatch message.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Firmware.StmFirmwareDownloader.FileQueries">
      <summary>
            Indicates how to find matching firmware for this downloader.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.StmFirmwareDownloader.FirmwareDownloaderId">
      <summary>
            The Id of this <see cref="T:Triamec.Tam.Firmware.StmFirmwareDownloader" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Firmware.StmFirmwareDownloader.Infrastructure">
      <summary>
            Gets a value indicating the infrastructure used for managing firmware upgrades.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.StmFirmwareDownloader.PalBaseHeader">
      <summary>The string found in the S-Record block header of the PALbus device base image.
            <para>The value is <c>"PalBase"</c>.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Firmware.StmFirmwareDownloader.PalBootloaderHeader">
      <summary>The string found in the S-Record block header of the PALbus device boot loader image.
            <para>The value is <c>"PalBootLoader"</c>.</para></summary>
    </member>
    <member name="M:Triamec.Tam.Firmware.StmFirmwareDownloader.ReadActiveFirmware">
      <summary>
            Reads the active firmware status.
            </summary>
      <returns>Returns the location of currently active firmware image.</returns>
      <exception cref="T:Triamec.Firmware.FirmwareException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Modules.ActivityState">
      <summary>
            The activity states of a <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Modules.ActivityState.Inactive">
      <summary>The inactive activityState.</summary>
    </member>
    <member name="F:Triamec.Tam.Modules.ActivityState.Active">
      <summary>The active activityState.</summary>
    </member>
    <member name="F:Triamec.Tam.Modules.ActivityState.Locked">
      <summary>The locked activityState.</summary>
    </member>
    <member name="T:Triamec.Tam.Modules.IModuleComponent">
      <summary>
            Interface for TAM module components,
            which are the building blocks of TAM modules.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.IModuleComponent.ActivityLevel">
      <summary>
            Gets the current activity level of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.IModuleComponent.ActivityState">
      <summary>
            Gets the current activityState of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.IModuleComponent.ApplyParameters(System.Boolean)">
      <summary>
            Recursively applies the <see cref="P:Triamec.Tam.Modules.IModuleComponent.Parameters" /> of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
      <param name="force">A flag that indicates whether to force applying parameters.
            If set to <see langword="false" />, a parameter will only be applied
            if its property value is different from its applied value.
            Otherwise, the parameter values will be applied unconditionally.</param>
      <returns>Whether all parameters were applied.</returns>
      <exception cref="T:Triamec.Tam.TamException">One ore more parameters could not be applied regularly.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.IModuleComponent.ApplyParameters(System.Boolean,System.String[])">
      <summary>
            Applies the parameters matching the specified parameter names.
            </summary>
      <param name="force">A flag that indicates whether to force applying parameters.
            If set to <see langword="false" />, a parameter will only be applied
            if its property value is different from its applied value.
            Otherwise, the parameter values will be applied unconditionally.</param>
      <param name="parameters">The name of the parameters.</param>
      <returns>Whether all parameters were applied.</returns>
      <exception cref="T:Triamec.Tam.TamException">Parameter/s not found or not applicable. </exception>
    </member>
    <member name="M:Triamec.Tam.Modules.IModuleComponent.BeginUpdate">
      <summary>
            Begins an update transaction,
            deferring <see cref="E:Triamec.Tam.Modules.IModuleComponent.ModuleComponentChanged" />events
            to the next call of <see cref="M:Triamec.Tam.Modules.IModuleComponent.EndUpdate" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.IModuleComponent.CountDescending(Triamec.Tam.Modules.ActivityState,System.Boolean)">
      <summary>
            Counts all <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s
            with a specific <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" />,
            counting among this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            and all its descenants.
            </summary>
      <param name="activityStateToCount">The <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" /> of <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s to count.</param>
      <param name="countEquals">Flag to negate the search: when set to <see langword="true" />,
            counts <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s in the given <paramref name="activityStateToCount" />.
            When set to <see langword="false" />,
            counts <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s not in the given <paramref name="activityStateToCount" />.</param>
      <returns>
            Returns the number of <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            where the <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" /> matches the search criterion given by
            <paramref name="activityStateToCount" /> and <paramref name="countEquals" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Modules.IModuleComponent.CreateControl">
      <summary>
            Factory method providing a <see cref="T:System.Windows.Forms.Control" /> that may be displayed by a GUI application.
            </summary>
      <returns>The instantiated control.
            <para>The default is <see langword="null" />.</para></returns>
    </member>
    <member name="P:Triamec.Tam.Modules.IModuleComponent.Description">
      <summary>
            Gets the description of this <see cref="T:Triamec.Tam.Modules.IModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.IModuleComponent.EndUpdate">
      <summary>
            Ends an update transaction
            of a previous call of <see cref="M:Triamec.Tam.Modules.IModuleComponent.BeginUpdate" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.IModuleComponent.InUpdateTransaction">
      <summary>
            Gets a value indicating whether in an update transaction.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Modules.IModuleComponent.ModuleComponentActivityStateChanged">
      <summary>
            Event raised whenever this <see cref="T:Triamec.Tam.Modules.IModuleComponent" /> 
            changed its <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" /> state or <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityLevel" />.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Modules.IModuleComponent.ModuleComponentChanged">
      <summary>
            Event raised whenever this <see cref="T:Triamec.Tam.Modules.IModuleComponent" /> itself changed,
            or when the <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" /> property
            has been set for any of its <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />s.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Modules.IModuleComponent.ParameterApplied">
      <summary>
            Event raised whenever any of the <see cref="P:Triamec.Tam.Modules.IModuleComponent.Parameters" /> has been applied.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.IModuleComponent.Parameters">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> of this <see cref="T:Triamec.Tam.Modules.IModuleComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.IModuleComponent.ProvidesControl">
      <summary>
            Gets a value indicating whether a specific implementation of this abstract
            <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> provides 
            a <see cref="T:System.Windows.Forms.Control" /> that may be displayed by a GUI application.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.IModuleComponent.RequiresPolling">
      <summary>
            Indicates whether the <see cref="E:Triamec.Tam.Modules.IModuleComponent.ModuleComponentActivityStateChanged" /> event is only called when accessing
            the <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" /> or <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityLevel" /> properties, in case of changes.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.IModuleComponent.Revert">
      <summary>
            Reverts this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.IModuleComponentParent">
      <summary>
            The parent of an <see cref="T:Triamec.Tam.Modules.IModuleComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.IModuleComponentParent.Device">
      <summary>
            Gets the reflexive, transitive ancestor <see cref="T:Triamec.Tam.TamDevice" /> of this instance.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.ITamModule">
      <summary>
            Interface for TAM modules.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ITamModule.Info">
      <summary>
            Gets or sets the meta information that can be used to instantiate this module.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.ModuleComponent">
      <summary>
            Abstract base class for TAM module components,
            which are the building blocks of TAM modules.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.#ctor(Triamec.Tam.Modules.ModuleComponent,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> class.
            </summary>
      <param name="parentComponent">The parent TAM component.</param>
      <param name="parentPropertyName">Name of the property within <paramref name="parentComponent" />
            to access this instance.</param>
      <param name="name">The name to assign to this TAM component.</param>
      <param name="description">The description of the TAM component.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="parentComponent" /> is <see langword="null" />.</para>
        <para>
          <paramref name="parentPropertyName" /> is <see langword="null" />.</para>
        <para>
          <paramref name="name" /> is <see langword="null" />.</para>
        <para>
          <paramref name="description" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">No public property with name <paramref name="parentPropertyName" />
            exists in the <paramref name="parentComponent" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.Activate(System.Int32)">
      <summary>
            Tries to activate this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
      <param name="activityLevel">The activity level to set.
            The value must be greater than zero.</param>
      <returns>
            Returns <see cref="F:Triamec.Tam.Modules.ActivityState.Active" />
            when the <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> could be activated;
            otherwise, returns the new <see cref="P:Triamec.Tam.Modules.ModuleComponent.ActivityState" />.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.ActivityLevel">
      <summary>
            Gets the current activity level of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.ActivityState">
      <summary>
            Gets the current activityState of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.ApplyParameters(System.Boolean)">
      <summary>
            Recursively applies the <see cref="P:Triamec.Tam.Modules.IModuleComponent.Parameters" /> of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
      <param name="force">A flag that indicates whether to force applying parameters.
            If set to <see langword="false" />, a parameter will only be applied
            if its property value is different from its applied value.
            Otherwise, the parameter values will be applied unconditionally.</param>
      <returns>Whether all parameters were applied.</returns>
      <exception cref="T:Triamec.Tam.TamException">One ore more parameters could not be applied regularly.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.ApplyParameters(System.Boolean,System.String[])">
      <summary>
            Applies the parameters matching the specified parameter names.
            </summary>
      <param name="force">A flag that indicates whether to force applying parameters.
            If set to <see langword="false" />, a parameter will only be applied
            if its property value is different from its applied value.
            Otherwise, the parameter values will be applied unconditionally.</param>
      <param name="parameters">The name of the parameters.</param>
      <returns>Whether all parameters were applied.</returns>
      <exception cref="T:Triamec.Tam.TamException">Parameter/s not found or not applicable. </exception>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.BeginUpdate">
      <summary>
            Begins an update transaction,
            deferring <see cref="E:Triamec.Tam.Modules.IModuleComponent.ModuleComponentChanged" />events
            to the next call of <see cref="M:Triamec.Tam.Modules.IModuleComponent.EndUpdate" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.ConvertParameters">
      <summary>
            Recursively converts the <see cref="P:Triamec.Tam.Modules.ModuleComponent.Parameters" /> of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.CountDescending(Triamec.Tam.Modules.ActivityState,System.Boolean)">
      <summary>
            Counts all <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s
            with a specific <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" />,
            counting among this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            and all its descenants.
            </summary>
      <param name="activityStateToCount">The <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" /> of <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s to count.</param>
      <param name="countEquals">Flag to negate the search: when set to <see langword="true" />,
            counts <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s in the given <paramref name="activityStateToCount" />.
            When set to <see langword="false" />,
            counts <see cref="T:Triamec.Tam.Modules.ModuleComponent" />s not in the given <paramref name="activityStateToCount" />.</param>
      <returns>
            Returns the number of <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            where the <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" /> matches the search criterion given by
            <paramref name="activityStateToCount" /> and <paramref name="countEquals" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.CreateControl">
      <summary>
            Factory method providing a <see cref="T:System.Windows.Forms.Control" /> that may be displayed by a GUI application.
            </summary>
      <returns>The instantiated control.
            <para>The default is <see langword="null" />.</para></returns>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.CustomImage">
      <summary>
            Gets the custom <see cref="T:System.Drawing.Image" />
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.Description">
      <summary>
            Gets the description of this <see cref="T:Triamec.Tam.Modules.IModuleComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.Device">
      <summary>
            Gets the reflexive, transitive ancestor <see cref="T:Triamec.Tam.TamDevice" /> of this instance.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; 
            <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.EndUpdate">
      <summary>
            Ends an update transaction
            of a previous call of <see cref="M:Triamec.Tam.Modules.IModuleComponent.BeginUpdate" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.Inactivate">
      <summary>
            Tries to inactivate this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
      <returns>
            Returns <see cref="F:Triamec.Tam.Modules.ActivityState.Inactive" />
            when the <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> could be inactivated;
            otherwise, returns the new <see cref="P:Triamec.Tam.Modules.ModuleComponent.ActivityState" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.InitializeParameters(Triamec.Tam.Registers.IRegisterComponent)">
      <summary>
            Creates the <see cref="P:Triamec.Tam.Modules.ModuleComponent.Parameters" />
            for properties of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            with a <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />,
            and optionally maps them to <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s.
            </summary>
      <param name="mappedRegisterRoot">
            The root register where to start the depth first recursive search for registers to map.
            </param>
      <param name="filter">An optional predicate to filter out some of the parameters. </param>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.InitializeParameters(Triamec.Tam.Registers.IRegisterComponent,System.Predicate{Triamec.Tam.Modules.TamComponentParameter})">
      <summary>
            Creates the <see cref="P:Triamec.Tam.Modules.ModuleComponent.Parameters" />
            for properties of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            with a <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />,
            and optionally maps them to <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s.
            </summary>
      <param name="mappedRegisterRoot">
            The root register where to start the depth first recursive search for registers to map.
            </param>
      <param name="filter">An optional predicate to filter out some of the parameters. </param>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.InUpdateTransaction">
      <summary>
            Gets a value indicating whether in an update transaction.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.MappedRegisterRoot">
      <summary>
            Gets the root register
            used in <see cref="M:Triamec.Tam.Modules.ModuleComponent.InitializeParameters(Triamec.Tam.Registers.IRegisterComponent)" />.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Modules.ModuleComponent.ModuleComponentActivityStateChanged">
      <summary>
            Event raised whenever this <see cref="T:Triamec.Tam.Modules.IModuleComponent" /> 
            changed its <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" /> state or <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityLevel" />.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Modules.ModuleComponent.ModuleComponentChanged">
      <summary>
            Event raised whenever this <see cref="T:Triamec.Tam.Modules.IModuleComponent" /> itself changed,
            or when the <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" /> property
            has been set for any of its <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.Name">
      <summary>
            Gets or sets the display name of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>
          <see cref="P:Triamec.Tam.ITamNode.CanEditName" /> == <see langword="false" /></c>.
              </exception>
      <exception cref="T:System.ArgumentException">
        <para>Another <see cref="T:Triamec.Tam.ITamNode" /> in the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />'s
              <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" /> has the same <see cref="P:Triamec.Tam.ITamNode.Name" />.</para>
        <para>-or-</para>
        <para>The value contains any of the characters in <see cref="F:Triamec.Tam.TamTopology.InvalidNameChars" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.OnApplyParameters">
      <summary>
            Hook for component specific parameter apply method.
            This hook is called during parameter apply operation.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">One or more parameters could not be applied.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.OnConvertDerivedParameters">
      <summary>
            Hook for component specific derived parameter calculation method.
            This hook is called during parameter apply operation.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.OnParameterApplied(Triamec.Tam.Modules.TamComponentParameter,System.Object)">
      <summary>
            Raises the <see cref="E:Triamec.Tam.Modules.ModuleComponent.ParameterApplied" /> event.
            </summary>
      <param name="parameter">The parameter that has been applied.</param>
      <param name="appliedValue">The value applied to <paramref name="parameter" />.</param>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.OnRetrieveActivityLevel(System.Int32)">
      <summary>
            Called whenever <see cref="P:Triamec.Tam.Modules.ModuleComponent.ActivityLevel" /> or <see cref="P:Triamec.Tam.Modules.ModuleComponent.ActivityState" /> is read.
            </summary>
      <param name="currentLevel">The current value of <see cref="P:Triamec.Tam.Modules.ModuleComponent.ActivityLevel" />.</param>
    </member>
    <member name="E:Triamec.Tam.Modules.ModuleComponent.ParameterApplied">
      <summary>
            Event raised whenever any of the <see cref="P:Triamec.Tam.Modules.IModuleComponent.Parameters" /> has been applied.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.Parameters">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.ParametersByName">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> of this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.ParentProperty">
      <summary>
            Gets the info of the property within the <see cref="P:Triamec.Tam.ITamNode.ParentNode" />
            that returns this instance.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.ProvidesControl">
      <summary>
            Gets a value indicating whether a specific implementation of this abstract
            <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> provides 
            a <see cref="T:System.Windows.Forms.Control" /> that may be displayed by a GUI application.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.RaiseModuleComponentChangedEvent">
      <summary>
            Raises the <see cref="E:Triamec.Tam.Modules.ModuleComponent.ModuleComponentChanged" /> event.
            This event must be raised whenever this <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> itself changed,
            or when the <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" /> property
            has been set for any of its <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.RaiseModuleComponentChangedEvent(System.String)">
      <summary>
            Raises the <see cref="E:Triamec.Tam.Modules.ModuleComponent.ModuleComponentChanged" /> event.
            This event must be raised whenever this <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> itself changed,
            or when the <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" /> property
            has been set for any of its <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />s.
            </summary>
      <param name="parameterName">Name of one of the <see cref="P:Triamec.Tam.Modules.ModuleComponent.Parameters" /> to raise the event for,
            or <see langword="null" /> when to raise the event for the <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> as a whole.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterName" /> is not <see langword="null" /> 
            but not the name of any of the <see cref="P:Triamec.Tam.Modules.ModuleComponent.Parameters" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponent.RequiresPolling">
      <summary>
            Indicates whether the <see cref="E:Triamec.Tam.Modules.IModuleComponent.ModuleComponentActivityStateChanged" /> event is only called when accessing
            the <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityState" /> or <see cref="P:Triamec.Tam.Modules.IModuleComponent.ActivityLevel" /> properties, in case of changes.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.Revert">
      <summary>
            Reverts this <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponent.SetParameter(System.String,System.Object)">
      <summary>
            Sets the parameter with given name.
            </summary>
      <param name="parameterName">The name of the parameter to set.</param>
      <param name="value">The new value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameterName" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterName" /> is not the name of any of the <see cref="P:Triamec.Tam.Modules.ModuleComponent.Parameters" />.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs">
      <summary>
            Arguments propogated with the <see cref="T:Triamec.Tam.Modules.ModuleComponent" />'s
            <see cref="E:Triamec.Tam.Modules.ModuleComponent.ModuleComponentActivityStateChanged" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.ActivityLevel">
      <summary>
            Gets the current activity level of the <see cref="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.Component" /> that raised the event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.ActivityState">
      <summary>
            Gets the current activitiyState of the <see cref="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.Component" /> that raised the event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.Component">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> that raised the event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.OldActivityLevel">
      <summary>
            Gets the no longer actual activity level of the <see cref="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.Component" /> that raised the event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.OldActivityState">
      <summary>
            Gets the no longer actual activityState of the <see cref="P:Triamec.Tam.Modules.ModuleComponentActivityStateChangedEventArgs.Component" /> that raised the event.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.ModuleComponentChangedEventArgs">
      <summary>
            Arguments propogated with the <see cref="T:Triamec.Tam.Modules.ModuleComponent" />'s
            <see cref="E:Triamec.Tam.Modules.ModuleComponent.ModuleComponentChanged" />event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentChangedEventArgs.Component">
      <summary>
            Get the <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> that raised the event.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentChangedEventArgs.Parameter">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> that caused the event,
            or <see langword="null" /> if the event was not caused by a parameter.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.ModuleComponentInfo">
      <summary>
            Factory for and metadata of a <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleComponentInfo.#ctor(System.Type,Triamec.Tam.Modules.ModuleComponentInfo,System.Reflection.PropertyInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.ModuleComponentInfo" /> class.
            </summary>
      <param name="moduleComponentType">Type of the TAM module component.</param>
      <param name="parent">The info of the parent component where this <see cref="T:Triamec.Tam.Modules.ModuleComponentInfo" /> belongs to,
            or <see langword="null" /> in case of a <see cref="T:Triamec.Tam.Modules.TamModuleInfo" /> with no parent.</param>
      <param name="parentProperty">The info of the property of this <see cref="T:Triamec.Tam.Modules.ModuleComponentInfo" /> within its <paramref name="parent" />,
            or <see langword="null" /> in case of a <see cref="T:Triamec.Tam.Modules.TamModuleInfo" /> with no parent.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="moduleComponentType" /> is <see langword="null" />.</para>
        <para>
          <paramref name="parent" /> is <see langword="null" /> but <paramref name="parentProperty" /> is not.</para>
        <para>
          <paramref name="parentProperty" /> is <see langword="null" /> but <paramref name="parent" /> is not.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleComponentType" /> is not derived from <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentInfo.ChildComponentInfo">
      <summary>
            Gets the metadata of the TAM module components that belong to this <see cref="T:Triamec.Tam.Modules.ModuleComponentInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentInfo.Description">
      <summary>
            Gets the description of the TAM module.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentInfo.ModuleComponentType">
      <summary>
            Gets the type of the TAM module.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentInfo.ParameterInfo">
      <summary>
            Gets the metadata of the TAM parameters that belong to this <see cref="T:Triamec.Tam.Modules.ModuleComponentInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentInfo.Parent">
      <summary>
            Gets the info of the parent component where this <see cref="T:Triamec.Tam.Modules.ModuleComponentInfo" /> belongs to,
            or <see langword="null" /> in case of a <see cref="T:Triamec.Tam.Modules.TamModuleInfo" /> with no parent.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentInfo.ParentProperty">
      <summary>
            Gets the info of the property of this <see cref="T:Triamec.Tam.Modules.ModuleComponentInfo" /> within its <see cref="P:Triamec.Tam.Modules.ModuleComponentInfo.Parent" />,
            or <see langword="null" /> in case of a <see cref="T:Triamec.Tam.Modules.TamModuleInfo" /> with no parent.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleComponentInfo.TamModuleImage">
      <summary>
            Gets the 16x16 bitmap image to use for <see cref="P:Triamec.Tam.Modules.ModuleComponentInfo.ModuleComponentType" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.ModuleManager">
      <summary>
            Manager for the dynamic loading of <see cref="T:Triamec.Tam.Modules.TamModule" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleManager.Clear">
      <summary>
            Clears all <see cref="T:Triamec.Tam.Modules.TamModule" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleManager.GetApplicableModules(Triamec.Tam.ITamDevice)">
      <summary>
            Gets the TAM modules that can be associated to the specified <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <param name="tamDevice">The TAM device to examine.</param>
      <returns>Returns a list of <see cref="T:Triamec.Tam.Modules.TamModuleInfo" />s
            that can be associated to <paramref name="tamDevice" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleManager.Instance">
      <summary>
            Gets the singleton <see cref="T:Triamec.Tam.Modules.ModuleManager" /> instance.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleManager.ModulePath">
      <summary>Gets the default path where <see cref="T:Triamec.Tam.Modules.TamModule" />s are located.</summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ModuleManager.Modules">
      <summary>Gets all TAM modules known to this <see cref="T:Triamec.Tam.Modules.ModuleManager" />.</summary>
    </member>
    <member name="M:Triamec.Tam.Modules.ModuleManager.Refresh">
      <summary>Refreshes the private list of modules.</summary>
      <returns>A list of exceptions occurred during refresh, or an empty list if there are no errors.</returns>
    </member>
    <member name="T:Triamec.Tam.Modules.ParameterAppliedEventArgs">
      <summary>
            Arguments propogated with the <see cref="T:Triamec.Tam.Modules.ModuleComponent" />'s
            <see cref="E:Triamec.Tam.Modules.ModuleComponent.ParameterApplied" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ParameterAppliedEventArgs.AppliedValue">
      <summary>
            Gets the value applied to <see cref="P:Triamec.Tam.Modules.ParameterAppliedEventArgs.Parameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ParameterAppliedEventArgs.Component">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> that raised the event
            and that is the owner of <see cref="P:Triamec.Tam.Modules.ParameterAppliedEventArgs.Parameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.ParameterAppliedEventArgs.Parameter">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> that has been applied.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.TamComponentParameter">
      <summary>
            Fundamental parameter of a <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.TamComponentParameter.#ctor(Triamec.Tam.Modules.ModuleComponent,System.Reflection.PropertyInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> class.
            </summary>
      <param name="ownerComponent">The owner <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            where this parameter belongs to.</param>
      <param name="propertyInfo">The property info of the TAM component parameter.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="ownerComponent" /> or <paramref name="propertyInfo" />
            is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="propertyInfo" /> specifies a property
            without a <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.AppliedValueAsObject">
      <summary>
            Gets the applied value of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> can be read.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> can write.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.Category">
      <summary>
            Gets the category of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.Description">
      <summary>
            Gets the description of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.Hide">
      <summary>
            Gets a value indicating whether to hide this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> in UI presentations.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.IsDerived">
      <summary>
            Indicates whether this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> is derived from other parameters or a register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.IsModified">
      <summary>
            Gets a value indicating whether the property <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" />
            is different from the <see cref="P:Triamec.Tam.Modules.TamComponentParameter.AppliedValueAsObject" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.IsObsolete">
      <summary>
            Gets a value indicating whether this parameter is obsolete.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.TamComponentParameter.IsValueModified(System.Object)">
      <summary>
            Gets a value indicating whether the property <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" />
            is different from the the specified value.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.MappedRegister">
      <summary>
            Gets the register mapped to this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.MaxLevel">
      <summary>
            Gets the maximum activity level 
            for this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.MinLevel">
      <summary>
            Gets the minimum activity level 
            for this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.Name">
      <summary>
            Gets the name of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.OwnerComponent">
      <summary>
            Gets the owner <see cref="T:Triamec.Tam.Modules.ModuleComponent" /> 
            where this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.Unit">
      <summary>
            Gets the physical unit of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject">
      <summary>
            Reads or writes the value of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
      <exception cref="T:System.Reflection.TargetInvocationException">
            	Module code threw an exception.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Modules.TamComponentParameter.ValueType">
      <summary>
            Gets the data type of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.TamModule">
      <summary>
            Abstract base class for TAM modules
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.TamModule.#ctor(Triamec.Tam.Modules.IModuleComponentParent,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.TamModule" /> class.
            </summary>
      <param name="parent">The <see cref="T:Triamec.Tam.TamDevice" /> where this <see cref="T:Triamec.Tam.Modules.TamModule" /> belongs to.</param>
      <param name="name">The name to assign to this TAM module.</param>
      <param name="description">The description of the TAM module.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="parent" /> is <see langword="null" />.</para>
        <para>
          <paramref name="name" /> is <see langword="null" />.</para>
        <para>
          <paramref name="description" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">No public property with name <see cref="F:Triamec.Tam.Modules.TamModule.ModulePropertyName" />
            exists in the <paramref name="parent" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.TamModule.#ctor(Triamec.Tam.Modules.IModuleComponentParent,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.TamModule" /> class.
            </summary>
      <param name="parent">The parent node.</param>
      <param name="parentPropertyName">Name of the property within <paramref name="parent" />
            to access this instance.</param>
      <param name="name">The name to assign to this TAM component.</param>
      <param name="description">The description of the TAM component.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="parent" /> is <see langword="null" />.</para>
        <para>
          <paramref name="parentPropertyName" /> is <see langword="null" />.</para>
        <para>
          <paramref name="name" /> is <see langword="null" />.</para>
        <para>
          <paramref name="description" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">No public property with name <paramref name="parentPropertyName" />
            exists in the <paramref name="parent" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.TamModule.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="P:Triamec.Tam.Modules.TamModule.Info">
      <summary>
            Gets the meta information that can be used to instantiate this module.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Modules.TamModule.IsApplicableToMethodName">
      <summary>
            The name of the static method
            that must be provided by classes derived from <see cref="T:Triamec.Tam.Modules.TamModule" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Modules.TamModule.ModulePropertyName">
      <summary>
        <para>The name of the property in <see cref="T:Triamec.Tam.TamDevice" /> a <see cref="T:Triamec.Tam.Modules.TamModule" /> is assigned to.
            	</para>
        <para>The value is <c>"Module"</c>.</para>
      </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamModule.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.TamModuleCatalogAttribute">
      <summary>
            Attribute for assemblies providing <see cref="T:Triamec.Tam.Modules.TamModule" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.TamModuleCatalogAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.TamModuleCatalogAttribute" /> class.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.TamModuleInfo">
      <summary>
            Factory for and metadata of a <see cref="T:Triamec.Tam.Modules.TamModule" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.TamModuleInfo.CreateInstance(Triamec.Tam.ITamDevice)">
      <summary>
            Creates a new instance of <see cref="P:Triamec.Tam.Modules.ModuleComponentInfo.ModuleComponentType" />.
            </summary>
      <param name="tamDevice">The TAM device to provide to the constructor.</param>
      <returns>Returns a new instance of <see cref="P:Triamec.Tam.Modules.ModuleComponentInfo.ModuleComponentType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tamDevice" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.TamModuleInfo.GetInstance(System.Type)">
      <summary>
            Gets the singleton instance of a <see cref="T:Triamec.Tam.Modules.TamModuleInfo" />
            for a given <see cref="T:Triamec.Tam.Modules.TamModule" /> type.
            </summary>
      <param name="tamModuleType">The type of the <see cref="T:Triamec.Tam.Modules.TamModule" />.</param>
      <returns>Returns the singleton instance of a <see cref="T:Triamec.Tam.Modules.TamModuleInfo" />
            for the given <paramref name="tamModuleType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tamModuleType" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tamModuleType" />
        <list type="bullet">
          <item>
            <description>is not derived from <see cref="T:Triamec.Tam.Modules.TamModule" />;</description>
          </item>
          <item>
            <description>does not implement the mandatory static method
            with the name specified by <see cref="F:Triamec.Tam.Modules.TamModule.IsApplicableToMethodName" />,
            that takes a <see cref="T:Triamec.Tam.TamDevice" /> as the only parameter
            and returns a <see cref="T:System.Boolean" /> indicating
            if the <see cref="T:Triamec.Tam.Modules.TamModule" /> can be associated to the given <see cref="T:Triamec.Tam.TamDevice" />;</description>
          </item>
          <item>
            <description>does not provide a constructor with a <see cref="T:Triamec.Tam.TamDevice" /> as the only parameter.
            </description>
          </item>
        </list>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Modules.TamModuleInfo.IsApplicableTo(Triamec.Tam.ITamDevice)">
      <summary>
            Determines whether <see cref="P:Triamec.Tam.Modules.ModuleComponentInfo.ModuleComponentType" /> 
            can be associated to the specified TAM device.
            </summary>
      <param name="tamDevice">The TAM device to examine.</param>
      <returns>
        <see langword="true" /> if the specified TAM device is applicable to
            	<see cref="P:Triamec.Tam.Modules.ModuleComponentInfo.ModuleComponentType" />;  otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tamDevice" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:Triamec.Tam.Modules.TamNonUserBackedParameter">
      <summary>
            A parameter which backs <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" /> by itself.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.TamParameterAttribute">
      <summary>
            Attribute for TAM parameter properties of a <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.TamParameterAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" /> class.
            </summary>
      <param name="unit">The physical unit of the parameter.</param>
      <param name="forceReadonly">
            If set to <see langword="true" />, marks this TAM parameter as readonly, even if the attributed property has
            a setter method.
            </param>
    </member>
    <member name="M:Triamec.Tam.Modules.TamParameterAttribute.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" /> class.
            </summary>
      <param name="unit">The physical unit of the parameter.</param>
      <param name="forceReadonly">
            If set to <see langword="true" />, marks this TAM parameter as readonly, even if the attributed property has
            a setter method.
            </param>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.Category">
      <summary>
            Gets or sets the category of this <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.Description">
      <summary>
            Gets or sets the description of this <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.ForceReadonly">
      <summary>
            Gets a value indicating whether to enforce readonly access to this TAM parameter,
            even if the attributed property has a setter method.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.Hide">
      <summary>
            Gets a value indicating whether to hide this TAM parameter in UI presentations.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.IsDerived">
      <summary>
            Gets or sets indicator if parameter is derived from other parameters.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.MaxLevel">
      <summary>
            Gets or sets the maximum activity level for this <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.MinLevel">
      <summary>
            Gets or sets the minimum activity level for this <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.Name">
      <summary>
            Gets the name of this <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.RegisterTagKey">
      <summary>
            Gets or sets the tag key
            of a <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            to map the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> 
            defined by this <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" /> to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.RegisterTagValue">
      <summary>
            Gets or sets the tag value
            of a <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            to map the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> 
            defined by this <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" /> to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterAttribute.Unit">
      <summary>
            Gets the physical unit of this <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.TamParameterInfo">
      <summary>
            Metadata of a <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.TamParameterInfo.#ctor(Triamec.Tam.Modules.ModuleComponentInfo,System.Reflection.PropertyInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.TamParameterInfo" /> class.
            </summary>
      <param name="owner">The info of the parent component where this parameter info belongs to.</param>
      <param name="owningProperty">The info of the property of this TAM component parameter within its <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is <see langword="null" />.
            	<paramref name="owningProperty" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.CanRead">
      <summary>
            Gets a value indicating whether the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />
            described by this <see cref="T:Triamec.Tam.Modules.TamParameterInfo" /> can be read.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.CanWrite">
      <summary>
            Gets a value indicating whether the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />
            described by this <see cref="T:Triamec.Tam.Modules.TamParameterInfo" /> can be written.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.Category">
      <summary>
            Gets the category of the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> described by this
            <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.Description">
      <summary>
            Gets the description of the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> described by this
            <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.Hide">
      <summary>
            Gets a value indicating whether to hide the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />
            described by this <see cref="T:Triamec.Tam.Modules.TamParameterInfo" /> in UI presentations.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.MaxLevel">
      <summary>
            Gets the maximum activity level for the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> described by this
            <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.MinLevel">
      <summary>
            Gets the minimum activity level 
            for the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />
            described by this <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.Name">
      <summary>
            Gets the name of the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> described by this <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.Owner">
      <summary>
            Gets the info of the parent <see cref="T:Triamec.Tam.Modules.ModuleComponentInfo" />
            where this <see cref="T:Triamec.Tam.Modules.TamParameterInfo" /> belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.PropertyInfo">
      <summary>
            Gets the property info decorated by this <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.TamParameterAttribute">
      <summary>
            Gets the TAM parameter attribute decorated by this <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.Unit">
      <summary>
            Gets the physical unit of the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> described by this
            <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamParameterInfo.ValueType">
      <summary>
            Gets the data type of the <see cref="T:Triamec.Tam.Modules.TamComponentParameter" /> described by this
            <see cref="T:Triamec.Tam.Modules.TamParameterInfo" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.TamRefParameter`1">
      <summary>
            Backing store for a reference type module parameter.
            </summary>
      <typeparam name="T">The <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueType" />.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Modules.TamRefParameter`1.#ctor(Triamec.Tam.Modules.ModuleComponent,System.Reflection.PropertyInfo)">
      <summary>
            Initializes an instance of the <see cref="T:Triamec.Tam.Modules.TamRefParameter`1" /> class.
            </summary>
      <param name="ownerComponent">The owner <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            where this parameter belongs to.</param>
      <param name="propertyInfo">The property info of the TAM component parameter.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="ownerComponent" /> or <paramref name="propertyInfo" />
            is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="propertyInfo" /> specifies a property
            without a <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Modules.TamRefParameter`1.AppliedValue">
      <summary>
            Gets <see cref="P:Triamec.Tam.Modules.TamComponentParameter.AppliedValueAsObject" /> in a strongly typed manner.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamRefParameter`1.Value">
      <summary>
            Gets <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" /> in a strongly typed manner.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamRefParameter`1.ValueAsObject">
      <summary>
            Reads or writes the value of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
      <exception cref="T:System.Reflection.TargetInvocationException">
            	Module code threw an exception.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Modules.TamValParameter`1">
      <summary>
            Backing store for a <see cref="T:System.ValueType" /> module parameter.
            </summary>
      <typeparam name="T">The <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueType" />.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Modules.TamValParameter`1.#ctor(Triamec.Tam.Modules.ModuleComponent,System.Reflection.PropertyInfo)">
      <summary>
            Initializes an instance of the <see cref="T:Triamec.Tam.Modules.TamValParameter`1" /> class.
            </summary>
      <param name="ownerComponent">The owner <see cref="T:Triamec.Tam.Modules.ModuleComponent" />
            where this parameter belongs to.</param>
      <param name="propertyInfo">The property info of the TAM component parameter.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="ownerComponent" /> or <paramref name="propertyInfo" />
            is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
            Thrown if <paramref name="propertyInfo" /> specifies a property
            without a <see cref="T:Triamec.Tam.Modules.TamParameterAttribute" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Modules.TamValParameter`1.AppliedValue">
      <summary>
            Gets <see cref="P:Triamec.Tam.Modules.TamComponentParameter.AppliedValueAsObject" /> in a strongly typed manner.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamValParameter`1.Value">
      <summary>
            Gets <see cref="P:Triamec.Tam.Modules.TamComponentParameter.ValueAsObject" /> in a strongly typed manner.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.TamValParameter`1.ValueAsObject">
      <summary>
            Reads or writes the value of this <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
      <exception cref="T:System.Reflection.TargetInvocationException">
            	Module code threw an exception.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Modules.Configuration.ModuleComponentConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.Modules.ModuleComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.ModuleComponentConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.Configuration.ModuleComponentConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.ModuleComponentConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies the configuration.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" /> and
            is used by the method.</exception>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.ModuleComponentConfiguration.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Tam.TamException">The loaded configuration is not a valid configuration.</exception>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="P:Triamec.Tam.Modules.Configuration.ModuleComponentConfiguration.Parameters">
      <summary>
            Gets or sets the parameters.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.Configuration.ModuleComponentConfiguration.ParentPropertyName">
      <summary>
            Gets or sets the name of the property within the <see cref="P:Triamec.Tam.Configuration.TamNodeComponentConfiguration`1.Parent" />
            that returns this instance.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.Modules.TamComponentParameter" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.Adapt(Triamec.Tam.ITamNode)">
      <summary>
            Changes this configuration in order to <see cref="P:Triamec.Configuration.MatchResult.Match" /> the specified
            target.
            </summary>
      <param name="target">The node which shall be configured by this configuration.</param>
      <returns>Always <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.Address">
      <summary>
            Gets the target address of the configured instance or <see langword="null" /> if it is a root node.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.EstablishParentNavigation(Triamec.Tam.Configuration.ITamConfigurationComposite)">
      <summary>
            Ensures this configuration provides a value for its <see cref="P:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.Parent" /> property.
            </summary>
      <param name="parent">The parent of this configuration or <see langword="null" /> if this configuration is a
            root element.</param>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.GetSchema">
      <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />
            to the class instead.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the
            <see cref="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.IsCompliant(Triamec.Tam.ITamNode)">
      <summary>
            Determines whether this configuration is compliant with the specified target.
            </summary>
      <param name="target">A TAM node.</param>
      <returns>Always <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.Parent">
      <summary>
            Gets the parent configuration.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamComponentParameterConfiguration.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Modules.Configuration.TamModuleConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.Modules.TamModule" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamModuleConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Modules.Configuration.TamModuleConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Modules.Configuration.TamModuleConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies the configuration.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Modules.Configuration.TamModuleConfiguration.ModuleType">
      <summary>
            Gets or sets the type of the module.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Modules.Configuration.TamModuleConfiguration.ParentPropertyName">
      <summary>
            Gets or sets the name of the parent property.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.AnalogEncoderDevice">
      <summary>
            Analog encoder registers
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.AnalogEncoderDevice.ChannelAGain">
      <summary>
            Gets the register with channel A Gain: 1..5.7
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.AnalogEncoderDevice.ChannelAOffset">
      <summary>
            Gets the register with channel A Offset: -0.35..0.35
            Unit: fraction full scale
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.AnalogEncoderDevice.ChannelBGain">
      <summary>
            Gets the register with channel B Gain: 1..5.7
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.AnalogEncoderDevice.ChannelBOffset">
      <summary>
            Gets the register with channel B Offset: -0.35..0.35
            Unit: fraction full scale
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.AnalogEncoderDevice.ChannelMidGain">
      <summary>
            Gets the register with channel Mid Gain: 1..5.7
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.AnalogEncoderDevice.ChannelMidOffset">
      <summary>
            Gets the register with channel Mid Offset: -0.35..0.35
            Unit: fraction full scale
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AnalogEncoderDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AnalogEncoderDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.AnalogEncoderSource">
      <summary>
            The source of the analog encoder.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AnalogEncoderSource.Analog">
      <summary>
            The default encoder input signals.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AnalogEncoderSource.Digital1">
      <summary>
            Digital encoder 1 used for quadrature counting. This is used for very high frequency analog signals (&gt; 100kHz) and needs external hardware.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.AnalogInputDevice">
      <summary>
            Registers for the configuration of analog inputs.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AnalogInputDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AnalogInputDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.AnalogOutputDevice">
      <summary>
            Registers for the configuration of analog outputs.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AnalogOutputDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AnalogOutputDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.AutoCalibrationPhaseSource">
      <summary>
            The source configurations of the EncoderAnalogSignal registers.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationPhaseSource.Input">
      <summary>
            The phase input to ellipse correction.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationPhaseSource.CrossOutput">
      <summary>
            The phase output of the other channel.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationPhaseSource.Offset">
      <summary>
            The phase offset correction.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationPhaseSource.Scale">
      <summary>
            The phase scale correction.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationPhaseSource.CrossScale">
      <summary>
            The cross phase scale correction.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.AutoCalibrationSampling">
      <summary>
            Sampling rates of encoder auto calibration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationSampling.Slow">
      <summary>
            Slow 100kHz encoder calibration sampling.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationSampling.Fast">
      <summary>
            Fast 5MHz encoder calibration sampling.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.AutoCalibrationState">
      <summary>
            The enabling state of automatical encoder calibration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationState.Disabled">
      <summary>
            Automatical calibration is disabled.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationState.Enabled">
      <summary>
            Automatical calibration is enabled.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.AutoCalibrationState.Freezed">
      <summary>
            Automatical calibration is freezed.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.CurrentFilterDevice">
      <summary>
            Current filter data (undocumented)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.CurrentFilterDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.CurrentFilterDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.DigitalEncoder1Source">
      <summary>
            The source of the first digital encoder.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.DigitalEncoder1Source.EncoderSignals">
      <summary>
            The default encoder input signals.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.DigitalEncoder1Source.ExternalInput">
      <summary>
            External input. Channel A is mapped to the first external input, channel B to the second external input, and channel Z to the third external input.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.DigitalEncoderCounter">
      <summary>
            The type of digital encoder counter.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.DigitalEncoderCounter.Quadrature">
      <summary>
            Quadrature signal based counter.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.DigitalEncoderCounter.Hall">
      <summary>
            Hall signal based counter.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.DigitalInputDevice">
      <summary>
            Digital input configuration registers
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.DigitalInputDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.DigitalInputDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.DigitalInputDevice.ReadConfigValue(System.UInt32)">
      <summary>
            Reads the input configuration value.
            </summary>
      <param name="inputNumber">The input number.</param>
      <returns>Returns the value of the send register.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified input must be in the range
            1 to 6.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.DigitalInputDevice.WriteConfigValue(System.UInt32,Triamec.Tam.Periphery.InputConfigValue)">
      <summary>
            Writes the input configuration value.
            </summary>
      <param name="inputNumber">The input number.</param>
      <param name="configValue">The config value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified input must be in the range 1 to 6.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.DigitalOutputDevice">
      <summary>
            Digital output configuration registers.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.DigitalOutputDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.DigitalOutputDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderADConfigurationTypes">
      <summary>
            The encoder ADC configuration types.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADConfigurationTypes.None">
      <summary>
            No encoder ADC configuration
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADConfigurationTypes.PowerDown">
      <summary>
            1 = Power down, 0 = normal
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADConfigurationTypes.Clamp">
      <summary>
            1 = 4V, 0 = 3V Clamp bias
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADConfigurationTypes.CdsMode">
      <summary>
            1 = CDS mode, 0 = SHA mode
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADConfigurationTypes.NumberOfChannels">
      <summary>
            1 = 3 channels, 0 = 1 Channel
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADConfigurationTypes.InternalVref">
      <summary>
            1 = Internal voltage reference enabled, 0 = ... disabled
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderADMuxTypes">
      <summary>
            The encoder ADC multiplexing types.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADMuxTypes.None">
      <summary>
            No encoder ADC multiplexing
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADMuxTypes.SingleChannelBlue">
      <summary>
            1 = blue on, 0 = blue off
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADMuxTypes.SingleChannelGreen">
      <summary>
            1 = green on, 0 = green off
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADMuxTypes.SingleChannelRed">
      <summary>
            1 = red on, 0 = red off
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderADMuxTypes.ThreeChannelRgb">
      <summary>
            1 = RGB, 0 = BGR
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration">
      <summary>
            High resolution encoder configuration.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.#ctor(Triamec.Tam.Periphery.EncoderSource,System.UInt16)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> struct.
            </summary>
      <param name="source">The source encoder type. The default is Analog.</param>
      <param name="positionShift">How many bits to left shift the encoder position. The default is 0.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the values does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.Equals(Triamec.Tam.Periphery.EncoderAnalogConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.op_Equality(Triamec.Tam.Periphery.EncoderAnalogConfiguration,Triamec.Tam.Periphery.EncoderAnalogConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.EncoderAnalogConfiguration">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.op_Implicit(Triamec.Tam.Periphery.EncoderAnalogConfiguration)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.op_Inequality(Triamec.Tam.Periphery.EncoderAnalogConfiguration,Triamec.Tam.Periphery.EncoderAnalogConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderAnalogConfiguration.POSITION_SHIFT_MAX">
      <summary>
            The maximum allowed value for <see cref="P:Triamec.Tam.Periphery.EncoderAnalogConfiguration.PositionShift" />.
            <para>The value is <c>31</c>.</para></summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderAnalogConfiguration.PositionShift">
      <summary>
            Gets or sets how many bits to left shift the encoder position. The default is 0.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderAnalogConfiguration.Source">
      <summary>
            Gets or sets the source encoder type. The default is Analog.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.ToEncoderAnalogConfiguration(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderAnalogConfiguration.ToUint32(Triamec.Tam.Periphery.EncoderAnalogConfiguration)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" />.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderArchitecture">
      <summary>
            List of different encoder setups.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderArchitecture.DigitalAnalogSplit">
      <summary>
            There are two encoder connectors, one dedicated to an analog encoder, the other dedicated to a digital
            encoder. Connecting two digital encoders is also supported.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderArchitecture.Full">
      <summary>
            Each encoder connector supports digital and analog encoders.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderDataSelection">
      <summary>
            Cyclic data selector.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> struct.
            </summary>
      <param name="position1Analog">Which signal is sent to the DSP in the position 1 cyclic data container. If false, sends digital encoder 1 and digital encoder 2; otherwise, sends analog encoder or serial encoder. The default is true.</param>
      <param name="unfiltered">Whether the unfiltered digital encoder 1 signals are sent. The default is false.</param>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.Equals(Triamec.Tam.Periphery.EncoderDataSelection)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.op_Equality(Triamec.Tam.Periphery.EncoderDataSelection,Triamec.Tam.Periphery.EncoderDataSelection)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.EncoderDataSelection">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.op_Implicit(Triamec.Tam.Periphery.EncoderDataSelection)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.op_Inequality(Triamec.Tam.Periphery.EncoderDataSelection,Triamec.Tam.Periphery.EncoderDataSelection)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDataSelection.Position1Analog">
      <summary>
            Gets or sets which signal is sent to the DSP in the position 1 cyclic data container. If false, sends digital encoder 1 and digital encoder 2; otherwise, sends analog encoder or serial encoder. The default is true.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.ToEncoderDataSelection(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDataSelection.ToUint32(Triamec.Tam.Periphery.EncoderDataSelection)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDataSelection.Unfiltered">
      <summary>
            Gets or sets whether the unfiltered digital encoder 1 signals are sent. The default is false.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderDevice">
      <summary>
            General encoder registers
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.AnalogConfiguration">
      <summary>
            Gets the register with encoder source which is used for position measurement. Only valid for the DigitalAnalogSplit encoder architecture.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.Architecture">
      <summary>
            Indicates the encoder architecture implemented by the device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.AutoEllipseCorrectionA11">
      <summary>
            Gets the register with autocalibration ellipse correction scale for channel A.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.AutoEllipseCorrectionA12">
      <summary>
            Gets the register with autocalibration ellipse correction cross scale between channel A and B. Currently not calculated.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.AutoEllipseCorrectionA21">
      <summary>
            Gets the register with autocalibration ellipse correction cross scale between channel B and A.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.AutoEllipseCorrectionA22">
      <summary>
            Gets the register with autocalibration ellipse correction scale for channel B.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.AutoEllipseCorrectionC1">
      <summary>
            Gets the register with autocalibration ellipse correction offset for channel A.
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.AutoEllipseCorrectionC2">
      <summary>
            Gets the register with autocalibration ellipse correction offset for channel B.
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.DataSelector">
      <summary>
            Gets the register with flags configuring which encoder signals are sent to the DSP. Only valid for the DigitalAnalogSplit encoder architecture.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.EncoderAnalogOffset">
      <summary>
            Gets the register with analog encoder channel Offset: -1..1
            Unit: -
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.EncoderAnalogSignalA">
      <summary>
            Gets the register with analog encoder channel A: -1..1
            Unit: -
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.EncoderAnalogSignalACorrected">
      <summary>
            Gets the register with analog encoder channel A, corrected: -1..1
            Unit: -
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.EncoderAnalogSignalB">
      <summary>
            Gets the register with analog encoder channel B: -1..1
            Unit: -
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.EncoderAnalogSignalBCorrected">
      <summary>
            Gets the register with analog encoder channel B, corrected: -1..1
            Unit: -
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.EncoderSource">
      <summary>
            Gets the register with encoder source which is used for position measurement. Only valid for the Full encoder architecture.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.ExternalEncoderIO">
      <summary>
            Gets the register with the usage of the external inputs/outputs of the encoder. Only valid for the DigitalAnalogSplit encoder architecture.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.GeneralConfiguration">
      <summary>
            Gets the register with general encoder configuration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.Power">
      <summary>
            Gets the register with a flag indicating whether the encoder power supply is on.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDevice.SerialEncoderSource">
      <summary>
            Gets the register with serial encoder hardware source configuration. Only valid for the DigitalAnalogSplit encoder architecture.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDevice.SetToPositionControlModeUsingEndat(System.UInt16)">
      <summary>
            Sets the encoder unit to position control mode using digital signals from EnDat encoder.
            </summary>
      <param name="positionShift">The position shift.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDevice.SetToPositionControlModeUsingInternalEncoder">
      <summary>
            Sets the encoder unit to position control mode using internal encoder (incremetal signals).
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderDigitalInputDevice">
      <summary>Encoder digital input configuration registers</summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderDigitalInputDevice.ControlCount">
      <summary>Gets the number of programmable digital inputs.</summary>
      <exception cref="T:Triamec.Tam.TimeoutException">The property is retrieved for the first time and communication timed out.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDigitalInputDevice.ReadConfiguration(System.Int32)">
      <summary>Reads the configuration of the specified programmable digital input.</summary>
      <param name="index">The index of the programmable digital input.</param>
      <returns>The digital input configuration.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is smaller than <c>0</c> or greater
            or equal than <see cref="P:Triamec.Tam.Periphery.EncoderDigitalInputDevice.ControlCount" />.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">The communication timed out.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderDigitalInputDevice.WriteConfiguration(System.Int32,Triamec.Tam.Periphery.InputConfigValue)">
      <summary>Writes the configuration of the specified programmable digital input.</summary>
      <param name="index">The index of the programmabe digital input.</param>
      <param name="value">The configuration to write. It's recommended to alter a value retrieved using
            <see cref="M:Triamec.Tam.Periphery.EncoderDigitalInputDevice.ReadConfiguration(System.Int32)" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is smaller than <c>0</c> or greater
            or equal than <see cref="P:Triamec.Tam.Periphery.EncoderDigitalInputDevice.ControlCount" />.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">The communication timed out.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration">
      <summary>
            General encoder configuration.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.#ctor(Triamec.Tam.Periphery.DigitalEncoder1Source,Triamec.Tam.Periphery.AnalogEncoderSource,Triamec.Tam.Periphery.AutoCalibrationState,Triamec.Tam.Periphery.AutoCalibrationState,Triamec.Tam.Periphery.AutoCalibrationState,Triamec.Tam.Periphery.AutoCalibrationState,Triamec.Tam.Periphery.AutoCalibrationState,Triamec.Tam.Periphery.AutoCalibrationState,Triamec.Tam.Periphery.AutoCalibrationPhaseSource,Triamec.Tam.Periphery.AutoCalibrationPhaseSource,Triamec.Tam.Periphery.AutoCalibrationSampling)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> struct.
            </summary>
      <param name="digital1Source">The source of the first digital encoder. The default is EncoderSignals.</param>
      <param name="analogSource">The source of the analog encoder. The default is Analog.</param>
      <param name="c1AutoCalibration">The state of C1 auto calibration. The default is Enabled.</param>
      <param name="c2AutoCalibration">The state of C2 auto calibration. The default is Enabled.</param>
      <param name="a11AutoCalibration">The state of A11 auto calibration. The default is Enabled.</param>
      <param name="a12AutoCalibration">The state of A12 auto calibration. The default is Enabled.</param>
      <param name="a21AutoCalibration">The state of A21 auto calibration. The default is Enabled.</param>
      <param name="a22AutoCalibration">The state of A22 auto calibration. The default is Enabled.</param>
      <param name="phaseASource">The source configuration of the EncoderAnalogSignalACorrected register. The default is Input.</param>
      <param name="phaseBSource">The source configuration of the EncoderAnalogSignalBCorrected register. The default is Input.</param>
      <param name="calibrationSampling">The sampling rate of encoder auto calibration. The default is Slow.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the values does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.A11AutoCalibration">
      <summary>
            Gets or sets the state of A11 auto calibration. The default is Enabled.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.A12AutoCalibration">
      <summary>
            Gets or sets the state of A12 auto calibration. The default is Enabled.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.A21AutoCalibration">
      <summary>
            Gets or sets the state of A21 auto calibration. The default is Enabled.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.A22AutoCalibration">
      <summary>
            Gets or sets the state of A22 auto calibration. The default is Enabled.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.AnalogSource">
      <summary>
            Gets or sets the source of the analog encoder. The default is Analog.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.C1AutoCalibration">
      <summary>
            Gets or sets the state of C1 auto calibration. The default is Enabled.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.C2AutoCalibration">
      <summary>
            Gets or sets the state of C2 auto calibration. The default is Enabled.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.CalibrationSampling">
      <summary>
            Gets or sets the sampling rate of encoder auto calibration. The default is Slow.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.Digital1Source">
      <summary>
            Gets or sets the source of the first digital encoder. The default is EncoderSignals.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.Equals(Triamec.Tam.Periphery.EncoderGeneralConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.op_Equality(Triamec.Tam.Periphery.EncoderGeneralConfiguration,Triamec.Tam.Periphery.EncoderGeneralConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.EncoderGeneralConfiguration">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.op_Implicit(Triamec.Tam.Periphery.EncoderGeneralConfiguration)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.op_Inequality(Triamec.Tam.Periphery.EncoderGeneralConfiguration,Triamec.Tam.Periphery.EncoderGeneralConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.PhaseASource">
      <summary>
            Gets or sets the source configuration of the EncoderAnalogSignalACorrected register. The default is Input.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderGeneralConfiguration.PhaseBSource">
      <summary>
            Gets or sets the source configuration of the EncoderAnalogSignalBCorrected register. The default is Input.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.ToEncoderGeneralConfiguration(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderGeneralConfiguration.ToUint32(Triamec.Tam.Periphery.EncoderGeneralConfiguration)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" />.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource">
      <summary>
            Serial hardware source selectors of encoders.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.#ctor(Triamec.Tam.Periphery.SerialEncoderSource,Triamec.Tam.Periphery.DigitalEncoderCounter)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> struct.
            </summary>
      <param name="serialSource">The source of the serial encoder input hardware. The default is SerialEncoder</param>
      <param name="digitalCounterType">The type of digital encoder counter. The default is Quadrature.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the values does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderSerialHardwareSource.DigitalCounterType">
      <summary>
            Gets or sets the type of digital encoder counter. The default is Quadrature.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.Equals(Triamec.Tam.Periphery.EncoderSerialHardwareSource)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.op_Equality(Triamec.Tam.Periphery.EncoderSerialHardwareSource,Triamec.Tam.Periphery.EncoderSerialHardwareSource)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.EncoderSerialHardwareSource">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.op_Implicit(Triamec.Tam.Periphery.EncoderSerialHardwareSource)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.op_Inequality(Triamec.Tam.Periphery.EncoderSerialHardwareSource,Triamec.Tam.Periphery.EncoderSerialHardwareSource)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.EncoderSerialHardwareSource.SerialSource">
      <summary>
            Gets or sets the source of the serial encoder input hardware. The default is SerialEncoder
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.ToEncoderSerialHardwareSource(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.EncoderSerialHardwareSource.ToUint32(Triamec.Tam.Periphery.EncoderSerialHardwareSource)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" />.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderSource">
      <summary>
            The encoder sources in the DigitalAnalogSplit architecture.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSource.Analog">
      <summary>
            Internal analog encoder is used for position measurenment.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSource.EnDat">
      <summary>
            EnDat encoder is used for position measurement.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSource.Leica">
      <summary>
            Leica encoder is used for position measurement. This is optional functionality not enabled in every firmware.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSource.Potentiometer">
      <summary>
            Potentiometer is used for position measurement.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EncoderSourceFull">
      <summary>
            The encoder sources in the Full encoder architecture.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSourceFull.Analog">
      <summary>
            Internal analog encoder is used for position measurement.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSourceFull.Rs422">
      <summary>
            Incremental RS-422 encoder is used for position measurement.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSourceFull.Ttl">
      <summary>
            Incremental TTL encoder is used for position measurenment.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSourceFull.EnDatDigital">
      <summary>
            Digital signals from an EnDat encoder are used for position measurement.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EncoderSourceFull.EnDatAnalog">
      <summary>
            Incremental signals (1Vss) from an EnDat encoder are used for position measurement.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.Endat22ManufacturerParameter">
      <summary>
            Representation of endat2.2 manufacturer parameter range of an EnDat device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.Endat22ManufacturerParameter.Device">
      <summary>
            Gets the EnDat device where this <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> belongs to.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatAdditionalReceiveValue">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadAdditionalReceiveRegisters" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatAdditionalReceiveValue.Address1">
      <summary>
            Gets the additional address field 1.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatAdditionalReceiveValue.Address2">
      <summary>
            Gets the additional address field 2.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatAdditionalReceiveValue.Data1">
      <summary>
            Gets the additional data field 1.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatAdditionalReceiveValue.Data2">
      <summary>
            Gets the additional data field 2.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatAdditionalReceiveValue.HasCrcError1">
      <summary>
            Indicates if the CRC error flag of the additional information 1 is set.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatAdditionalReceiveValue.HasCrcError2">
      <summary>
            Indicates if the CRC error flag of the additional information 2 is set.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatCommandSet">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadEndatCommandSet" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.Endat22Supported">
      <summary>Command set type 2.2 supported.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.Endat22NotSupported">
      <summary>Command set type 2.2 not supported.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.SafetyRelevantApplicationsSupported">
      <summary>Safety-relevant applications supported.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.SafetyRelevantApplicationsNotSupported">
      <summary>Safety-relevant applications not supported.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.ModeCommandCommunicationCommandSupported">
      <summary>Mode command Encoder to receive communication command supported.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.ModeCommandCommunicationCommandNotSupported">
      <summary>Mode command Encoder to receive communication command not supported.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.SwitchOffOfCommandSetType22Supported">
      <summary>Switch-off of command set Type 2.2 supported.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.SwitchOffOfCommandSetType22NotSupported">
      <summary>Switch-off of command set Type 2.2 not supported.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatCommandSet.None">
      <summary>no switch is set.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatControl">
      <summary>
            EnDat encoder communication specific collection of methods.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatControl.#ctor(Triamec.Tam.TamAxis)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.EndatControl" /> class.
            </summary>
      <param name="axis">The axis to operate with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="axis" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatControl.EndatIsImplicitlyWiredUp">
      <summary>
            Gets a value indicating whether the internal wiring of the hardware in order to communicate with an EnDat
            encoder is implicitly set up.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatControl.HasEndat">
      <summary>
            Indicates whether the related axis provides a <see cref="T:Triamec.Tam.Periphery.SerialEncoderDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatControl.InitializeEndatInterface">
      <summary>
            Initializes the EnDat interface if not already done before.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatControl.ReadAbsolutePosition">
      <summary>
            Reads the absolute position from the EnDat encoder with the best possible 
            resolution. The subresolution is obtained by evaluation of the analog encoder 
            signals. The unit of the return value is meter or radian, and  depends on the 
            used encoder type (linear or rotative).
            </summary>
      <returns>
            The position or <c>0</c> if <see cref="P:Triamec.Tam.Periphery.EndatControl.HasEndat" /> is <see langword="false" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatControl.RetrieveCommutationToEncoderAngle">
      <summary>
            Retrieves the offset angle between the commutation and the encoder
            from a persistent EnDat memory and stores the angle it to the 
            <see cref="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CommutationToEncoderAngle" /> register.
            </summary>
      <returns>The offset angle between the communication and the encoder;
            or <c>0</c> if <see cref="P:Triamec.Tam.Periphery.EndatControl.SupportsCommutationToEncoderAngle" /> is <see langword="null" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatControl.SaveCommutationToEncoderAngle">
      <summary>
            Saves the offset angle between the commutation and the encoder which is available in the register 
            <see cref="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CommutationToEncoderAngle" /> into a persistent EnDat memory.
            </summary>
      <returns>The offset angle between the communication and the encoder;
            or <c>0</c> if <see cref="P:Triamec.Tam.Periphery.EndatControl.SupportsCommutationToEncoderAngle" /> is <see langword="null" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatControl.SetToPositionControlModeUsingEndat">
      <summary>
            Configures the encoder control unit to get the actual position from digital positions sent by 
            the EnDat encoder. Switches the EnDat control unit to cyclic position read mode. Initializes 
            EnDat control unit if needed.  
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatControl.SetToPositionControlModeUsingInternalEncoder">
      <summary>
            Configures encoder control unit to get the actual position from an analog source, like EnDat 
            incremental signals. Switches off the cyclic position read mode in the EnDat control unit.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatControl.SupportsCommutationToEncoderAngle">
      <summary>
            Gets a value indicating whether the <see cref="M:Triamec.Tam.Periphery.EndatControl.SaveCommutationToEncoderAngle" /> and
            <see cref="M:Triamec.Tam.Periphery.EndatControl.RetrieveCommutationToEncoderAngle" /> methods can be used.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatControlRegister0Value">
      <summary>
            The type of the values returned by <see cref="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadClockSetting" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatControlRegister0Value.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.EndatControlRegister0Value" /> class.
            </summary>
      <param name="clockPeriod">The clock period, in seconds.</param>
      <param name="startTiming">The start timing, in seconds.</param>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatControlRegister0Value.ClockPeriod">
      <summary>
            Gets or sets the clock period, in seconds.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatControlRegister0Value.StartTiming">
      <summary>
            Gets or sets the start timing, in seconds.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatEncoderType">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadEncoderType" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderType.LinearEncoder">
      <summary>EnDat encoder is a linear encoder.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderType.RotaryEncoder">
      <summary>EnDat encoder is a rotary encoder.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatEncoderTypeDetailed">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadEncoderType" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.IncrementalLinearEncoderWithDistanceCodedReferenceMarks">
      <summary>Incremental linear encoder with distance-coded reference marks.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.IncrementalLinearEncoderWithoutDistanceCodedReferenceMarks">
      <summary>Incremental linear encoder without distance-coded reference marks.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.IncrementalLinearEncoderWithBatteryBufferWithDistanceCodedReferenceMarks">
      <summary>Incremental linear encoder with battery buffer with distance-coded reference marks.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.IncrementalLinearEncoderWithBatteryBufferWithoutDistanceCodedReferenceMarks">
      <summary>Incremental linear encoder with battery buffer without distance-coded reference marks.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.AbsoluteLinearEncoderWithCyclicCoding">
      <summary>Absolute linear encoder with cyclic coding.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.IncrementalRotaryEncoderWithDistanceCodedReferenceMarks">
      <summary>Incremental rotary encoder with distance-coded reference marks.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.IncrementalRotaryEncoderWithoutDistanceCodedReferenceMarks">
      <summary>Incremental rotary encoder without distance-coded reference marks.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.IncrementalRotaryEncoderWithBatteryBufferWithDistanceCodedReferenceMarks">
      <summary>Incremental rotary encoder with battery buffer with distance-coded reference marks.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.IncrementalRotaryEncoderWithBatteryBufferWithoutDistanceCodedReferenceMarks">
      <summary>Incremental rotary encoder with battery buffer without distance-coded reference marks.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.SingleTurnRotaryEncoderOrSingleturnAngleEncoder">
      <summary>Singleturn rotary encoder or singleturn angle encoder.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.MultiturnRotaryEncoderWithGears">
      <summary>Multiturn rotary encoder with gears.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.MultiturnRotaryEncoderWithBatteryBuffer">
      <summary>Multiturn rotary encoder with battery buffer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.Eib">
      <summary>EIB.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatEncoderTypeDetailed.None">
      <summary>no switch is set.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatErrors">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadErrors" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatErrors.Error1">
      <summary>Encoder error 1.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatErrors.Error2">
      <summary>Encoder error 2.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatErrors.CrcMainError">
      <summary>CRC error of the main data.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatErrors.CrcError1">
      <summary>CRC error of the additional information 1.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatErrors.CrcError2">
      <summary>CRC error of the additional information 2.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatErrors.None">
      <summary>no switch is set.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatHardwareErrors">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadSupportedErrorMessages" />.
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatOperatingCondition.ReadErrorState" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareErrors.LightSource">
      <summary>Encoder light source.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareErrors.SignalAmplitude">
      <summary>Encoder signal amplitude.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareErrors.PositionError">
      <summary>Position error.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareErrors.OverVoltage">
      <summary>Overvoltage error.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareErrors.UnderVoltage">
      <summary>Undervoltage error.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareErrors.OverCurrent">
      <summary>Overcurrent error.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareErrors.BatteryFailure">
      <summary>Overcurrent error.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareErrors.None">
      <summary>no switch is set.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatHardwareWarnings">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadSupportedWarnings" />.
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatOperatingCondition.ReadWarningsState" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareWarnings.FrequencyCollision">
      <summary>Frequency collision.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareWarnings.TemperatureExceeded">
      <summary>Temperature exceeded.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareWarnings.LightSourceControlReserve">
      <summary>Light source control reserve.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareWarnings.BatteryCharge">
      <summary>Battery charge.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareWarnings.TraverseReferencePoint">
      <summary>Traverse reference point.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatHardwareWarnings.None">
      <summary>no switch is set.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatInitializingFunctions">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatOperatingCondition.ReadInitializingFunctions" />.
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatOperatingCondition.WriteInitializingFunctions(Triamec.Tam.Periphery.EndatInitializingFunctions)" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.RecoveryTime1p25usTo3p75usActivated">
      <summary>Recovery time tm in range [1.25us ... 3.75us]</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.RecoveryTime10usTo30usActivated">
      <summary>Recovery time tm in range [10us ... 30us]</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.ReferencePulseInitializationActivated">
      <summary>Reference pulse initialization activated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.ReferencePulseInitializationDeactivated">
      <summary>Reference pulse initialization deactivated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.OversamplingActivated">
      <summary>Oversampling activated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.OversamplingDeactivated">
      <summary>Oversampling deactivated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.Endat22CommandsActivated">
      <summary>EnDat 2.2 commands activated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.Endat22CommandsDeactivated">
      <summary>EnDat 2.2 commands deactivated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.MultiTurnOverflowAlarmActivated">
      <summary>Multiturn overflow alarm activated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.MultiTurnOverflowLatchActivated">
      <summary>Multiturn overflow latch activated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.MultiTurnPositionAlarmActivated">
      <summary>Multiturn position alarm activated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.MultiTurnCounterResetActivated">
      <summary>Multiturn counter reset activated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.MultiTurnCounterResetDeactivated">
      <summary>Multiturn counter reset deactivated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.DiagnosticResetActivated">
      <summary>Multiturn position alarm activated.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatInitializingFunctions.None">
      <summary>no switch is set.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatManufacturerParameter">
      <summary>
            Representation of manufacturer parameter range of an EnDat device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadChecksum">
      <summary>
            Reads the checksum. The returned checksum of the encoder manufacturer memory area in order to make it
            possible to check the correctness of the saved data. The checksum is formed from words 4 to 46.
            </summary>
      <returns>Returns the checksum.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadCompensationValuesAllocation">
      <summary>
            Reads the compensation values allocation.
            </summary>
      <returns>
            Returns the compensation values memory allocation information.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadDatumShiftOfLinearEncoder">
      <summary>
            Reads the datum shift of the encoder manufacturer. The value must be added to the datum of the encoder.
            For a datum shift in linear encoders to be in compliance with EnDat (assignment of the zero position to a signal
            period), the value of the datum shift must be a multiple of the measuring steps per signal period.
            </summary>
      <returns>
            Returns the datum shift of the encoder manufacturer [m]
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The rotary encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadDatumShiftOfRotaryEncoder">
      <summary>
            Reads the datum shift of the encoder manufacturer. The value must be added to the datum of the encoder.
            For a datum shift in absolute rotary or angle encoders, the value of the datum shift must be a multiple of the
            number of measuring steps per revolution divided by the number of incremental signal periods per revolution.
            </summary>
      <returns>
            Returns the datum shift of the encoder manufacturer [rad]
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The linear encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadEncoderType">
      <summary>
            Reads the encoder type.
            </summary>
      <returns>Returns the EnDat encoder type.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadEncoderTypeDetailed">
      <summary>
            Reads the encoder detailed type.
            </summary>
      <returns>Returns the EnDat encoder detailed type.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadEndatCommandSet">
      <summary>
            Reads the EnDat command set.
            </summary>
      <returns>Returns the EnDat command set.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadEndatVersion">
      <summary>
            Reads the EnDat version.
            </summary>
      <returns>Returns the EnDat version.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadExternalConfigurationDiagnostics">
      <summary>
            Indicates whether the encoder supports external commissioning diagnosis.
            </summary>
      <returns>
            Returns <see langword="true" /> if encoder supports external commissioning diagnosis.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The diagnostic configuration is illegal.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadHasIncrementalSignals">
      <summary>
            Gets a value indicating whether the encoder delivers incremental position signals or not.
            </summary>
      <returns>
        <see langword="true" /> if incremental signals are delivered, <see langword="false" /> 
            	if none are delivered; 
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadIdNumber">
      <summary>
            Reads the ID number (part number) of the encoder.
            </summary>
      <returns>Returns the requested ID number string</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadIncrementOfReferenceMarksOfLinearEncoder">
      <summary>
            In encoders with distance-coded reference marks, return value indicates the nominal increment of
            associated reference marks. In absolute encoders without reference marks, 0000hex is returned.
            In linear encoders without distance-coded reference marks, return value indicates the distance
            between two adjacent reference marks.
            The information is given in meters using linear encoders.
            </summary>
      <returns>
            Returns the increment of reference marks [m].
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The linear encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadIncrementOfReferenceMarksOfRotaryEncoder">
      <summary>
            In encoders with distance-coded reference marks, return value indicates the nominal increment of
            associated reference marks. In absolute encoders without reference marks, 0000hex is returned.
            In linear encoders without distance-coded reference marks, return value indicates the distance
            between two adjacent reference marks.
            The information is given in signal periods using rotary encoders.
            </summary>
      <returns>
            Returns the increment of reference marks in signal periods.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The rotary encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadIsPositiveDirection">
      <summary>
            In rotary and angle encoders, return value defines whether increasing [<see langword="true" />] or decreasing
            [<see langword="false" />]
            position values are output over the serial interface when the encoder shaft rotates clockwise (viewed
            from the flange side).
            In linear encoders, return value defines whether traverse toward the right (viewed from
            ID-label side) outputs increasing [<see langword="true" />] or decreasing [<see langword="false" />] position
            values over the serial interface.
            </summary>
      <returns>
            Returns <see langword="true" /> if direction is positive.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The direction is illegal.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadMaskRegister(System.Byte)">
      <summary>
            Reads the mask register specified within <paramref name="maskNumber" />.
            </summary>
      <param name="maskNumber">The mask number.</param>
      <returns>Returns the EnDat Mask register.</returns>
      <exception cref="T:Triamec.Tam.TamException">
        <paramref name="maskNumber" /> must be in the range [0..3].</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadMaximumPermissibleMechanicalVelocityOfLinearEncoder">
      <summary>
            Contains the maximum permissible mechanical velocity of linear encoders
            </summary>
      <returns>
            Returns the maximum permissible mechanical velocity in [m/s]
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The value is illegal.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadMaximumPermissibleMechanicalVelocityOfRotaryEncoder">
      <summary>
            Contains the maximum permissible mechanical shaft speed of rotary encoders
            </summary>
      <returns>
            Returns the maximum permissible mechanical shaft speed in [rad/s]
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The linear encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadMaximumProcessingTime">
      <summary>
            Reads the maximum processing time.
            </summary>
      <returns>
            Returns the maximum processing time in [sec].
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadMeasuringLength">
      <summary>
            Reads the Measuring Length, in meter.
            </summary>
      <returns>Returns the measuring length [m].</returns>
      <exception cref="T:Triamec.Tam.TamException">The rotary encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadMeasuringStepOfLinearEncoder">
      <summary>
            returns the measuring step of linear encoders.
            Using linear encoders, this return value indicates the measuring step that is output by
            the encoder during serial transmission of the position value. The information is given in meter.
            </summary>
      <returns>Returns the measuring step in [m].</returns>
      <exception cref="T:Triamec.Tam.TamException">The rotary encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadMeasuringStepsOfRotaryEncoder">
      <summary>
            returns the measuring steps per revolution of rotary encoders.
            Using rotary or angle encoders, this return value indicates the number of measuring steps per
            revolution that the encoder outputs during serial transmission of the position value. The
            information is given in measuring steps per revolution (M/rev).
            </summary>
      <returns>
            Returns the number of measuring steps per revolution.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The linear encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadNumberOfClockPulsesForTransferOfThePositionValue">
      <summary>
            Reads the number of clock pulses for transfer of the position value.
            </summary>
      <returns>
            The number of clock pulses needed for transfer of one position value
            </returns>
      <exception cref="T:Triamec.Tam.TamException">An EnDat communication error occurred.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadNumberOfDistinguishableRevolutions">
      <summary>
            Reads the number of distinguishable revolutions of multiturn encoders.
            </summary>
      <returns>
            Returns the number of distinguishable revolutions.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadOemParameterMemoryAllocation">
      <summary>
            Reads the OEM parameter memory allocation.
            </summary>
      <returns>
            Returns the OEM parameter memory allocation information.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadOrderingDescription">
      <summary>
            Reads the ordering description of the encoder.
            </summary>
      <returns>Returns the ordering description string.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadPositionOfTheFirstReferenceMark">
      <summary>
            For linear encoders without distance-coded reference marks, return value indicates the position of
            the first reference mark with respect to the end position. The information is given in meter. Zero
            is returned for encoders with selectable reference marks. See the encoder specifications for more
            detailed information.
            </summary>
      <returns>
            Returns the position of the first reference mark [m].
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadSerialNumber">
      <summary>
            Reads the serial number of the encoder.
            </summary>
      <returns>Returns the serial number string.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadSignalPeriodLengthOfLinearEncoder">
      <summary>
            Reads the length of the signal period of linear encoder, in nm.
            </summary>
      <returns>Returns the signal period length in [m].</returns>
      <exception cref="T:Triamec.Tam.TamException">The rotary encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadSignalPeriodsPerRevolutionOfRotaryEncoder">
      <summary>
            Reads the number of signal periods per revolution of rotary encoders.
            </summary>
      <returns>
            Returns the number of signal periods per revolution.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">The linear encoder is currently in use.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadSupportedErrorMessages">
      <summary>
            Depending on the encoder, different error bits are supported in Error register of the operating
            status memory.
            </summary>
      <returns>
            Returns the bitset of supported error messages.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadSupportedWarnings">
      <summary>
            Depending on the type of encoder, different warning bits are supported in the operating status memory.
            The return value indicates whether a particular encoder function is monitored and whether a
            malfunction will activate the corresponding warning bit the warning register.
            </summary>
      <returns>Returns the bitset of supported warnings.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatManufacturerParameter.ReadVersionOfInterface">
      <summary>
            Reads the version of the EnDat interface.
            </summary>
      <returns>Returns the EnDat interface version.</returns>
      <exception cref="T:Triamec.Tam.TamException">The read version is illegal.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode">
      <summary>
            The memory range select (MRS) codes of the EnDat interface.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.OperatingCondition">
      <summary>Operating condition.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.ManufacturerParameterRange0">
      <summary>Parameter range 0 of the encoder manufacturer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.ManufacturerParameterRange1">
      <summary>Parameter range 1 of the encoder manufacturer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.ManufacturerParameterRange2">
      <summary>Parameter range 2 of the encoder manufacturer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.OperatingParameters">
      <summary>Operating parameters.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.OemParameterRange0">
      <summary>Parameter range 0 of the OEM.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.OemParameterRange1">
      <summary>Parameter range 1 of the OEM.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.OemParameterRange2">
      <summary>Parameter range 2 of the OEM.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.OemParameterRange3">
      <summary>Parameter range 3 of the OEM.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.CompensationValueRange0">
      <summary>Compensation values range 0 of the encoder manufacturer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.CompensationValueRange1">
      <summary>Compensation values range 1 of the encoder manufacturer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.CompensationValueRange2">
      <summary>Compensation values range 2 of the encoder manufacturer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.CompensationValueRange3">
      <summary>Compensation values range 3 of the encoder manufacturer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.ManufacturerParameterEndat22">
      <summary>Parameter range for EnDat22 of the encoder manufacturer.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.MemorySection2Parameters">
      <summary>Parameter range of the memeory section 2.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMemoryRangeSelectCode.None">
      <summary>The undefined value.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatMode">
      <summary>
            The EnDat mode definitions.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendPosition21">
      <summary>Encoder to send position values; Type 2.1</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SelectMemoryArea21">
      <summary>Selection of memory area; Type 2.1</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.ReceiveParameters21">
      <summary>Encoder to receive parameters; Type 2.1</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendParameters21">
      <summary>Encoder to send parameters; Type 2.1</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.ReceiveReset21">
      <summary>Encoder to receive reset; Type 2.1</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendTestValues21">
      <summary>Encoder to send test values; Type 2.1</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.ReceiveTestCommand21">
      <summary>Encoder to receive test command; Type 2.1</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendPosition22">
      <summary>Encoder to send position values with additional information; Type 2.2</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendPositionAndSelectMemoryArea22">
      <summary>Encoder to send position values with additional information
            and selection of memory area or of the additional information; Type 2.2</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendPositionAndReceiveParameters22">
      <summary>Encoder to send position values with additional information
            and receive parameters; Type 2.2</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendPositionAndSendParameters22">
      <summary>Encoder to send position values with additional information
            and send parameters; Type 2.2</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendPositionAndReceiveTestCommand22">
      <summary>Encoder to send position values with additional information
            and receive test command; Type 2.2</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.SendPositionAndReceiveReset22">
      <summary>Encoder to send position values with additional information
            and receive error reset; Type 2.2</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.ReceiveCommunicationCommand22">
      <summary>Encoder to receive communication command; Type 2.2</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatMode.None">
      <summary>The undefined value.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatOemMemory">
      <summary>
            Representation of one OEM memory range of an EnDat device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress">
      <summary>
            Gets the end byte address of this <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatOemMemory.IsAvailable">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> is available for use.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatOemMemory.Range">
      <summary>
            Gets the OEM memory range of this <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOemMemory.ReadInt(System.Byte)">
      <summary>
            Reads a <see cref="T:System.Int32" /> value at the specified byte address.
            </summary>
      <param name="address">The byte address where to read.
            The value must be even and must be between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" /> - <c>sizeof(float)</c>.</param>
      <returns>
            Returns the int value at the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is not
            between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" /> - <c>sizeof(float)</c>.</exception>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOemMemory.ReadShort(System.Byte)">
      <summary>
            Reads a short value at the specified byte address.
            </summary>
      <param name="address">The byte address where to read.
            The value must be even and must be between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" />.</param>
      <returns>
            The value at the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is not
            between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOemMemory.ReadSingle(System.Byte)">
      <summary>
            Reads a <see cref="T:System.Single" /> value at the specified byte address.
            </summary>
      <param name="address">The byte address where to read.
            The value must be even and must be between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" /> - <c>sizeof(float)</c>.</param>
      <returns>
            Returns the float value at the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is not
            between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" /> - <c>sizeof(float)</c>.</exception>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress">
      <summary>
            Gets the start byte address of this <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOemMemory.WriteInt(System.Byte,System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value at the specified byte address.
            </summary>
      <param name="address">The byte address where to write.
            The value must be even and must be between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" /> - <c>sizeof(int)</c>.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is not
            between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" /> - <c>sizeof(int)</c>.</exception>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOemMemory.WriteShort(System.Byte,System.UInt16)">
      <summary>
            Writes a short value at the specified byte address.
            </summary>
      <param name="address">The byte address where to write.
            The value must be even and must be between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" />.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is not
            between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOemMemory.WriteSingle(System.Byte,System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value at the specified byte address.
            </summary>
      <param name="address">The byte address where to write.
            The value must be even and must be between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" /> - <c>sizeof(float)</c>.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is not
            between <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.StartAddress" /> and <see cref="P:Triamec.Tam.Periphery.EndatOemMemory.EndAddress" /> - <c>sizeof(float)</c>.</exception>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatOemMemoryRange">
      <summary>
            The numberings of the different ranges 
            of <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> in an <see cref="T:Triamec.Tam.Periphery.SerialEncoderDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range0">
      <summary>EnDat OEM memory range 0.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range1">
      <summary>EnDat OEM memory range 1.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range2">
      <summary>EnDat OEM memory range 2.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range3">
      <summary>EnDat OEM memory range 3.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatOperatingCondition">
      <summary>
            Representation of operating condition range of an EnDat device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingCondition.ReadErrorState">
      <summary>
            Reads the error state.
            An error message is set if there is a malfunction in the encoder that could be causing incorrect position
            values. If a bit is not equal to zero, then the error bit 1 is set to logical High during measured value
            transfer, and error bit 2 to logical Low.
            </summary>
      <returns>Returns the cycle time [sec].</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingCondition.ReadInitializingFunctions">
      <summary>
            Reads the initializing functions register.
            </summary>
      <returns>Returns the initialization functions register.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingCondition.ReadWarningsState">
      <summary>
            Reads the warnings state.
            Unlike error messages, warnings do not necessarily indicate incorrect position values.
            Warnings are saved in this register.
            </summary>
      <returns>Returns the cycle time [sec].</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingCondition.ReadWriteProtectedState">
      <summary>
            Reads the write protection state.
            The write protection state of each memory area is saved this register. The write
            protection for parameters of the encoder manufacturer and for any compensation values
            is activated before shipping and cannot be canceled. The write-protection for memory areas
            that were not protected before shipping is activated as follows, and can then no longer be
            canceled:
            </summary>
      <returns>Returns the write protection state.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingCondition.ResetErrorState">
      <summary>
            Reset the error state register.
            writes 0x0000 to the error register and sends SerialEncoderDevice.ResetEncoder, which clears all the errors.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingCondition.ResetWarningsState">
      <summary>
            Reset the warning state register.
            writes 0x0000 to the warnings register and sends SerialEncoderDevice.ResetEncoder, which clears all the errors.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingCondition.WriteInitializingFunctions(Triamec.Tam.Periphery.EndatInitializingFunctions)">
      <summary>
            Writes the initializing functions register.
            </summary>
      <param name="initFunctions">The initialization functions.</param>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatOperatingParameter">
      <summary>
            Representation of operating parameter range of an EnDat device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.ReadAddressAssignment">
      <summary>
            Reads the encoder address for bus systems.
            </summary>
      <returns>Returns the address</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.ReadCycleTime">
      <summary>
            Reads the cycle time (time between two position requests).
            </summary>
      <returns>Returns the cycle time [sec].</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.ReadDatumShiftOfLinearEncoder">
      <summary>
            Reads the actual value of the datum shift, which is stored in the operation parameters.
            This value can be used by the customer to shift the datum.
            The default setting is set to the manufacturer datum shift which is stored as a backup,
            in the encoder manufacturer parameters too.
            If the customer needs to shift the datum, it must be subsummed and written to this register.
            On incremental encoders, the datum shift only affects the absolute position.
            </summary>
      <returns>Returns the actual datum shift in [m]</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.ReadDatumShiftOfRotaryEncoder">
      <summary>
            Reads the actual value of the datum shift, which is stored in the operation parameters.
            This value can be used by the customer to shift the datum.
            The default setting is set to the manufacturer datum shift which is stored as a backup,
            in the encoder manufacturer parameters too.
            If the customer needs to shift the datum, it must be subsummed and written to this register.
            On incremental encoders, the datum shift only affects the absolute position.
            </summary>
      <returns>
            Returns the actual datum shift in [radians]
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.ReadDiagnosticsConfiguration">
      <summary>
            Reads the diagnostic configuration.
            The customer can specify the configuration of the diagnostics values of the operating parameters.
            For each interrogation of a diagnostic value, activated evaluation numbers are transmitted serially.
            </summary>
      <returns>Returns the diagnostic configuration</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.ReadInstructions">
      <summary>
            Reads the instructions for operating parameters.
            </summary>
      <returns>Returns the instructions value</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.ReadTriggerThresholdForWarningExcessiveTemperature">
      <summary>
            Reads the trigger threshold of the warning bit for excessive temerature.
            </summary>
      <returns>Returns the trigger threshold [Kelvin].</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.WriteAddressAssignment(System.UInt16)">
      <summary>
            Writes the encoder address for bus systems.
            </summary>
      <param name="address">The address.</param>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.WriteCycleTime(System.Single)">
      <summary>
            Writes the cycle time (time between two position requests).
            </summary>
      <param name="cycleTime">The cycle time in [s].</param>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.WriteDatumShiftOfLinearEncoder(System.Single)">
      <summary>
            Writes the actual value of the datum shift, which will be stored in the operation parameters.
            This value can be used by the customer to shift the datum.
            The default setting is set to the manufacturer datum shift which is stored as a backup,
            in the encoder manufacturer parameters too.
            If the customer needs to shift the datum, it must be subsummed and written to this register.
            On incremental encoders, the datum shift only affects the absolute position.
            </summary>
      <param name="datumShift">The datum shift.</param>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.WriteDatumShiftOfRotaryEncoder(System.Single)">
      <summary>
            Writes the actual value of the datum shift, which will be stored in the operation parameters.
            This value can be used by the customer to shift the datum.
            The default setting is set to the manufacturer datum shift which is stored as a backup,
            in the encoder manufacturer parameters too.
            If the customer needs to shift the datum, it must be subsummed and written to this register.
            On incremental encoders, the datum shift only affects the absolute position.
            </summary>
      <param name="datumShift">The datum shift.</param>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.WriteDiagnosticsConfiguration(System.UInt16)">
      <summary>
            Writes the diagnostic configuration.
            The customer can specify the configuration of the diagnostics values of the operating parameters.
            For each interrogation of a diagnostic value, activated evaluation numbers are transmitted serially.
            </summary>
      <param name="diagnosticConfiguration">The diagnostic configuration.</param>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.WriteInstructions(System.UInt16)">
      <summary>
            Writes the instructions for operating parameters.
            </summary>
      <param name="instructions">The instructions value.</param>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.EndatOperatingParameter.WriteTriggerThresholdForWarningExcessiveTemperature(System.Single)">
      <summary>
            Writes the trigger threshold of the warning bit for excessive temerature.
            </summary>
      <param name="triggerThresholdTemperature">The trigger threshold temperature [Kelvin].</param>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatReceiveValue">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadReceiveRegisters" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.Address">
      <summary>
            Gets the address field.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.Data">
      <summary>
            Gets the data field.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.HasCrcError">
      <summary>
            Indicates if the CRC error flag is set.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.HasError1">
      <summary>
            Indicates if the error 1 flag is set.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.HasError2">
      <summary>
            Indicates if the error 2 flag is set.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.Mode">
      <summary>
            Gets the EnDat mode field.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.None">
      <summary>
            Gets a representation of no receive value.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.Position">
      <summary>
            Gets the position field.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.EndatReceiveValue.Test">
      <summary>
            Gets the test field.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatVersion">
      <summary>
            The version of the EnDat interface.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatVersion.Endat21">
      <summary>EnDat 2.1.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatVersion.Endat22">
      <summary>EnDat 2.2.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EndatWriteProtection">
      <summary>
            The return value of <see cref="M:Triamec.Tam.Periphery.EndatOperatingCondition.ReadWriteProtectedState" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.EncoderManufacturer">
      <summary>Encoder manufacturer range.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.OperatingParameters">
      <summary>Operating parameters range.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.Oem">
      <summary>OEM range.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.CompensationValues1">
      <summary>Compensation values range 1.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.CompensationValues2">
      <summary>Compensation values range 2.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.CompensationValues3">
      <summary>Compensation values range 3.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.Section2MemoryAreaBlock0">
      <summary>Section 2 memory area block 0 range.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.Section2MemoryAreaBlock1">
      <summary>Section 2 memory area block 1 range.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.Section2MemoryAreaBlock2">
      <summary>Section 2 memory area block 2 range.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.Section2MemoryAreaBlock3">
      <summary>Section 2 memory area block 3 range.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EndatWriteProtection.None">
      <summary>no switch is set.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.EthercatDevice">
      <summary>
            Ethercat support registers
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EthercatDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.EthercatDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.ExtensionDevice">
      <summary>
            External module
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ExtensionDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ExtensionDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.ExternalEncoderIO">
      <summary>
            The mode of the external encoder input/output.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ExternalEncoderIO.AsInput">
      <summary>
            External I/O is used as input.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ExternalEncoderIO.AsPulseTrainOn10">
      <summary>
            Pulse train is output on external output bit 1 as serial encoder signal.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ExternalEncoderIO.AsPulseTrainOn32">
      <summary>
            Pulse train is output on external output bits 3 and 4 implementing the RS485 protocol.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ExternalEncoderIO.AsTrigger">
      <summary>
            Trigger is output on external output bit 3.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.InputBits">
      <summary>
            The inputs bits.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.None">
      <summary>
            No input bits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.DigitalIn1">
      <summary>
            Digital input 1
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.DigitalIn2">
      <summary>
            Digital input 2
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.DigitalIn3">
      <summary>
            Digital input 3
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.DigitalIn4">
      <summary>
            Digital input 4
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.DigitalIn5">
      <summary>
            Digital input 5
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.DigitalIn6">
      <summary>
            Digital input 6
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.Index2DoneInput">
      <summary>
            Index2 Done input
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.Index2SignalInput">
      <summary>
            Index2 Signal input
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.Index1DoneInput">
      <summary>
            Index1 Done input
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputBits.Index1SignalInput">
      <summary>
            Index1 Signal input
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.InputConfigValue">
      <summary>
            The values of <see cref="M:Triamec.Tam.Periphery.DigitalInputDevice.ReadConfigValue(System.UInt32)" />
            and <see cref="M:Triamec.Tam.Periphery.DigitalInputDevice.WriteConfigValue(System.UInt32,Triamec.Tam.Periphery.InputConfigValue)" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.InputConfigValue.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.InputConfigValue" /> class.
            </summary>
      <param name="enabledInput">if set to <see langword="true" /> [enabled input].</param>
      <param name="activeLow">if set to <see langword="true" /> [active low].</param>
      <param name="simulated">if set to <see langword="true" /> [simulated].</param>
      <param name="simulatedValue">if set to <see langword="true" /> [simulated value].</param>
      <param name="debounceTime">The debounce time [s].</param>
      <param name="isEncoderDigIn">Indicator for DigIn selection. true for Encoder DigIn; false otherwise.</param>
    </member>
    <member name="P:Triamec.Tam.Periphery.InputConfigValue.ActiveLow">
      <summary>
            Gets or sets a value indicating whether [active low] is set.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.InputConfigValue.DebounceTime">
      <summary>
            Gets or sets the debounce time, in seconds.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>The input is an encoder digital input, and the value is not in the range from <c>0</c> to
            <see cref="F:Triamec.Tam.Periphery.InputConfigValue.DebounceTimeEncoderDicitalInMax" />.</para>
        <para>-or-</para>
        <para>The input is a standard digital input and the value is not in the range from <c>0</c> to
            <see cref="F:Triamec.Tam.Periphery.InputConfigValue.DebounceTimeDigitalInMax" />.</para>
      </exception>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputConfigValue.DebounceTimeDigitalInMax">
      <summary>
            Maximum duration, in seconds, for the <see cref="P:Triamec.Tam.Periphery.InputConfigValue.DebounceTime" /> of a standard digital input.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InputConfigValue.DebounceTimeEncoderDicitalInMax">
      <summary>
            Maximum duration, in seconds, for the <see cref="P:Triamec.Tam.Periphery.InputConfigValue.DebounceTime" /> of an encoder digital input.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.InputConfigValue.EnabledInput">
      <summary>
            Gets or sets a value indicating whether input is enabled.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.InputConfigValue.ProcessedInput">
      <summary>
            Gets the processed input value.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.InputConfigValue.Simulated">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Triamec.Tam.Periphery.InputConfigValue" /> is simulated.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.InputConfigValue.SimulatedValue">
      <summary>
            Gets or sets the simulated value.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.InputConfigValue.UnprocessedInput">
      <summary>
            Gets the unprocessed input value.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.InterruptStatus1Errors">
      <summary>
            The interrupt status 1 errors.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.None">
      <summary>
            No interrupt status 1 errors
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.PowerBridgeGroundError">
      <summary>
            Power bridge ground voltage outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.LogicPrimary7Error">
      <summary>
            Primary logic voltage outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.DigitalVoltage3p3Error">
      <summary>
            Digital voltage 3.3V outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.EncoderVoltageError">
      <summary>
            Encoder voltage outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.BridgeTemperature1Error">
      <summary>
            Bridge temperature 1 outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.MonitorTemperatureError">
      <summary>
            Monitor internal temperature outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.BridgeTemperature2Error">
      <summary>
            Bridge temperature 2 outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus1Errors.InterruptStatus2Error">
      <summary>
            Error in interrupt status 2 register
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.InterruptStatus2Errors">
      <summary>
            The interrupt status 2 errors.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus2Errors.None">
      <summary>
            No interrupt status 2 errors
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus2Errors.PowerBridgeError">
      <summary>
            Power bridge ground voltage outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus2Errors.Fan1Error">
      <summary>
            Fan 1 Error
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus2Errors.Fan2Error">
      <summary>
            Fan 2 Error
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus2Errors.Fan3Error">
      <summary>
            Fan 3 Error
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus2Errors.Fan4Error">
      <summary>
            Fan 4 Error
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus2Errors.TemperatureDiode1Fault">
      <summary>
            Temperature diode 1 fault
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.InterruptStatus2Errors.TemperatureDiode2Fault">
      <summary>
            Temperature diode 2 fault
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.IPeripheryDevice">
      <summary>
            Local-bus device within a <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryDevice.Identification">
      <summary>
            Gets the identification of this periphery device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryDevice.Layout">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein this device belongs.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryDevice.Name">
      <summary>
            Gets the name of this periphery device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.IPeripheryDevice.Ping">
      <summary>
            Determines whether this periphery device is reachable.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.IPeripheryInt">
      <summary>
            Interface for <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            with a signed integer value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.IPeripheryInt.WriteValue(System.Int32)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryInt" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlyInt.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.IPeripheryLayoutOwner">
      <summary>
            Interface for owners of periphery layouts.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryLayoutOwner.Link">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamLink" /> associated to this <see cref="T:Triamec.Tam.Periphery.IPeripheryLayoutOwner" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryLayoutOwner.Periphery">
      <summary>
            Gets the root of the periphery register tree of this <see cref="T:Triamec.Tam.Periphery.IPeripheryLayoutOwner" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryLayoutOwner.PeripheryLayoutId">
      <summary>
            Gets the periphery register layout identifier.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.IPeripheryReadonlyFloat">
      <summary>
            Interface for read-only <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            with a signed integer value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.IPeripheryReadonlyFloat.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryReadonlyFloat.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.IPeripheryReadonlyInt">
      <summary>
            Interface for read-only <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            with a signed integer value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.IPeripheryReadonlyInt.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryReadonlyInt.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.IPeripheryReadonlySingle">
      <summary>
            Interface for read-only <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            with a float value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.IPeripheryReadonlySingle.ReadScaledValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryReadonlySingle.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.IPeripheryRegister">
      <summary>
            Base interface for all value types
            of <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryRegister.Access">
      <summary>
            Gets the access of this periphery register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryRegister.Address">
      <summary>
            Gets the address of this perhiphery register, relative to its <see cref="P:Triamec.Tam.Periphery.IPeripheryRegister.Device" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryRegister.Description">
      <summary>
            Gets the description of this periphery register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryRegister.Device">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryRegister.Name">
      <summary>
            Gets the name of this periphery register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IPeripheryRegister.Unit">
      <summary>
            Gets the physical unit of this periphery register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.IPeripherySingle">
      <summary>
            Interface for <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            with a float value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.IPeripherySingle.WriteValue(System.Single)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripherySingle" />.
            </summary>
      <param name="scaledValue">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scaledValue" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlySingle.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.IUpdatablePeripheryDevice">
      <summary>
        <see cref="T:Triamec.Tam.Periphery.IPeripheryDevice" /> which supports firmware downloads.</summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IUpdatablePeripheryDevice.Description">
      <summary>Gets a description for this device.</summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IUpdatablePeripheryDevice.FirmwareId">
      <summary>
            Gets the register with the firmware identification.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IUpdatablePeripheryDevice.HardwareId">
      <summary>
            Gets the register with the hardware identification.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IUpdatablePeripheryDevice.HardwareRevisionId">
      <summary>
            Gets the register with the hardware revision.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.IUpdatablePeripheryDevice.SecondaryPeripheryIndex">
      <summary>Gets the one-based index of the secondary periphery reflected by this device.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.LinkManagementUnit">
      <summary>
            A periphery sub-device within the <see cref="T:Triamec.Tam.Periphery.ManagementDevice" /> periphery device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.LinkManagementUnit.Control">
      <summary>
            Gets the control register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.LinkManagementUnit.CONTROL_ADDRESS">
      <summary>
            The register address of the control register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.LinkManagementUnit.Interrupt">
      <summary>
            Gets the interrupt register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.LinkManagementUnit.INTERRUPT_ADDRESS">
      <summary>
            The register address of the interrupt register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.LinkManagementUnit.IsConnected">
      <summary>
            Indicates whether the unit is connected with a physical link.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.LinkManagementUnit.ReceiveErrorCount">
      <summary>
            Gets the receive error count register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.LinkManagementUnit.Status">
      <summary>
            Gets the status register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.LinkManagementUnit.STATUS_ADDRESS">
      <summary>
            The register address of the status register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.ManagementDevice">
      <summary>
            The reserved periphery device with the management registers that exists in all <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.ManagementDevice.Broadcast">
      <summary>
            Gets the broadcast sub-device.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ManagementDevice.BROADCAST_ADDRESS">
      <summary>
            The device address of the broadcast device.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ManagementDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ManagementDevice.IDENTIFICATION">
      <summary>
            The device identification of the management device.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ManagementDevice.LINK2_ADDRESS">
      <summary>
            The device address of the link2 device.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ManagementDevice.LINK4_ADDRESS">
      <summary>
            The device address of the link4 device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.ManagementDevice.Units">
      <summary>
            Represents the units of the management device, except for <see cref="P:Triamec.Tam.Periphery.ManagementDevice.Broadcast" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.Micron128FlashRomProtection">
      <summary>
            Which sectors of a Micron flash ROM with 128 MBit are software protected.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.None">
      <summary>All sectors are unprotected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBitHalf">
      <summary>Only one sector protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBit">
      <summary>Two sectors protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBit2">
      <summary>Four sectors protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBit4">
      <summary>8 sectors protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBit8">
      <summary>16 sectors protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBit16">
      <summary>32 sectors protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBit32">
      <summary>64 sectors protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBit64">
      <summary>128 sectors protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.MBit128">
      <summary>All 256 sectors protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.Micron128FlashRomProtection.All">
      <summary>All sectors are protected.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.MonitorControllerDevice">
      <summary>
            Registers for the logic (index 0) and bridge (index 1) monitor input/ouput.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.MonitorControllerDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Errors">
      <summary>
            Gets the register with the bitset containing all the pending errors on the Monitor.
            Unit: -
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.FirmwareDownloadControl">
      <summary>
            Gets the register with the firmware control register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.FirmwareId">
      <summary>
            Gets the register with the firmware identification register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.FirmwareWriteAddressRequest">
      <summary>
            Gets the register with the firmware write request address register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.FirmwareWriteRequest">
      <summary>
            Gets the register with the firmware write request data register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.HardwareId">
      <summary>
            Gets the register with the hardware identification register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.HardwareRevisionId">
      <summary>
            Gets the register with the hardware revision register. The least significant byte holds the hardware compatibility identifier.
            Unit: 1
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.MonitorControllerDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.IsoAbonnement0">
      <summary>
            Gets the register with the isochronous abonnement 0 register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.IsoAbonnement1">
      <summary>
            Gets the register with the isochronous abonnement 1 register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.IsoAbonnement2">
      <summary>
            Gets the register with the isochronous abonnement 2 register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.IsoAbonnement3">
      <summary>
            Gets the register with the isochronous abonnement 3 register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.IsoAbonnement4">
      <summary>
            Gets the register with the isochronous abonnement 4 register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.IsoAbonnement5">
      <summary>
            Gets the register with the isochronous abonnement 5 register.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature0">
      <summary>
            Gets the register with the measured Temperature #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature0_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature0_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature0_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature0_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature1">
      <summary>
            Gets the register with the measured Temperature #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature1_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature1_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature1_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature1_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature2">
      <summary>
            Gets the register with the measured Temperature #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature2_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature2_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature2_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature2_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature3">
      <summary>
            Gets the register with the measured Temperature #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature3_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature3_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature3_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature3_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature4">
      <summary>
            Gets the register with the measured Temperature #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature4_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature4_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature4_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature4_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature5">
      <summary>
            Gets the register with the measured Temperature #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature5_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature5_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature5_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature5_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature6">
      <summary>
            Gets the register with the measured Temperature #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature6_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature6_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature6_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature6_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature7">
      <summary>
            Gets the register with the measured Temperature #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature7_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature7_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature7_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature7_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature8">
      <summary>
            Gets the register with the measured Temperature #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature8_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature8_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature8_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature8_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature9">
      <summary>
            Gets the register with the measured Temperature #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature9_LEL">
      <summary>
            Gets the register with the Lower Error Level for Temperature #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature9_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Temperature #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature9_UEL">
      <summary>
            Gets the register with the Upper Error Level for Temperature #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Temperature9_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Temperature #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Triamec#Tam#Periphery#IUpdatablePeripheryDevice#SecondaryPeripheryIndex">
      <summary>Gets the one-based index of the secondary periphery reflected by this device.</summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage0">
      <summary>
            Gets the register with the measured Voltage #0 (10kHz, filtered).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage0_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage0_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage0_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage0_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #0.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage1">
      <summary>
            Gets the register with the measured Voltage #1 (10kHz, filtered).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage1_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage1_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage1_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage1_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #1.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage2">
      <summary>
            Gets the register with the measured Voltage #2 (100Hz).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage2_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage2_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage2_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage2_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #2.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage3">
      <summary>
            Gets the register with the measured Voltage #3 (100Hz).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage3_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage3_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage3_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage3_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #3.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage4">
      <summary>
            Gets the register with the measured Voltage #4 (100Hz).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage4_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage4_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage4_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage4_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #4.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage5">
      <summary>
            Gets the register with the measured Voltage #5 (100Hz).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage5_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage5_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage5_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage5_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #5.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage6">
      <summary>
            Gets the register with the measured Voltage #6 (100Hz).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage6_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage6_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage6_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage6_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #6.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage7">
      <summary>
            Gets the register with the measured Voltage #7 (100Hz).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage7_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage7_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage7_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage7_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #7.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage8">
      <summary>
            Gets the register with the measured Voltage #8 (100Hz).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage8_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage8_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage8_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage8_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #8.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage9">
      <summary>
            Gets the register with the measured Voltage #9 (100Hz).
            Unit: V
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage9_LEL">
      <summary>
            Gets the register with the Lower Error Level for Voltage #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage9_LWL">
      <summary>
            Gets the register with the Lower Warning Level for Voltage #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage9_UEL">
      <summary>
            Gets the register with the Upper Error Level for Voltage #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Voltage9_UWL">
      <summary>
            Gets the register with the Upper Warning Level for Voltage #9.
            Unit: °C
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorControllerDevice.Warnings">
      <summary>
            Gets the register with the bitset containing all the pending warnings on the monitor.
            Unit: -
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.MonitorDevice">
      <summary>
            Voltage/Temperature monitor registers
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.BridgeTemperature">
      <summary>
            Gets the register with brigde temperature sensor 1 (LM73)
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.ConfigurationRegister1">
      <summary>
            Gets the register with configuration of monitor device
            Unit: 
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.MonitorDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.DigitalVoltage3p3">
      <summary>
            Gets the register with digital voltage (3.3V)
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.DigitalVoltage3p3HighLimit">
      <summary>
            Gets the register with digital voltage high limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.DigitalVoltage3p3LowLimit">
      <summary>
            Gets the register with digital voltage low limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.EncoderVoltage">
      <summary>
            Gets the register with encoder voltage (5V)
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.EncoderVoltageHighLimit">
      <summary>
            Gets the register with encoder voltage high limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.EncoderVoltageLowLimit">
      <summary>
            Gets the register with encoder voltage low limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.HardwareRevisionBackupId">
      <summary>
            Gets the register with the least significant bits of the hardware revision Id
            Unit: 1
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.MonitorDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.InterruptStatus1">
      <summary>
            Gets the register with interrupt status 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.InterruptStatus2">
      <summary>
            Gets the register with interrupt status 2
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.LogicPrimary7">
      <summary>
            Gets the register with primary logic voltage unregulated(7V) 
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.LogicPrimary7HighLimit">
      <summary>
            Gets the register with primary logic voltage high limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.LogicPrimary7LowLimit">
      <summary>
            Gets the register with primary logic voltage low limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.MonitorTemperature">
      <summary>
            Gets the register with monitor internal temperature
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.MonitorTemperatureHighLimit">
      <summary>
            Gets the register with monitor internal temperature high limit
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.MonitorTemperatureLowLimit">
      <summary>
            Gets the register with monitor internal temperature low limit
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.PBridge">
      <summary>
            Gets the register with bridge voltage (105V max.)
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.PBridgeGround">
      <summary>
            Gets the register with power bridge ground voltage (5V)
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.PBridgeGroundHighLimit">
      <summary>
            Gets the register with power bridge ground voltage high limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.PBridgeGroundLowLimit">
      <summary>
            Gets the register with power bridge ground voltage low limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.PBridgeHighLimit">
      <summary>
            Gets the register with power bridge voltage high limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.PBridgeLowLimit">
      <summary>
            Gets the register with power bridge voltage low limit
            Unit: Volts
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.RemoteTemperature1">
      <summary>
            Gets the register with remote temperature 1
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.RemoteTemperature1HighLimit">
      <summary>
            Gets the register with remote temperature 1 high limit
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.RemoteTemperature1LowLimit">
      <summary>
            Gets the register with remote temperature 1 low limit
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.RemoteTemperature2">
      <summary>
            Gets the register with remote temperature 2
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.RemoteTemperature2HighLimit">
      <summary>
            Gets the register with remote temperature 2 high limit
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorDevice.RemoteTemperature2LowLimit">
      <summary>
            Gets the register with remote temperature 2 low limit
            Unit: Deg. Celsius
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.MonitorFirmwareControl">
      <summary>
            Monitor IO device firmware control.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> struct.
            </summary>
      <param name="baseImage">Selector for firmware image to operate on.</param>
      <param name="delete">Delete the selected firmware and its startcode.</param>
      <param name="startCode">Request or set the selected firmware startCode.</param>
      <param name="verify">Request verification of selected firmware range.</param>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorFirmwareControl.BaseImage">
      <summary>
            Gets or sets selector for firmware image to operate on.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorFirmwareControl.Delete">
      <summary>
            Gets or sets delete the selected firmware and its startcode.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.Equals(Triamec.Tam.Periphery.MonitorFirmwareControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.op_Equality(Triamec.Tam.Periphery.MonitorFirmwareControl,Triamec.Tam.Periphery.MonitorFirmwareControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.MonitorFirmwareControl">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.op_Implicit(Triamec.Tam.Periphery.MonitorFirmwareControl)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.op_Inequality(Triamec.Tam.Periphery.MonitorFirmwareControl,Triamec.Tam.Periphery.MonitorFirmwareControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorFirmwareControl.StartCode">
      <summary>
            Gets or sets request or set the selected firmware startCode.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.ToMonitorFirmwareControl(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorFirmwareControl.ToUint32(Triamec.Tam.Periphery.MonitorFirmwareControl)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorFirmwareControl.Verify">
      <summary>
            Gets or sets request verification of selected firmware range.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.MonitorInfo">
      <summary>
            Information about a peripheral microcontroller used for monitoring.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorInfo.GetMonitorInfo(System.String)">
      <summary>
            Gets the monitor controller information for a specified firmware.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.MonitorInfo.GetMonitorInfo(Triamec.Tam.Periphery.MonitorControllerDevice)">
      <summary>
            Gets the monitor controller information from the specified monitor controller.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorInfo.Name">
      <summary>
            Gets the name of the monitor.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.MonitorInfo.Prefix">
      <summary>
            Gets the first part of the product type used to identify the monitor.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.OutputBits">
      <summary>
            The outputs bits.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.None">
      <summary>
            No output bits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.DigitalOut1">
      <summary>
            Digital output 1
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.DigitalOut2">
      <summary>
            Digital output 2
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.PowerBridgeShutdown">
      <summary>
            Power bridge shutdown
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.Index2LatchControl">
      <summary>
            Index2 Latch control
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.Index1LatchControl">
      <summary>
            Index1 Latch control
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.LedReadyRed">
      <summary>
            Led ready red
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.LedReadyGreen">
      <summary>
            Led ready green
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.LedPowerRed">
      <summary>
            Led power red
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.OutputBits.LedPowerGreen">
      <summary>
            Led power green
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PacketFeeder">
      <summary>
            A periphery sub-device within a <see cref="T:Triamec.Tam.Periphery.PacketFeedersDevice" /> representing a single packet feeder.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.ClearFifoError">
      <summary>
            Clears a pending FIFO error.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.ColumnCount">
      <summary>
            Gets or sets the column count of the <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />s in this <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.DOWNSAMPLING_CONTROL_ADDRESS">
      <summary>
            The register address of the downsampling control register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.DownsamplingControl">
      <summary>
            Gets the downsampling control register with the downsampling,
            in units of <see cref="P:Triamec.Tam.TamLink.TickPeriod" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.ENABLE_CONTROL_ADDRESS">
      <summary>
            The register address of the enable control register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.ENABLE_STATUS_ADDRESS">
      <summary>
            The register address of the enable status register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.EnableControl">
      <summary>
            Gets the enable control register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.EnableStatus">
      <summary>
            Gets the register with the bitset of currently processed <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.FeedAttachMove(System.UInt32,Triamec.Tam.Periphery.PacketFeederTable[])">
      <summary>
            Directs the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> to feed the values of the specified tables
            when finished feeding the current tables.
            </summary>
      <returns>Whether the command was not interrupted.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tables" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than
            <see cref="F:Triamec.Tam.Periphery.PacketFeeder.MIN_LENGTH" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tables" /> contains <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />s
            that do not belong to this <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>The command was not acknowledged.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>A FIFO error occurred.</para>
        <para>-or-</para>
        <para>A local-bus timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.FeedCycleMove">
      <summary>
            Directs the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> to repeatedly send all values of the previously prepared
            <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />s.
            </summary>
      <returns>Whether the command was not interrupted.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>The command was not acknowledged.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>A FIFO error occurred.</para>
        <para>-or-</para>
        <para>A local-bus timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.FeedFirst(System.UInt32,Triamec.Tam.Periphery.PacketFeederTable[])">
      <summary>
            Directs the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> to use the specified tables up to a specified length, and to
            continuously send the first value of these tables.
            </summary>
      <param name="length">The length of the <paramref name="tables" />.
            The value must be greater than or equal <see cref="F:Triamec.Tam.Periphery.PacketFeeder.MIN_LENGTH" />.</param>
      <param name="tables">The tables to apply the command to.</param>
      <returns>Whether the command was not interrupted.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tables" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than
            <see cref="F:Triamec.Tam.Periphery.PacketFeeder.MIN_LENGTH" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tables" /> contains <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />s
            that do not belong to this <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>The command was not acknowledged.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>A FIFO error occurred.</para>
        <para>-or-</para>
        <para>A local-bus timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.FeedLast">
      <summary>
            Directs the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> to no longer move through an additional <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />
            after the current <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" /> is finished
            and blocks until feeding the last value of the current <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />.
            </summary>
      <returns>Whether the command was not interrupted.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>The command was not acknowledged.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>A FIFO error occurred.</para>
        <para>-or-</para>
        <para>A local-bus timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.FeedMove">
      <summary>
            Directs the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> to send all values of the previously prepared <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />s.
            </summary>
      <returns>Whether the command was not interrupted.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>The command was not acknowledged.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>A FIFO error occurred.</para>
        <para>-or-</para>
        <para>A local-bus timeout occurred.</para>
      </exception>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.GENERAL_CONTROL_ADDRESS">
      <summary>
            The register address of the general control register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.GENERAL_STATUS_ADDRESS">
      <summary>
            The register address of the general status register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.GeneralControl">
      <summary>
            Gets the general control register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.GeneralStatus">
      <summary>
            Gets the general status register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.GetEnabledTables">
      <summary>
            Gets the tables enabled in the currently executing feeder command.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.HandshakeTimeout">
      <summary>
            Gets or sets the handshake timeout, in milliseconds.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" /> at the specified index.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If the index is below <c>0</c> or not below <c>TABLE_COUNT</c>.
            </exception>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.LENGTH_CONTROL_ADDRESS">
      <summary>
            The register address of the length control register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.LENGTH_STATUS_ADDRESS">
      <summary>
            The register address of the length status register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.LengthControl">
      <summary>
            Gets the length control register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.LengthStatus">
      <summary>
            Gets the register with the length of currently processed tables.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.Link">
      <summary>
            Gets the link where this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionParticipant" /> belongs to.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.MIN_LENGTH">
      <summary>
            The minimum length value to use in <see cref="M:Triamec.Tam.Periphery.PacketFeeder.FeedFirst(System.UInt32,Triamec.Tam.Periphery.PacketFeederTable[])" /> and
            <see cref="M:Triamec.Tam.Periphery.PacketFeeder.FeedAttachMove(System.UInt32,Triamec.Tam.Periphery.PacketFeederTable[])" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.POLLING_INTERVAL">
      <summary>
            The time span to wait between subsequent pollings of the <see cref="P:Triamec.Tam.Periphery.PacketFeeder.GeneralStatus" />, in milliseconds.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.POSITION_STATUS_ADDRESS">
      <summary>
            The register address of the position status register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.PositionStatus">
      <summary>
            Gets the register with the position in currently processed tables.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.Stop">
      <summary>
            Directs the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> to stop any sending of table values.
            </summary>
      <returns>Whether the command was not interrupted.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>The command was not acknowledged.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TamException">
        <para>A FIFO error occurred.</para>
        <para>-or-</para>
        <para>A local-bus timeout occurred.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.System#Collections#Generic#ICollection{Triamec#Tam#Subscriptions#ISubscribable}#Count">
      <summary>
            Gets the number of subscribables contained in this publisher.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeeder.TABLE_COUNT">
      <summary>
            The number of <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />s in a <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.TableCount">
      <summary>
            Gets the number of <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />s in this <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.Triamec#Tam#Subscriptions#IPublisher#Downsampling">
      <summary>
            Gets the ratio of the desired sampling time to the <see cref="P:Triamec.Tam.ITamDevice.IsochronousBasePeriod" />
            of the <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeeder.Triamec#Tam#Subscriptions#IPublisher#GetValueIndex(Triamec.Tam.Subscriptions.ISubscribable)">
      <summary>
            Gets the index of the first value in a <see cref="T:Triamec.TriaLink.Packets.Packet" /> belonging the specified
            subscribable.
            </summary>
      <param name="subscribable">One of the members of this <see cref="T:Triamec.Tam.Subscriptions.IPublisher" />.</param>
      <returns>The index of the first value in a <see cref="T:Triamec.TriaLink.Packets.Packet" /> 
            belonging to the <paramref name="subscribable" />.
            <para>
            The other values, if any, are always lined up after the first value. 
            </para></returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Always thrown because a <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> works without any
            <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" />s.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeeder.Triamec#Tam#Subscriptions#IPublisher#Speed">
      <summary>
            Indicates whether to enable the highspeed mechanism for this <see cref="T:Triamec.Tam.Subscriptions.IPublisher" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PacketFeederActivities">
      <summary>
            The activities of a packet feeder.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeederActivities.None">
      <summary>
            No activity.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeederActivities.Send">
      <summary>
            Sending of the first table entry.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeederActivities.Move">
      <summary>
            Moving through the table entries.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeederActivities.CycleMove">
      <summary>
            Cycling through the table entries.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeederActivities.AttachMove">
      <summary>
            Signalling a new move to the current move.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeederActivities.Mask">
      <summary>
            Activity mask.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PacketFeederGeneralControl">
      <summary>
            General packet feeder control.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.#ctor(Triamec.Tam.Periphery.PacketFeederActivities,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> struct.
            </summary>
      <param name="activity">The new activity for the feeder.</param>
      <param name="clearFifoError">Whether to clear a pending FIFO error.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the values does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederGeneralControl.Activity">
      <summary>
            Gets or sets the new activity for the feeder.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederGeneralControl.ClearFifoError">
      <summary>
            Gets or sets whether to clear a pending FIFO error.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.Equals(Triamec.Tam.Periphery.PacketFeederGeneralControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.op_Equality(Triamec.Tam.Periphery.PacketFeederGeneralControl,Triamec.Tam.Periphery.PacketFeederGeneralControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.PacketFeederGeneralControl">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.op_Implicit(Triamec.Tam.Periphery.PacketFeederGeneralControl)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.op_Inequality(Triamec.Tam.Periphery.PacketFeederGeneralControl,Triamec.Tam.Periphery.PacketFeederGeneralControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.ToPacketFeederGeneralControl(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralControl.ToUint32(Triamec.Tam.Periphery.PacketFeederGeneralControl)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" />.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus">
      <summary>
            General packet feeder status.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.#ctor(Triamec.Tam.Periphery.PacketFeederActivities,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> struct.
            </summary>
      <param name="activity">The current activity of the feeder.</param>
      <param name="isDone">Whether the last position is being fed.</param>
      <param name="clearFifoError">Whether a pending FIFO error is being cleared.</param>
      <param name="hasFifoError">Whether not all packets could be transmitted due to bandwidth limits.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the values does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederGeneralStatus.Activity">
      <summary>
            Gets or sets the current activity of the feeder.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederGeneralStatus.ClearFifoError">
      <summary>
            Gets or sets whether a pending FIFO error is being cleared.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.Equals(Triamec.Tam.Periphery.PacketFeederGeneralStatus)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederGeneralStatus.HasFifoError">
      <summary>
            Gets or sets whether not all packets could be transmitted due to bandwidth limits.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederGeneralStatus.IsDone">
      <summary>
            Gets or sets whether the last position is being fed.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.op_Equality(Triamec.Tam.Periphery.PacketFeederGeneralStatus,Triamec.Tam.Periphery.PacketFeederGeneralStatus)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.PacketFeederGeneralStatus">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.op_Implicit(Triamec.Tam.Periphery.PacketFeederGeneralStatus)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.op_Inequality(Triamec.Tam.Periphery.PacketFeederGeneralStatus,Triamec.Tam.Periphery.PacketFeederGeneralStatus)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.ToPacketFeederGeneralStatus(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederGeneralStatus.ToUint32(Triamec.Tam.Periphery.PacketFeederGeneralStatus)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" />.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.PacketFeedersDevice">
      <summary>
            The periphery device for the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />s.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeedersDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeedersDevice.FeederCount">
      <summary>
            Gets the number of <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />s in this device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeedersDevice.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeedersDevice.IDENTIFICATION">
      <summary>
            The identification of the periphery device for the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeedersDevice.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> at the specified index.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If the index is below <c>0</c> or not below <c>TABLE_FEEDER_COUNT</c>.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeedersDevice.PacketCapacity">
      <summary>
            Gets the capacity, in packets, of the packet feeder memory.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeedersDevice.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="F:Triamec.Tam.Periphery.PacketFeedersDevice.TABLE_FEEDER_COUNT">
      <summary>
            The number of <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />s in a <see cref="T:Triamec.Tam.Periphery.PacketFeedersDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PacketFeederTable">
      <summary>
            A periphery sub-device within a <see cref="T:Triamec.Tam.Periphery.PacketFeeder" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PacketFeeder" /> where this <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" /> belongs to.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederTable.Fill(Triamec.Tam.Subscriptions.ISubscription,System.UInt32,Triamec.TriaLink.TamValue32[])">
      <summary>
            Fills one <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" /> into this <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />.
            </summary>
      <param name="subscription">The subscription to create the <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" /> for.</param>
      <param name="rowIndex">The row index in this <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" /> where to fill the subscription
            <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />.</param>
      <param name="values">The subscription values to use in the subscription
            <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="subscription" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="values" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The number of elements in <paramref name="values" /> is not exactly equal to the 
            	<see cref="P:Triamec.Tam.Periphery.PacketFeeder.ColumnCount" /> of the <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder" />.</para>
        <para>-or-</para>
        <para>The <see cref="P:Triamec.Tam.Subscriptions.ISubscription.Publisher" /> of the <paramref name="subscription" />
            does not equal the <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="rowIndex" /> is greater or equal to the <see cref="P:Triamec.Tam.Periphery.PacketFeedersDevice.PacketCapacity" />
            of the <see cref="P:Triamec.Tam.Periphery.PeripherySubDevice.ParentDevice" /> of the <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder" />.
            </exception>
      <exception cref="T:System.NotSupportedException">The periphery layout of the packet feeder does not belong to a
            <see cref="T:Triamec.Tam.TamAdapter" /> with an <see cref="T:Triamec.TriaLink.Adapter.ISdramTxFifo" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederTable.Fill(Triamec.Tam.Subscriptions.ISubscription,System.UInt32,Triamec.TriaLink.TamValue32[][])">
      <summary>
            Fills several <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />s into this <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" />.
            </summary>
      <param name="subscription">The subscription.</param>
      <param name="rowBaseIndex">Index of the row base.</param>
      <param name="values">The values.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="rowBaseIndex" /> incremented by the length of <paramref name="values" /> is greater or
            equal to the <see cref="P:Triamec.Tam.Periphery.PacketFeedersDevice.PacketCapacity" /> of the
            <see cref="P:Triamec.Tam.Periphery.PeripherySubDevice.ParentDevice" /> of the <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="subscription" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="values" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The number of elements in <paramref name="values" /> is not exactly equal to the 
            	<see cref="P:Triamec.Tam.Periphery.PacketFeeder.ColumnCount" /> of the <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder" />.</para>
        <para>-or-</para>
        <para>The <see cref="P:Triamec.Tam.Subscriptions.ISubscription.Publisher" /> of the <paramref name="subscription" />
            does not equal the <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder" />.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The periphery layout of the packet feeder does not belong to a
            <see cref="T:Triamec.Tam.TamAdapter" /> with an <see cref="T:Triamec.TriaLink.Adapter.ISdramTxFifo" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederTable.TableAddress">
      <summary>
            Gets the start address of this <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" /> in the SDRAM,
            in units of <see cref="T:Triamec.TriaLink.Packets.Packet" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PacketFeederTable.TableIndex">
      <summary>
            Gets the index of this table within its <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PacketFeederTable.WriteTableAddress(System.UInt32)">
      <summary>
            Updates the <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.TableAddress" /> property.
            </summary>
      <param name="address">The start address of this <see cref="T:Triamec.Tam.Periphery.PacketFeederTable" /> in the SDRAM,
            in units of <see cref="T:Triamec.TriaLink.Packets.Packet" />s.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is greater or equal to the <see cref="P:Triamec.Tam.Periphery.PacketFeedersDevice.PacketCapacity" />
            	of the <see cref="P:Triamec.Tam.Periphery.PeripherySubDevice.ParentDevice" /> of the <see cref="P:Triamec.Tam.Periphery.PacketFeederTable.Feeder" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryAccess">
      <summary>
            Access flags of an <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PeripheryAccess.None">
      <summary>None</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PeripheryAccess.Read">
      <summary>Read</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PeripheryAccess.Write">
      <summary>Write</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PeripheryAccess.ReadWrite">
      <summary>ReadWrite</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryBool">
      <summary>
            A periphery register of boolean type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryBool.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PeripheryBool" /> class.
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register. This parameter is ignored.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryBool.WriteValue(System.Boolean)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryBool" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.PeripheryReadonlyUInt.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryCache">
      <summary>
            Container of a <see cref="P:Triamec.Tam.Periphery.PeripheryCache.Register" /> and an associated <see cref="P:Triamec.Tam.Periphery.PeripheryCache.Value" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryCache.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Tam.Periphery.PeripheryCache</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryCache.IsDefault">
      <summary>
            Gets a value indicating whether this instance points to <see cref="P:Triamec.Tam.Periphery.PeripheryLayout.Null" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryCache.Layout">
      <summary>
            Gets the owning <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryCache.Register">
      <summary>
            Gets or sets the <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" /> is set.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Type" /> of <paramref name="value" /> is not
            supported.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryCache.Value">
      <summary>
            Gets or sets the value associated with the <see cref="P:Triamec.Tam.Periphery.PeripheryCache.Register" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryChannelGain">
      <summary>
            A periphery register for the non-linear channel gain.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryChannelGain.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryChannelGain.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryChannelGain.WriteValue(System.Single)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripherySingle" />.
            </summary>
      <param name="scaledValue">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scaledValue" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlySingle.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryChannelGain.WriteValue(System.UInt32)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryChannelGain" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlyInt.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryDevice">
      <summary>
            Base class for a FPGA local-bus device within a <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryDevice.#ctor(Triamec.Tam.Periphery.PeripheryLayout,Triamec.TriaLink.PeripheryDeviceIdentification,System.Int32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> class.
            </summary>
      <param name="index">A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="identification">The identification of the periphery device.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is <see cref="F:System.Int32.MaxValue" />.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="layout" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryDevice.#ctor(Triamec.Tam.Periphery.PeripheryLayout,Triamec.TriaLink.PeripheryDeviceIdentification,System.UInt32,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> class.
            </summary>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="identification">The identification of the periphery device.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="layout" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryDevice.Description">
      <summary>
            Gets the description of this periphery device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryDevice.Identification">
      <summary>
            Gets the identification of this perhiphery device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryDevice.Index">
      <summary>
            Gets a number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryDevice.Layout">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein this device belongs.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryDevice.Name">
      <summary>
            Gets the name of this periphery device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryDevice.Ping">
      <summary>
            Determines whether this periphery device is reachable.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryDevice.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryEncoderAnalogConfiguration">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryEncoderAnalogConfiguration.WriteValue(Triamec.Tam.Periphery.EncoderAnalogConfiguration)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryEncoderAnalogConfiguration" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryEncoderDataSelection">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryEncoderDataSelection.WriteValue(Triamec.Tam.Periphery.EncoderDataSelection)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryEncoderDataSelection" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryEncoderGeneralConfiguration">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryEncoderGeneralConfiguration.WriteValue(Triamec.Tam.Periphery.EncoderGeneralConfiguration)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryEncoderGeneralConfiguration" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryEncoderSerialHardwareSource">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryEncoderSerialHardwareSource.WriteValue(Triamec.Tam.Periphery.EncoderSerialHardwareSource)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryEncoderSerialHardwareSource" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryEncoderSourceFull">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderSourceFull" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryEncoderSourceFull.WriteValue(Triamec.Tam.Periphery.EncoderSourceFull)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryEncoderSourceFull" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryExternalEncoderIO">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.ExternalEncoderIO" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryExternalEncoderIO.WriteValue(Triamec.Tam.Periphery.ExternalEncoderIO)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryExternalEncoderIO" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryFloat">
      <summary>
            A periphery register of float32 type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryFloat.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryFloat.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryFloat.WriteValue(System.Single)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripherySingle" />.
            </summary>
      <param name="scaledValue">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scaledValue" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlySingle.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryLayout">
      <summary>Layout describing access to peripheral devices accessible through the FPGA local-bus.</summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.Add(Triamec.Tam.Periphery.PeripheryDevice)">
      <summary>
            Adds a periphery device to this layout.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.AddIfResponsive(Triamec.Tam.Periphery.PeripheryDevice)">
      <summary>Adds a periphery device to this layout, if it responds to a request.</summary>
      <param name="peripheryDevice">The periphery device to add to this layout.</param>
      <param name="pingAddress">The device-level address to use for the responsiveness test. The default is
            <c>1</c>.</param>
      <returns>Whether the device was actually added.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.AddIfResponsive(Triamec.Tam.Periphery.PeripheryDevice,System.UInt32)">
      <summary>Adds a periphery device to this layout, if it responds to a request.</summary>
      <param name="peripheryDevice">The periphery device to add to this layout.</param>
      <param name="pingAddress">The device-level address to use for the responsiveness test. The default is
            <c>1</c>.</param>
      <returns>Whether the device was actually added.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.Contains(Triamec.TriaLink.PeripheryDeviceIdentification)">
      <summary>
            Determines whether this layout contains the device with the specified identification.
            </summary>
      <param name="index">A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="identification">The identification of the periphery device.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <returns>Returns <see langword="true" /> if this layout contains
            a device with the specified <paramref name="identification" />;
            otherwise, returns <see langref="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.Contains(Triamec.TriaLink.PeripheryDeviceIdentification,System.Int32)">
      <summary>
            Determines whether this layout contains the device with the specified identification and index.
            </summary>
      <param name="index">A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="identification">The identification of the periphery device.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <returns>Returns <see langword="true" /> if this layout contains
            a device with the specified <paramref name="identification" />;
            otherwise, returns <see langref="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryLayout.FlashMapId">
      <summary>
            Indicates the flash map ID of this adapter.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.GetDevice(System.Int32)">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> with the specified identification.
            </summary>
      <param name="index">A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="identification">The identification of the periphery device.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The layout does not contain a device with the specified
            <paramref name="identification" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.GetDevice(System.Int32,System.Int32)">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> with the specified identification and index.
            </summary>
      <param name="index">A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="identification">The identification of the periphery device.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The layout does not contain a device with the specified
            <paramref name="identification" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.GetDevice(Triamec.TriaLink.PeripheryDeviceIdentification)">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> with the specified identification.
            </summary>
      <param name="index">A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="identification">The identification of the periphery device.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The layout does not contain a device with the specified
            <paramref name="identification" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.GetDevice(Triamec.TriaLink.PeripheryDeviceIdentification,System.Int32)">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> with the specified identification and index.
            </summary>
      <param name="index">A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="identification">The identification of the periphery device.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The layout does not contain a device with the specified
            <paramref name="identification" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryLayout.Null">
      <summary>
            Gets the default local-bus device which points to nowhere.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryLayout.Owner">
      <summary>
            Gets the owner that this <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> is associated with.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryLayout.PersistentRegisters">
      <summary>
            Gets a list which can be used to persist registers between power-cycles.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.Populate">
      <summary>Populates this instance with <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />s.</summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.PopulateIfNotZero">
      <summary>
            Populates this instance with <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />s if the PLID is greater than <c>0</c>.
            </summary>
      <returns>An exception on timeout; otherwise, <see langword="null" />.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the 
            <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />s of this <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" />.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" />
            that can be used to iterate through the 
            <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />s of this <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.TryGetDevice``1(Triamec.TriaLink.PeripheryDeviceIdentification,System.Int32,``0@)">
      <summary>
            Attempts to retrieve the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> with the specified identification and index.
            </summary>
      <param name="identification">The identification of the periphery device.</param>
      <param name="index">
            A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.
            </param>
      <param name="device">The device or <see langword="null" /> if not found.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <returns>Whether the device was found.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryLayout.TryGetDevice``1(Triamec.TriaLink.PeripheryDeviceIdentification,``0@)">
      <summary>
            Attempts to retrieve the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> with the specified identification.
            </summary>
      <param name="identification">The identification of the periphery device.</param>
      <param name="index">
            A number identifying the device within several devices with the same
            <see cref="T:Triamec.TriaLink.PeripheryDeviceIdentification" />. Typically, there may be up to four devices with the same
            identification.
            </param>
      <param name="device">The device or <see langword="null" /> if not found.</param>
      <param name="layout">The <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" /> wherein the device belongs.</param>
      <param name="subaddress">An offset to add to any <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />s
            <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" /> of the new <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.</param>
      <param name="name">The name of the peripheral device.</param>
      <param name="description">The description of this periphery device.</param>
      <returns>Whether the device was found.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryMInt">
      <summary>
            A periphery register of signed-magnitude integer type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryMInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryMInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryMInt.WriteValue(System.Int32)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryInt" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlyInt.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryMInt.WriteValue(System.Single)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripherySingle" />.
            </summary>
      <param name="scaledValue">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scaledValue" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlySingle.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryMonitorFirmwareControl">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryMonitorFirmwareControl.WriteValue(Triamec.Tam.Periphery.MonitorFirmwareControl)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryMonitorFirmwareControl" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryPacketFeederGeneralControl">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPacketFeederGeneralControl.WriteValue(Triamec.Tam.Periphery.PacketFeederGeneralControl)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryPacketFeederGeneralControl" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryPacketFeederGeneralStatus">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPacketFeederGeneralStatus.WriteValue(Triamec.Tam.Periphery.PacketFeederGeneralStatus)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryPacketFeederGeneralStatus" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryPersistence">
      <summary>
            Collection of address-value pairs holding peripheral data.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPersistence.ClearAll">
      <summary>
            Clears all.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPersistence.ClearAt(System.Int32)">
      <summary>
            Clears the <see cref="T:Triamec.Tam.Periphery.PeripheryCache" /> at the specified index.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than <c>0</c>.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryPersistence.Layout">
      <summary>
            Gets the owning <see cref="T:Triamec.Tam.Periphery.PeripheryLayout" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPersistence.Read">
      <summary>
            Updates all caches from the device.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPersistence.ReadAllExceptAt(System.Int32)">
      <summary>
            Updates all caches from the device, except at the specified index.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPersistence.ReadAt(System.Int32)">
      <summary>
            Updates the caches from the device at the specified index.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than <c>0</c>.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPersistence.Write">
      <summary>
            Writes all caches to the device.
            </summary>
      <exception cref="T:System.InvalidCastException">One of the <see cref="P:Triamec.Tam.Periphery.PeripheryCache.Value" />s does not
            conform to the <see cref="M:Triamec.TriaLink.TamValue32.#ctor(System.IConvertible)" /> constructor.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPersistence.WriteAt(System.Int32)">
      <summary>
            Writes the cache at the specified index to the device.
            </summary>
      <param name="index">The index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than <c>0</c>.</para>
        <para>-or-</para>
        <para>
          <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</para>
      </exception>
      <exception cref="T:System.InvalidCastException">
            The <see cref="P:Triamec.Tam.Periphery.PeripheryCache.Value" /> does not conform to the <see cref="M:Triamec.TriaLink.TamValue32.#ctor(System.IConvertible)" />
            constructor.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryPulseTrainBaseConfiguration">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryPulseTrainBaseConfiguration.WriteValue(Triamec.Tam.Periphery.PulseTrainBaseConfiguration)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryPulseTrainBaseConfiguration" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyBool">
      <summary>
            A read-only periphery register of boolean type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyBool.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyBool" /> class.
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register. This parameter is ignored.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyBool.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyBool" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain">
      <summary>
            A read-only periphery register for the non-linear channel gain.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="F:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain.MAX_GAIN">
      <summary>
            The maximum gain value.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain.MaxRegisterValue">
      <summary>
            Gets the maximum register value.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain.MIN_GAIN">
      <summary>
            The minimum gain value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain.ReadScaledValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryReadonlySingle" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryReadonlyInt" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryReadonlyChannelGain.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderADConfigurationTypes">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderADConfigurationTypes" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyEncoderADConfigurationTypes.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderADConfigurationTypes" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderADMuxTypes">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderADMuxTypes" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyEncoderADMuxTypes.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderADMuxTypes" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderAnalogConfiguration">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderAnalogConfiguration" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyEncoderAnalogConfiguration.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderAnalogConfiguration" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderDataSelection">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderDataSelection" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyEncoderDataSelection.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderDataSelection" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderGeneralConfiguration">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderGeneralConfiguration" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyEncoderGeneralConfiguration.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderGeneralConfiguration" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderSerialHardwareSource">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderSerialHardwareSource" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyEncoderSerialHardwareSource.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderSerialHardwareSource" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderSourceFull">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.EncoderSourceFull" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyEncoderSourceFull.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyEncoderSourceFull" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyExternalEncoderIO">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.ExternalEncoderIO" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyExternalEncoderIO.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyExternalEncoderIO" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyFloat">
      <summary>
            A read-only periphery register of float32 type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyFloat.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyFloat.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyFloat.ReadScaledValue">
      <summary>
            Reads the scaled value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyFloat" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyFloat.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryReadonlyFloat.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyInputBits">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.InputBits" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyInputBits.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyInputBits" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyInterruptStatus1Errors">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.InterruptStatus1Errors" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyInterruptStatus1Errors.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyInterruptStatus1Errors" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyInterruptStatus2Errors">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.InterruptStatus2Errors" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyInterruptStatus2Errors.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyInterruptStatus2Errors" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyMInt">
      <summary>
            A read-only periphery register of signed-magnitude integer type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyMInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyMInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyMInt.ReadScaledValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyMInt.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryInt" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryReadonlyMInt.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyMonitorFirmwareControl">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.MonitorFirmwareControl" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyMonitorFirmwareControl.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyMonitorFirmwareControl" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyOutputBits">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.OutputBits" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyOutputBits.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyOutputBits" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyPacketFeederGeneralControl">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralControl" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyPacketFeederGeneralControl.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyPacketFeederGeneralControl" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyPacketFeederGeneralStatus">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.PacketFeederGeneralStatus" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyPacketFeederGeneralStatus.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyPacketFeederGeneralStatus" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyPllPhasePair">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyPllPhasePair.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyPllPhasePair" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyPulseTrainBaseConfiguration">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyPulseTrainBaseConfiguration.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyPulseTrainBaseConfiguration" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlySInt">
      <summary>
            A read-only periphery register of signed two's-complement integer type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlySInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlySInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlySInt.ReadScaledValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlySInt.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryReadonlySInt.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlySpiControl">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.SpiControl" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlySpiControl.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlySpiControl" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlySupervisionErrors">
      <summary>
            The read-only, custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.SupervisionErrors" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlySupervisionErrors.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlySupervisionErrors" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryReadonlyUInt">
      <summary>
            A read-only periphery register of unsigned integer type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyUInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyUInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyUInt.ReadScaledValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryReadonlyUInt.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryReadonlyUInt" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryReadonlyUInt.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.Tam.Periphery.IPeripheryRegister" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryRegister">
      <summary>
            Base class for a periphery register 
            within a <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryRegister.Access">
      <summary>
            Gets the access of this periphery register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryRegister.Address">
      <summary>
            Gets the address of this perhiphery register, relative to its <see cref="P:Triamec.Tam.Periphery.IPeripheryRegister.Device" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryRegister.Description">
      <summary>
            Gets the description of this periphery register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryRegister.Device">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress">
      <summary>
            The maximum possible value for <see cref="P:Triamec.Tam.Periphery.PeripheryRegister.Address" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryRegister.Name">
      <summary>
            Gets the name of this periphery register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PeripheryRegister.NO_UNIT">
      <summary>
            The invalid unit for periphery register
            where a unit does not make sense.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryRegister.ReadValue">
      <summary>
            Reads the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryRegister.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripheryRegister.Unit">
      <summary>
            Gets the physical unit of this periphery register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryRegister.WriteValue(Triamec.TriaLink.TamValue32)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripherySInt">
      <summary>
            A periphery register of signed two's-complement integer type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripherySInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripherySInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripherySInt.WriteValue(System.Int32)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripheryInt" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlyInt.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripherySInt.WriteValue(System.Single)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripherySingle" />.
            </summary>
      <param name="scaledValue">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scaledValue" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlySingle.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripherySpiControl">
      <summary>
            The custom <see cref="T:Triamec.Tam.Periphery.PeripheryRegister" />
            for registers of the  type <see cref="T:Triamec.Tam.Periphery.SpiControl" /></summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripherySpiControl.WriteValue(Triamec.Tam.Periphery.SpiControl)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripherySpiControl" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripherySubDevice">
      <summary>
            Base class for a periphery sub device within a <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripherySubDevice.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PeripherySubDevice" /> class.
            </summary>
      <param name="parentDevice">The parent device where this sub device is located.</param>
      <param name="name">The name of this periphery sub device.</param>
      <param name="description">The description of this periphery sub device.</param>
      <param name="subaddress">The sub address of this periphery sub device.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentDevice" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PeripherySubDevice.ParentDevice">
      <summary>
            Gets the parent device of this periphery sub device.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PeripheryUInt">
      <summary>
            A periphery register of unsigned integer type.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryUInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryUInt.#ctor(Triamec.Tam.Periphery.PeripheryDevice,System.String,System.String,System.String,Triamec.Tam.Periphery.PeripheryAccess,System.UInt32,System.Byte,System.Single,System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="device">The <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> wherein this periphery register belongs.</param>
      <param name="name">The name of this periphery register.</param>
      <param name="description">The description of this periphery register.</param>
      <param name="unit">The physical unit of this periphery register.</param>
      <param name="access">The access of this periphery register.</param>
      <param name="address">The address of this periphery register,
            relative to its <paramref name="device" />.</param>
      <param name="width">The bit width of this peripheral register.</param>
      <param name="offset">The offset for transforming
            the raw value into a scaled value.</param>
      <param name="scale">The scale for transforming
            the raw value into a scaled value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryUInt.WriteValue(System.Single)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.IPeripherySingle" />.
            </summary>
      <param name="scaledValue">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scaledValue" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.IPeripheryReadonlySingle.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PeripheryUInt.WriteValue(System.UInt32)">
      <summary>
            Writes the value of this <see cref="T:Triamec.Tam.Periphery.PeripheryUInt" />.
            </summary>
      <param name="value">The value to write to the peripheral register.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> uses more bits than specified by <see cref="P:Triamec.Tam.Periphery.PeripheryReadonlyUInt.Width" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">
            A local-bus timeout occurred or the register is read-only.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.PhysicalLinkDevice">
      <summary>
            PLL and ID registers.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PhysicalLinkDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.FirmwareId">
      <summary>
            Gets the register with fPGA firmware identification.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.FpgaFirmwareId">
      <summary>
            Gets the register with fPGA firmware identification.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.HardwareId">
      <summary>
            Gets the register with hardware identification.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.HardwareRevisionId">
      <summary>
            Gets the register with hardware revision identification.
            Unit: 1
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PhysicalLinkDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PhysicalLinkDevice.Latch">
      <summary>
            Fills the <see cref="P:Triamec.Tam.Periphery.PhysicalLinkDevice.PllPhases" /> and the <see cref="P:Triamec.Tam.Periphery.PhysicalLinkDevice.Timestamp" /> registers with recent values.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.PacketFeederCapacity">
      <summary>
            Gets the register with size, in packets, of the packet feeder table space in SDRAM.
            Unit: Packet
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.PeripheryLayoutId">
      <summary>
            Gets the register with periphery register layout identification.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.PllLocked">
      <summary>
            Gets the register with pLL locked bit 31; Latch for registers at addresses 0 to 3.
            Unit: -
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.PllPhases">
      <summary>
            Gets the register with the phases of the PLL on both rings. You need to first read the PllLocked register before this register updates its value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PhysicalLinkDevice.ReadCurrentTime">
      <summary>
            Reads the current time, represented as a relative value.
            </summary>
      <returns></returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PhysicalLinkDevice.Timestamp">
      <summary>
            Gets the register with tria-Link master timestamp. You need to first read the PllLocked register before this register updates its value.
            Unit: 0.01ms
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PllPhasePair">
      <summary>
            PLL phases for ring 1 and 2.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.#ctor(System.UInt16,System.UInt16)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> struct.
            </summary>
      <param name="ring1">Phase A value. Scaling depends on EncoderGeneralConfiguration.PhaseASource.</param>
      <param name="ring2">PLL phase .</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the values does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PllPhasePair.Deviation">
      <summary>
            Gets the deviation of the rings.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.Equals(Triamec.Tam.Periphery.PllPhasePair)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.op_Equality(Triamec.Tam.Periphery.PllPhasePair,Triamec.Tam.Periphery.PllPhasePair)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.PllPhasePair">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.op_Implicit(Triamec.Tam.Periphery.PllPhasePair)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.op_Inequality(Triamec.Tam.Periphery.PllPhasePair,Triamec.Tam.Periphery.PllPhasePair)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PllPhasePair.Ring1">
      <summary>
            Gets phase A value. Scaling depends on EncoderGeneralConfiguration.PhaseASource.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PllPhasePair.Ring1Seconds">
      <summary>
            Gets the phase shift of the PLL on ring 1, in seconds.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PllPhasePair.Ring2">
      <summary>
            Gets pLL phase .
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PllPhasePair.Ring2Seconds">
      <summary>
            Gets the phase shift of the PLL on ring 2, in seconds.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.ToPllPhasePair(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PllPhasePair.ToUint32(Triamec.Tam.Periphery.PllPhasePair)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.PllPhasePair" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.PllPhasePair" />.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.PositionFilterDevice">
      <summary>
            Position filter data (undocumented)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PositionFilterDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PositionFilterDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PulseTrainActiveLowSignal">
      <summary>
            Mode for the active low signal of the pulse train.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainActiveLowSignal.Original">
      <summary>Take original signals.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainActiveLowSignal.Inverted">
      <summary>Invert signals.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration">
      <summary>
            Basic configuration of the pulse train.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.#ctor(Triamec.Tam.Periphery.PulseTrainMode,Triamec.Tam.Periphery.PulseTrainSource,Triamec.Tam.Periphery.PulseTrainActiveLowSignal)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> struct.
            </summary>
      <param name="mode">The principal mode of the pulse train.</param>
      <param name="source">A value indicating the position or velocity source of the pulse train.</param>
      <param name="activeLowSignal">The mode for the active low signal of the pulse train.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the values does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.ActiveLowSignal">
      <summary>
            Gets or sets the mode for the active low signal of the pulse train.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.Equals(Triamec.Tam.Periphery.PulseTrainBaseConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.Mode">
      <summary>
            Gets or sets the principal mode of the pulse train.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.op_Equality(Triamec.Tam.Periphery.PulseTrainBaseConfiguration,Triamec.Tam.Periphery.PulseTrainBaseConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.PulseTrainBaseConfiguration">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.op_Implicit(Triamec.Tam.Periphery.PulseTrainBaseConfiguration)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.op_Inequality(Triamec.Tam.Periphery.PulseTrainBaseConfiguration,Triamec.Tam.Periphery.PulseTrainBaseConfiguration)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.Source">
      <summary>
            Gets or sets a value indicating the position or velocity source of the pulse train.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.ToPulseTrainBaseConfiguration(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.PulseTrainBaseConfiguration.ToUint32(Triamec.Tam.Periphery.PulseTrainBaseConfiguration)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.PulseTrainBaseConfiguration" />.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.PulseTrainDevice">
      <summary>
            Pulse train registers.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PulseTrainDevice.BaseConfiguration">
      <summary>
            Gets the register with the basic configuration of the pulse train.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PulseTrainDevice.DownsamplingFactor">
      <summary>
            Gets the register with the update rate of the pulse train. If 1, the pulse train frequency will be 100kHz.
            Unit: 1
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PulseTrainDevice.Enable">
      <summary>
            Gets the register with the activation of the pulse train.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.PulseTrainDevice.PositionOrVelocity">
      <summary>
            Gets the register with the position or velocity value to send when the pulse train is configured to take values from the local bus.
            Unit: 1
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PulseTrainMode">
      <summary>
            Principal mode of the pulse train.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainMode.EncoderPosition">
      <summary>Generate an encoder signal to encode the position.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainMode.PulseDirectionPosition">
      <summary>Generate a pulse/direction signal to encode the position.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainMode.UpDownPosition">
      <summary>Generate an up/down signal to encode the position.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainMode.EncoderVelocity">
      <summary>Generate an encoder signal to encode the velocity.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainMode.PulseDirectionVelocity">
      <summary>Generate a pulse/direction signal to encode the velocity.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainMode.UpDownVelocity">
      <summary>Generate an up/down signal to encode the velocity.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PulseTrainSource">
      <summary>
            Indication of the position or velocity source of the pulse train.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainSource.CyclicData">
      <summary>
            The position or velocity is passed from the DSP via cyclic data.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PulseTrainSource.LocalBus">
      <summary>
            The position or velocity is read from the <see cref="P:Triamec.Tam.Periphery.PulseTrainDevice.PositionOrVelocity" /> peripheral
            register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.PwmDevice">
      <summary>
            Registers for the configuration of the pulse width modulation
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PwmDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.PwmDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.SdramDevice">
      <summary>
            The periphery device for read and write access to the SDRAM
            (<b>S</b>ynchronous <b>D</b>ynamic <b>R</b>andom <b>A</b>ccess <b>M</b>emory).
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SdramDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SdramDevice.IDENTIFICATION">
      <summary>
            The identification of the periphery device for read and write access to the SDRAM
            (<b>S</b>ynchronous <b>D</b>ynamic <b>R</b>andom <b>A</b>ccess <b>M</b>emory).
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SdramDevice.Read(System.UInt32)">
      <summary>
            Reads a word at the specified address.
            </summary>
      <param name="address">The address where to read, in words of size
            <see cref="F:Triamec.TriaLink.Packets.Packet.BYTES_PER_WORD" />.</param>
      <returns>
            Returns the value of the SDRAM word at the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="address" /> is greater than or equal to <see cref="P:Triamec.Tam.Periphery.SdramDevice.WordCapacity" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SdramDevice.WordCapacity">
      <summary>
            Gets the size of the SDRAM, in words of size <see cref="F:Triamec.TriaLink.Packets.Packet.BYTES_PER_WORD" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SdramDevice.Write(System.UInt32,Triamec.TriaLink.TamValue32)">
      <summary>
            Writes a word at the specified address.
            </summary>
      <param name="address">The address where to write, in words of size
            <see cref="F:Triamec.TriaLink.Packets.Packet.BYTES_PER_WORD" />.</param>
      <param name="value">The word to write.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="address" /> is greater than or equal to <see cref="P:Triamec.Tam.Periphery.SdramDevice.WordCapacity" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="address" /> is above <see cref="F:Triamec.Tam.Periphery.PeripheryRegister.MaxAddress" />.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.SerialEncoderDevice">
      <summary>
            FPGA local bus device to access serial encoders like EnDat.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ClearEncoderErrors">
      <summary>
            Clears the encoder errors.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ClearEncoderWarnings">
      <summary>
            Clears the encoder warnings.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">clear encoder warnings is not allowed in cyclic mode.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ClearStoredErrors">
      <summary>
            Clears the stored errors.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.EncoderType">
      <summary>
            Gets the type of the encoder.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.EndatVersion">
      <summary>
            Gets the EnDat version.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.GetFirstAvailableOemMemory">
      <summary>
            Gets the first OEM memory available for use.
            </summary>
      <returns>
            Returns the first <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> available for use,
            or <see langword="null" /> if no <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> is available for use.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.GetOemMemoryRange(Triamec.Tam.Periphery.EndatOemMemoryRange)">
      <summary>
            Gets the OEM memory of a specified memory range.
            </summary>
      <param name="range">The memory range to get the <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> for.</param>
      <returns>
            Returns the <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> for the specified <paramref name="range" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.GetPositionShiftForControllerPosition(System.Double)">
      <summary>
            Gets the position shift which is needed for the controller.
            The number of shift positions needed to place the EnDat position to the controllers fixpoint position
            </summary>
      <param name="encoderPitch">The encoder pitch of the encoder used [SI].</param>
      <returns>
            The number of bits to shift the EnDat position to the internal position controllers fixpoint position;
            or <c>0</c> if an inappropriate
            <paramref name="encoderPitch" /> was passed.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Some EnDat data could not be accessed.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.InitializeEndat">
      <summary>
            Initializes the EnDat device for EnDat2.1 or EnDat2.2.
            Performs the whole init routine with Endat 2.1 compatible commands and
            does not use cycle mode during init routine. Calibrates cable delay and
            downsampling depending on used EnDat version. 
            </summary>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.ManufacturerParameter">
      <summary>
            Gets the manufacturer parameters.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.ManufacturerParameterEndat22">
      <summary>
            Gets the endat22 manufacturer parameter.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.OemMemory0">
      <summary>
            Gets the OEM memory of <see cref="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range0" />.
            </summary>
      <returns>Returns the <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> of <see cref="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range0" />.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.OemMemory1">
      <summary>
            Gets the OEM memory of <see cref="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range1" />.
            </summary>
      <returns>Returns the <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> of <see cref="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range1" />.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.OemMemory2">
      <summary>
            Gets the OEM memory of <see cref="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range2" />.
            </summary>
      <returns>Returns the <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> of <see cref="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range2" />.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.OemMemory3">
      <summary>
            Gets the OEM memory of <see cref="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range3" />.
            </summary>
      <returns>Returns the <see cref="T:Triamec.Tam.Periphery.EndatOemMemory" /> of <see cref="F:Triamec.Tam.Periphery.EndatOemMemoryRange.Range3" />.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.OperatingCondition">
      <summary>
            Gets the operating condition.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SerialEncoderDevice.OperatingParameter">
      <summary>
            Gets the operating parameters.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadAdditionalReceiveRegisters">
      <summary>
            Reads the receive registers 2 and 3.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadCableDelay">
      <summary>
            Reads the cable delay, in seconds.
            </summary>
      <returns>Returns the cable delay, in seconds.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadClockSetting">
      <summary>
            Reads the clock setting.
            </summary>
      <returns>Returns the clock setting.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadDownsampling">
      <summary>
            Reads the downsampling setting.
            </summary>
      <returns>The downsampling setting</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadEnableCyclicState">
      <summary>
            Reads the state of the EnDat contol cyclic mode.
            </summary>
      <returns>True if cyclic is enabled otherwise false</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadEnableState">
      <summary>
            Reads the enabled state.
            </summary>
      <returns>True if EnDat control unit is enabled otherwise false</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadEncoderCounter">
      <summary>
            Reads the encoder counter.
            </summary>
      <returns>Returns the encoder counter value.</returns>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadEncoderPosition">
      <summary>
            Reads the encoder position with the resolution provided by the 
            encoder manufacturer. The unit of the return value is meter or radian, and 
            depends on the used encoder type (linear or rotative)
            </summary>
      <returns>Returns the encoder position value.</returns>
      <exception cref="T:Triamec.Tam.TamException">Internal error: unknown encoder type.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadErrors">
      <summary>
            Reads the errors.
            </summary>
      <returns>Returns the errors.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadLengthPosition">
      <summary>
            Reads the length position from the control register
            </summary>
      <returns>Returns length position, in bits.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadMeasuredCableDelay">
      <summary>
            Reads the measured cable delay, in seconds.
            </summary>
      <returns>
            Returns the measured cable delay, in seconds.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadMeasuredPacketTime">
      <summary>
            Reads the measured packet time, in seconds.
            </summary>
      <returns>
            Returns the measured packet time, in seconds.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadReceiveRegisters">
      <summary>
            Reads the receive registers 0 and 1.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ReadStrobeDelay">
      <summary>
            Reads the strobe delay, in seconds.
            </summary>
      <returns>Returns the strobe delay, in seconds.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.ResetEncoder">
      <summary>
            Resets the encoder.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.SwitchOffPositionReadMode">
      <summary>
            Switches off the cyclic position read mode. This is necessary if the incremantal encoder 
            signnals are used for the position controller. Switches the EnDat control cyclic operation off.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SerialEncoderDevice.SwitchToPositionReadMode">
      <summary>
            Switches to cyclic position read mode. This is necessary if the EnDat digital encoder
            is used for a position controller. Switches the EnDat control to cyclic operation mode
            and requests fastest possible position read mode. 
            </summary>
      <exception cref="T:Triamec.Tam.TamException">EnDat access failure; Access to EnDat is not allowed in cyclic mode. </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.SerialEncoderSource">
      <summary>
            The source of the serial encoder hardware.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SerialEncoderSource.SerialEncoder">
      <summary>
            A serial encoder input signal.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SerialEncoderSource.PulseTrain">
      <summary>
            A pulse train output signal.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.ServiceDevice">
      <summary>
            FPGA service registers
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ServiceDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.ServiceDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.ServiceDevice.Inputs">
      <summary>
            Gets the register with inputs
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.ServiceDevice.Outputs">
      <summary>
            Gets the register with outputs
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.ServiceDevice.Supervision">
      <summary>
            Gets the register with supervision
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.SpiControl">
      <summary>
            Serial peripheral interface control.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Byte,System.UInt16)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Periphery.SpiControl" /> struct.
            </summary>
      <param name="enabled">Whether the SPI unit is enabled. When disabled, the outputs are set to tristate.</param>
      <param name="lsbFirst">The bit order. Specify false for MSB first, true for LSB first.</param>
      <param name="clockPolarity">Whether the clock starts with falling edge.</param>
      <param name="clockPhase">Whether new data occurs at rising edge.</param>
      <param name="chipSelect">The level of the chip select signal (without inversion).</param>
      <param name="dataLength">The number of data bits minus one to transmit or receive. The maximal value is 31.</param>
      <param name="clockDivider">The front side clock as follows: fsck = 33.33MHz / (ClockDivider + 1) / 2.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the values does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiControl.ChipSelect">
      <summary>
            Gets or sets the level of the chip select signal (without inversion).
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiControl.ClockDivider">
      <summary>
            Gets or sets the front side clock as follows: fsck = 33.33MHz / (ClockDivider + 1) / 2.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiControl.ClockPhase">
      <summary>
            Gets or sets whether new data occurs at rising edge.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiControl.ClockPolarity">
      <summary>
            Gets or sets whether the clock starts with falling edge.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiControl.DataLength">
      <summary>
            Gets or sets the number of data bits minus one to transmit or receive. The maximal value is 31.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value does not fit in the periphery register.</exception>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiControl.Enabled">
      <summary>
            Gets or sets whether the SPI unit is enabled. When disabled, the outputs are set to tristate.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.SpiControl" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.Tam.Periphery.SpiControl" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.SpiControl" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.Equals(Triamec.Tam.Periphery.SpiControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.SpiControl" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.Tam.Periphery.SpiControl" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.SpiControl" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.Tam.Periphery.SpiControl" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.Tam.Periphery.SpiControl" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiControl.LsbFirst">
      <summary>
            Gets or sets the bit order. Specify false for MSB first, true for LSB first.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.op_Equality(Triamec.Tam.Periphery.SpiControl,Triamec.Tam.Periphery.SpiControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.SpiControl" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.SpiControl" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.SpiControl" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Periphery.SpiControl" /> structs have the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.op_Implicit(System.UInt32)~Triamec.Tam.Periphery.SpiControl">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.SpiControl" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.SpiControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.op_Implicit(Triamec.Tam.Periphery.SpiControl)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.SpiControl" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.SpiControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.op_Inequality(Triamec.Tam.Periphery.SpiControl,Triamec.Tam.Periphery.SpiControl)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Periphery.SpiControl" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.Tam.Periphery.SpiControl" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.Tam.Periphery.SpiControl" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.Tam.Periphery.SpiControl" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.ToSpiControl(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.Tam.Periphery.SpiControl" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.Tam.Periphery.SpiControl" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiControl.ToUint32(Triamec.Tam.Periphery.SpiControl)">
      <summary>
            Casts a <see cref="T:Triamec.Tam.Periphery.SpiControl" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.Tam.Periphery.SpiControl" />.</returns>
    </member>
    <member name="T:Triamec.Tam.Periphery.SpiDevice">
      <summary>
            Serial peripheral interface.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiDevice.Control">
      <summary>
            Gets the register with the control register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.SpiDevice.Data">
      <summary>
            Gets the register with the data register.
            Unit: 1
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SpiDevice.DESCRIPTION">
      <summary>
            The description of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiDevice.Disable">
      <summary>
            Disables this device.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiDevice.Enable">
      <summary>
            Enables this device.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="F:Triamec.Tam.Periphery.SpiDevice.IDENTIFICATION">
      <summary>
            The identification of this <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiDevice.ReadData(System.Boolean,System.Int32)">
      <summary>
            Reads data from a peripheral chip through the serial peripheral interface.
            </summary>
      <param name="lsbFirst">Whether data is to be sent with the least significant bit first.</param>
      <param name="length">The number of bytes to read.</param>
      <returns>A byte array.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiDevice.Send(System.Boolean,System.Int32,System.Byte[])">
      <summary>
            Writes the specified bytes and afterwards reads the specified number of bytes from the interface.
            </summary>
      <param name="lsbFirst">Whether data is to be sent with the least significant bit first.</param>
      <param name="data">The bytes to write.</param>
      <param name="length">The number of bytes to read.</param>
      <returns>The read bytes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.TamException">A local-bus timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Periphery.SpiDevice.WriteData(System.Boolean,System.Byte[])">
      <summary>
            Writes the data.
            </summary>
      <param name="hold">Whether to hold the peripheral chip.</param>
      <param name="lsbFirst">Whether data is to be sent with the least significant bit first.</param>
      <param name="data">The data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:Triamec.Tam.Periphery.StFlashRomProtection">
      <summary>
            Which sectors of an ST flash ROM are software protected.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.StFlashRomProtection.None">
      <summary>All sectors are unprotected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.StFlashRomProtection.Upmost">
      <summary>The upmost 64th of all sectors is protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.StFlashRomProtection.Upper32nd">
      <summary>The upmost 32nd of all sectors is protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.StFlashRomProtection.Upper16th">
      <summary>The upmost 16th of all sectors is protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.StFlashRomProtection.UpperEighth">
      <summary>The upmost eighth of all sectors is protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.StFlashRomProtection.UpperQuarter">
      <summary>The upmost quarter of all sectors ist protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.StFlashRomProtection.UpperHalf">
      <summary>The upper half of all sectors ist protected.</summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.StFlashRomProtection.All">
      <summary>All sectors are protected.</summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.SupervisionErrors">
      <summary>
            The supervision errors.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.None">
      <summary>
            No supervision errors
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.PowerBridgeGroundError">
      <summary>
            Power bridge ground voltage outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.LogicPrimary7Error">
      <summary>
            Primary logic voltage outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.DigitalVoltage3p3Error">
      <summary>
            Digital voltage 3.3V outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.EncoderVoltageError">
      <summary>
            Encoder voltage outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.PowerBridgeError">
      <summary>
            Power bridge voltage outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.BridgeTemperature1Error">
      <summary>
            Bridge temperature 1 outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.MonitorTemperatureError">
      <summary>
            Monitor internal temperature outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.BridgeTemperature2Error">
      <summary>
            Bridge temperature 2 outside limits
            </summary>
    </member>
    <member name="F:Triamec.Tam.Periphery.SupervisionErrors.OverCurrentError">
      <summary>
            Over current
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration">
      <summary>
            Persistent configuration of a periphery register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Tam.Periphery.Configuration.PeripheryConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration.Address">
      <summary>
            Gets or sets the address of the register within the device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration.ApplyTo(Triamec.Tam.Periphery.PeripheryCache)">
      <summary>
            Applies this configuration to the specified cache.
            </summary>
      <param name="pair">An address-value pair cache.</param>
    </member>
    <member name="P:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration.Description">
      <summary>
            Gets or sets a description for the register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration.Device">
      <summary>
            Gets or sets an identifier specifying the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> owning the configured register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration.Index">
      <summary>
            Gets or sets an index specifying the <see cref="T:Triamec.Tam.Periphery.PeripheryDevice" /> owning the configured register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration.IsReadOnly">
      <summary>
            Gets or sets a value indicating whether the register is read-only.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration`1">
      <summary>
            Persistent configuration of a periphery register of a specified type.
            </summary>
      <typeparam name="T">The value type of the register.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Tam.Periphery.Configuration.PeripheryConfiguration`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.Configuration.PeripheryConfiguration`1.Value">
      <summary>
            Gets or sets the value of the register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.Configuration.PeripheryFloatConfiguration">
      <summary>
            Persistent configuration of a <see langword="float" /> typed periphery register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.Configuration.PeripheryFloatConfiguration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Tam.Periphery.Configuration.PeripheryFloatConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.Configuration.PeripheryIntConfiguration">
      <summary>
            Persistent configuration of a signed integer typed periphery register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.Configuration.PeripheryIntConfiguration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Tam.Periphery.Configuration.PeripheryIntConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Triamec.Tam.Periphery.Configuration.PeripheryUIntConfiguration">
      <summary>
            Persistent configuration of an unsigned integer typed periphery register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Periphery.Configuration.PeripheryUIntConfiguration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Tam.Periphery.Configuration.PeripheryUIntConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Triamec.Tam.Periphery.Configuration.PeripheryUIntConfiguration.Value">
      <summary>
            Gets or sets the value of the register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.CommutationPhasingMethod">
      <summary>
            Selector for the commutation phasing method
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.CommutationPhasingMethod.NoPhasing">
      <summary>
            No commutation phasing will be performed (standard for DC motors)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.CommutationPhasingMethod.RotorAlignmentThenEncoder">
      <summary>
            Start commutation phasing with rotor alignment, then, after successful alignment, switch to encoder based commutation
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.CommutationPhasingMethod.RotorAngleSearchThenEncoder">
      <summary>
            Start commutation phasing with angle search controller, then, after successful search, switch to encoder based commutation
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.CommutationPhasingMethod.PhaseAtPositionThenEncoder">
      <summary>
            Commutation phasing at actual position, then switch to encoder based commutation
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.DateTimeRegisterValueConverter">
      <summary>
            Converter to handle an integer register array as a <see langword="DateTime" /> value in
            <see cref="F:System.DateTimeKind.Utc" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.DateTimeRegisterValueConverter.#ctor(Triamec.Tam.Registers.TamRegisterArrayBase{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.DateTimeRegisterValueConverter" /> class.
            </summary>
      <param name="integerArray">The integer register array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="integerArray" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="integerArray" /> does not exactly fit a
            <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.DateTimeRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.DateTimeRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.DateTimeRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.DateTimeRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.DateTimeRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.DrawerState">
      <summary>
            Information about the state of a drawer.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawNotPresent">
      <summary>
            Drawer is not present.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawPresent">
      <summary>
            Drawer is present.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawPresentButInvalid1">
      <summary>
            Drawer is present but switch state is invalid.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawPresentButInvalid2">
      <summary>
            Drawer is present but switch state is invalid.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawOpen">
      <summary>
            Drawer is present and is open.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawPresentButInvalid3">
      <summary>
            Drawer is present but switch state is invalid.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawInCenter">
      <summary>
            Drawer is present and is in center position.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawClosed">
      <summary>
            Drawer is present and is closed.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.DrawerState.DrawNotInPosition">
      <summary>
            Drawer is present and not in expected position.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.EnablingMethod">
      <summary>
            Selector for the enabling method.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.EnablingMethod.ForcePhasing">
      <summary>
            Perform axis enable always with selected phasing method.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.EnablingMethod.Automatic">
      <summary>
            Perform first axis enable with selected phasing method. No phasing needed for subsequent axis enables.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter">
      <summary>
            Formatter for the EtherCAT distributed clock.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter.#ctor(Triamec.Tam.Registers.ITamReadonlyRegister{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter" /> class.
            </summary>
      <param name="register">The long register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter.DeserializeEtherCatTime(System.Int64)">
      <summary>
            Computes the <see cref="T:System.DateTime" /> from the EtherCAT value.
            </summary>
      <param name="value">The EtherCAT distributed clock value.</param>
      <returns>
            The date or the default <see cref="T:System.DateTime" /> value if <paramref name="value" /> is <c>0</c>.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.EtherCatTimeRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1">
      <summary>
            Converter for extensible enumeration typed read-only registers.
            </summary>
      <typeparam name="TEnum">The general enumeration type.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.#ctor(Triamec.Tam.Registers.ITamReadonlyRegister)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1" /> class.
            </summary>
      <param name="enumRegister">The enumeration or integer register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumRegister" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="enumRegister" /> must have an enumeration
            <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> or <see langword="int" />.</para>
        <para>-or-</para>
        <para>The register is not read-only.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is not an enumaration and not
            <see langword="int" />.</exception>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.GetValue(`0)">
      <summary>
            Gets an appropriate enumeration value from the specified value.
            </summary>
      <param name="value">The enumeration value of type <see cref="P:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.ValueType" />.</param>
      <returns>
            An enumeration value of type <see cref="P:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.ValueType" />, if the value is defined in that enum. Otherwise,
            a value of type <typeparamref name="TEnum" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            If the underlying register has an enumeration <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> and if the
            value is defined for this enumeration, a member of that enumeration. In all other cases, returns a member of
            <typeparamref name="TEnum" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.ExtendedEnumRegisterValueConverter`1.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.NotSupportedException">
            This converter does not support <see cref="T:Triamec.Tam.Registers.ITamRegister" />s.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.FilterType">
      <summary>
            Characterization of the selected filter
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.FilterType.Bypassed">
      <summary>
            No filtering
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.FilterType.Lowpass1">
      <summary>
            1st order low pass filter
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.FilterType.Highpass1">
      <summary>
            1st order high pass filter
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.FilterType.LeadLag1">
      <summary>
            1st order lead lag filter
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.FilterType.Lowpass2">
      <summary>
            2nd order low pass filter
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.FilterType.Highpass2">
      <summary>
            2nd order high pass filter
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.FilterType.Bandpass2">
      <summary>
            2nd order band pass filter
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.FilterType.Notch2">
      <summary>
            2nd order notch filter
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.GuidRegisterValueConverter">
      <summary>
            Converter to handle an integer register array as a <see langword="Guid" /> value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.GuidRegisterValueConverter.#ctor(Triamec.Tam.Registers.TamRegisterArrayBase{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.GuidRegisterValueConverter" /> class.
            </summary>
      <param name="integerArray">The integer register array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="integerArray" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="integerArray" /> does not exactly fit a
            <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.GuidRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.GuidRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.GuidRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.GuidRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.GuidRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.HexRegisterValueConverter">
      <summary>
            Converter for register values to a hexadecimal representation <c>0x########</c>.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.HexRegisterValueConverter.#ctor(Triamec.Tam.Registers.ITamReadonlyRegister{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.HexRegisterValueConverter" /> class.
            </summary>
      <param name="integerRegister">The integer register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="integerRegister" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Registers.HexRegisterValueConverter`1">
      <summary>
            Converter for register values to a hexadecimal representation <c>0x########</c> or <c>0x################</c>.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.HexRegisterValueConverter`1.#ctor(Triamec.Tam.Registers.ITamReadonlyRegister{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.HexRegisterValueConverter`1" /> class.
            </summary>
      <param name="integerRegister">The integer register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="integerRegister" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.HexRegisterValueConverter`1.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.HexRegisterValueConverter`1.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="F:Triamec.Tam.Registers.HexRegisterValueConverter`1.HEX_FORMAT">
      <summary>The format of the hexadecimal representation.</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.HexRegisterValueConverter`1.PREFIX">
      <summary>The prefix of the hexadecimal number. <para>The value is <c>"0x"</c>.</para></summary>
    </member>
    <member name="P:Triamec.Tam.Registers.HexRegisterValueConverter`1.ProvidesTabularValues">
      <summary>
            Gets a value indicating whether the compartments of the values have a consistent horizontal alignment.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.HexRegisterValueConverter`1.Read">
      <summary>
            Reads the value of the register component and converts it to a hexadecimal string representation.
            </summary>
      <returns>
            A value of type <see cref="T:System.String" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.HexRegisterValueConverter`1.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.HexRegisterValueConverter`1.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.HexRegisterValueConverter`1.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.HexRegisterValueConverter`1.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A <see cref="T:System.String" /> value with format <see cref="F:Triamec.Tam.Registers.HexRegisterValueConverter`1.HEX_FORMAT" />, prefixed with
            <see cref="F:Triamec.Tam.Registers.HexRegisterValueConverter`1.PREFIX" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.HexRegisterValueConverter`1.ValueType" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter">
      <summary>
            Converter for IPv4 register values to <see cref="T:System.Net.IPAddress" /> instances.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.#ctor(Triamec.Tam.Registers.ITamReadonlyRegister{System.UInt32})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter" /> class.
            </summary>
      <param name="register">The unsigned integer register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component and converts it to dotted-quad notation.
            </summary>
      <returns>
            A value of type <see cref="T:System.String" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A <see cref="T:System.String" /> value in dotted-quad notation.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example, because it is not of type
            <see cref="P:Triamec.Tam.Registers.Ipv4AddressRegisterValueConverter.ValueType" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.IRegisterComponent">
      <summary>
            Interface of single and compound TAM registers 
            on <see cref="T:Triamec.Tam.ITamDevice" />s.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Access">
      <summary>
            Gets the accessibility of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.Commit">
      <summary>
            Commits all commit groups that this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is a member of.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
            One or more commit switches weren't reset in a timely manner by the device, and the device is not simulated.
            </para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.Commit(System.String)">
      <summary>
            Commits a commit group that this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is a member of.
            </summary>
      <param name="commitGroup">The name of the commit group.</param>
      <exception cref="T:System.ArgumentException">
        <para>This <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> does not belong to <paramref name="commitGroup" /></para>
        <para>-or-</para>
        <para>The commit switch can't be found.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
            One or more commit switches weren't reset in a timely manner by the device, and the device is not simulated.
            </para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Converter">
      <summary>
            Gets or sets a value converter for compound values or values with non-standard types.
            </summary>
      <exception cref="T:System.NotSupportedException">Thrown on any attempt to set a value when the component does not
            support it.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Description">
      <summary>
            Gets the description of this register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.FindAncestorArrayElement">
      <summary>
            Finds the first composite ancestor of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            that is an element in an array,
            or the root <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> if not found.
            </summary>
      <returns>
            Returns the first ancestor of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            that is an element in an array,
            or the root <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> if not found.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.FindCommitGroups">
      <summary>
            Finds the names of all commit groups
            where this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> belongs to.
            </summary>
      <returns>Returns the possibly empty list of names 
            of all commit groups where this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> belongs to.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.FindTagCount(System.Object)">
      <summary>
            Finds the number of tags with a particular key in this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <returns>Returns the number of tags with the given <paramref name="key" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.FindTagCount(System.Object,System.Object)">
      <summary>
            Finds the number of tags with a particular key/value pair in this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <returns>Returns the number of tags with the given <paramref name="key" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.FindTaggedComponent(System.String)">
      <summary>
            Finds the <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            with a particular tag key and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <returns>The found register component.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Multiple or no register components found.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.FindTaggedComponent(System.String,System.String)">
      <summary>
            Finds the <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            with a particular tag key/value pair and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <returns>The found register component.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Multiple or no register components found.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.FindTaggedComponents(System.Object,System.Collections.Generic.ICollection{Triamec.Tam.Registers.IRegisterComponent})">
      <summary>
            Finds all descendant <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s
            with a particular tag key
            and adds them to the provided result list.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="foundComponents">The result list to add <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s to
            that have at least one tag with the specified <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="foundComponents" />
            is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.FindTaggedComponents(System.Object,System.Object,System.Collections.Generic.ICollection{Triamec.Tam.Registers.IRegisterComponent})">
      <summary>
            Finds all descendant <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s
            with a particular tag key/value pair
            and adds them to the provided result list.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <param name="foundComponents">The result list to add <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s to
            that have at least one tag with the specified <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="foundComponents" />
            is <see langword="null" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.IsArray">
      <summary>
            Indicates if this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is an array.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.IsCommittable">
      <summary>
            Indicates whether updating the value of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is done indirectly.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.IsEnum">
      <summary>
            Indicates if this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is an enumeration.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.IsPersistent">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            is included when saving register values persistent to a file.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Offset">
      <summary>
            Gets the register offset of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Padding">
      <summary>
            Gets the padding used to determine the <see cref="P:Triamec.Tam.Registers.IRegisterComponent.Offset" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Parent">
      <summary>
            Gets the parent register composite.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterComponent.Revert">
      <summary>
            Recursively reverts the shadow values of committable registers.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.ShadowOffset">
      <summary>
            Gets the register offset of the shadow register 
            of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.SingleSize">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> type, in bytes,
            including all its nested components, but no shadow instances.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Size">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> instance, in bytes,
            including the size of shadow instances of this component and its nested components.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Tags">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Registers.RegisterTagAttribute" />s with the key/value pairs of tags attached this
            <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.IRegisterComponent.Unit">
      <summary>
            Gets a description of the physical unit of this register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.IRegisterLayoutFactory">
      <summary>
            Factory for the creation of register layouts.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterLayoutFactory.CreateRegisterLayout(Triamec.Tam.ITamDevice)">
      <summary>
            Creates an instance of the register layout for a given <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <param name="device">The device to create a register layout for, or <see langword="null" />.</param>
      <returns>Returns an instance of the register layout for <paramref name="device" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.IRegisterLayoutFactory.GetResolverToRlid(System.UInt32)">
      <summary>
            Gets a resolver for updating a TAM configuration to the specified RLID.
            </summary>
      <param name="rlid">The register layout identifier.</param>
      <returns>
            A new instance of a resolver or <see langword="null" /> if no such resolving is defined.
            </returns>
    </member>
    <member name="T:Triamec.Tam.Registers.IRegisterParent">
      <summary>
            Marker interface for parent nodes of <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.ITamReadonlyRegister">
      <summary>
            Interface of a read-only, 32-bit, 40-bit or 64-bit TAM register on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamReadonlyRegister.ConvertRawValue(System.Int32,Triamec.TriaLink.TamValue32[])">
      <summary>Converts the specified raw value to a value of this register's type.</summary>
      <param name="valueIndex">The index into the Tria-Link packet where value is located.</param>
      <param name="value">The Tria-Link packet.</param>
      <returns>The converted value.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="valueIndex" /> is equal or greater than
            <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" />, even if <paramref name="value" /> has
            <paramref name="valueIndex" /> elements.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamReadonlyRegister.ReadAsObject">
      <summary>
            Reads the register value from the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <returns>The register value.</returns>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.ITamReadonlyRegister`1">
      <summary>
            Strongly typed interface of a read-only, 32-bit, 40-bit or 64-bit TAM register on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <typeparam name="T">The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamReadonlyRegister`1.GetTamValueConverter(System.Int32,System.Boolean)">
      <summary>Returns a converter where the interesting value is found at the specified index.</summary>
      <param name="valueIndex">The index into a <see cref="T:Triamec.TriaLink.TamValue32" /> array where the value begins.</param>
      <param name="shrinkFloat40">Whether to ignore the size of a register and always use one word.</param>
      <returns>A function taking one or two arrays of raw values, returning one transported value.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamReadonlyRegister`1.Read">
      <summary>
            Reads the register value from the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <returns>
            The register value.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.ITamReadonlyRegisterList">
      <summary>
            A list of read-only TAM registers on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamReadonlyRegisterList.GetResultIndex(Triamec.Tam.Registers.ITamReadonlyRegister)">
      <summary>
            Gets the start index in the result array of the <see cref="M:Triamec.Tam.Registers.ITamReadonlyRegisterList.Read" /> method
            for a given member of this list.
            </summary>
      <param name="register">The list member to get the start index for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="register" /> is not a member of this list.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamReadonlyRegisterList.Read">
      <summary>
            Reads the values of all <see cref="T:Triamec.Tam.Registers.ITamReadonlyRegister" />s in this list.
            </summary>
      <returns>
            An array of <see cref="T:Triamec.TriaLink.TamValue32" />s with the register values read from the <see cref="T:Triamec.Tam.ITamDevice" />.
            The start index of the result value of a particular list member
            can be retrieved from <see cref="M:Triamec.Tam.Registers.ITamReadonlyRegisterList.GetResultIndex(Triamec.Tam.Registers.ITamReadonlyRegister)" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamReadonlyRegisterList.ReadAsObjects">
      <summary>
            Reads the values of all registers as objects.
            </summary>
      <returns>
            Returns an array of objects
            with the register values read from the <see cref="T:Triamec.Tam.TamDevice" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.ITamRegister">
      <summary>
            Interface of a writeable 32-bit, 40-bit or 64-bit TAM register on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegister.Write(System.String)">
      <summary>
            Parses a string and writes the register value to the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <param name="value">The value to parse and write to the register.</param>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a <see langword="null" /> reference.
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in a valid format to be parsed.
            </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a value too small or too large to be parsed.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegister.WriteFromObject(System.Object)">
      <summary>
            Writes the register value to the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <param name="value">The value to write to the register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a <see langword="null" /> reference.
            </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> is not of type <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" />, and cannot be
            converted to <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.ITamRegister`1">
      <summary>
            Strongly typed interface of a writeable 32-bit, 40-bit or 64-bit TAM register on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <typeparam name="T">The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegister`1.Write(`0)">
      <summary>
            Writes the register value to the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <param name="value">The value to write to the register.</param>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.ITamRegisterList">
      <summary>
            A list of TAM registers on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegisterList.CreateWriteBuffer">
      <summary>Creates a value array intended to be passed to the <see cref="M:Triamec.Tam.Registers.ITamRegisterList.Write(Triamec.TriaLink.TamValue32[])" /> method.</summary>
      <returns>The new zeroed array.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegisterList.GetResultIndex(Triamec.Tam.Registers.ITamRegister)">
      <summary>
            Gets the start index in the result array of the <see cref="M:Triamec.Tam.Registers.ITamReadonlyRegisterList.Read" /> method
            for a given member of this list.
            </summary>
      <param name="register">The list member to get the start index for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="register" /> is not a member of this list.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegisterList.GetWriteIndex(Triamec.Tam.Registers.ITamRegister)">
      <summary>
            Gets the start index in the array passed to the <see cref="M:Triamec.Tam.Registers.ITamRegisterList.Write(Triamec.TriaLink.TamValue32[])" /> method for a given member
            of this list.
            </summary>
      <param name="register">The list member to get the start index for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="register" /> is not a member of this list.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegisterList.Read">
      <summary>
            Reads the values of all <see cref="T:Triamec.Tam.Registers.ITamReadonlyRegister" />s in this list.
            </summary>
      <returns>
            An array of <see cref="T:Triamec.TriaLink.TamValue32" />s with the register values read from the <see cref="T:Triamec.Tam.ITamDevice" />.
            The start index of the result value of a particular list member
            can be retrieved from <see cref="M:Triamec.Tam.Registers.ITamReadonlyRegisterList.GetResultIndex(Triamec.Tam.Registers.ITamReadonlyRegister)" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegisterList.Write(System.String[])">
      <summary>
            Writes the values of all <see cref="T:Triamec.Tam.Registers.ITamRegister" />s in this list.
            </summary>
      <param name="values">The values to write to the <see cref="T:Triamec.Tam.Registers.ITamRegister" />s in this list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">Wrong length of <paramref name="values" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.ITamRegisterList.Write(Triamec.TriaLink.TamValue32[])">
      <summary>
            Writes the values of all <see cref="T:Triamec.Tam.Registers.ITamRegister" />s in this list.
            </summary>
      <param name="values">The values to write to the <see cref="T:Triamec.Tam.Registers.ITamRegister" />s in this list.
            Values must be aligned appropriately at the indexes retrieved by <see cref="M:Triamec.Tam.Registers.ITamRegisterList.GetWriteIndex(Triamec.Tam.Registers.ITamRegister)" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> has an incorrect length.</exception>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.MacAddressRegisterValueConverter">
      <summary>
            Converter to handle an integer register array as a <see cref="T:System.Net.NetworkInformation.PhysicalAddress" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MacAddressRegisterValueConverter.#ctor(Triamec.Tam.Registers.ITamReadonlyRegister{System.UInt64})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.MacAddressRegisterValueConverter" /> class.
            </summary>
      <param name="register">The readonly integer register, storing the MAC address in little endian byte order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MacAddressRegisterValueConverter.#ctor(Triamec.Tam.Registers.TamReadonlyArray{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.MacAddressRegisterValueConverter" /> class.
            </summary>
      <param name="integerArray">The read-only integer register array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="integerArray" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="integerArray" /> does not exactly fit a
            <see cref="T:System.Net.NetworkInformation.PhysicalAddress" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MacAddressRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MacAddressRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MacAddressRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.MacAddressRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MacAddressRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.MergedErrors">
      <summary>
            Immutable layout of the <see cref="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.Errors" /> register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.#ctor(Triamec.TriaLink.TamValue32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.MergedErrors" /> class.
            </summary>
      <param name="value">The value to assign.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.MergedErrors.DeviceError">
      <summary>
            Gets the error identifications of the device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the
            same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.GetAxisError(System.Int32)">
      <summary>
            Gets the error of a specific axis.
            </summary>
      <param name="axisIndex">The index of the axis.</param>
      <returns>
            Returns the error of the axis with the specified <paramref name="axisIndex" />,
            or <see cref="F:Triamec.TriaLink.AxisErrorIdentification.None" /> if the axis has no error.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="F:Triamec.Tam.Registers.MergedErrors.NO_ERROR">
      <summary>
            Gets a value representing no error.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.op_Equality(Triamec.Tam.Registers.MergedErrors,Triamec.Tam.Registers.MergedErrors)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Registers.MergedErrors" /> values for equality.
            </summary>
      <param name="e1">The first <see cref="T:Triamec.Tam.Registers.MergedErrors" /> value in the comparison.</param>
      <param name="e2">The second <see cref="T:Triamec.Tam.Registers.MergedErrors" /> value in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Registers.MergedErrors" /> values represent the samecombination of
            errors.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.op_Implicit(Triamec.Tam.Registers.MergedErrors)~Triamec.TriaLink.TamValue32">
      <summary>
            Performs an implicit conversion from <see cref="T:Triamec.Tam.Registers.MergedErrors" /> to <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.op_Implicit(Triamec.TriaLink.TamValue32)~Triamec.Tam.Registers.MergedErrors">
      <summary>
            Performs an implicit conversion from <see cref="T:Triamec.TriaLink.TamValue32" /> to <see cref="T:Triamec.Tam.Registers.MergedErrors" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.op_Inequality(Triamec.Tam.Registers.MergedErrors,Triamec.Tam.Registers.MergedErrors)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Registers.MergedErrors" /> values for inequality.
            </summary>
      <param name="e1">The first <see cref="T:Triamec.Tam.Registers.MergedErrors" /> value in the comparison.</param>
      <param name="e2">The second <see cref="T:Triamec.Tam.Registers.MergedErrors" /> value in the comparison.</param>
      <returns>
        <see langword="false" /> if both <see cref="T:Triamec.Tam.Registers.MergedErrors" /> values represent the same combination of
            errors.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedErrors.ToString">
      <summary>
            Returns a description of the errors on the device.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a description of the errors on the device.
            </returns>
    </member>
    <member name="T:Triamec.Tam.Registers.MergedStates">
      <summary>
            Immutable layout of the <see cref="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.States" /> register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.#ctor(Triamec.TriaLink.TamValue32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.MergedStates" /> class.
            </summary>
      <param name="value">The value to assign.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.MergedStates.AsynchronousTamaState">
      <summary>
            Gets the user defined state of the Tama program running on the asynchronous Tama virtual machine.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.MergedStates.AsynchronousTamaTransition">
      <summary>
            Gets a value indicating whether the user defined state machine of the Tama program running on the
            asynchronous Tama virtual machine had a transition.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.MergedStates.DeviceState">
      <summary>
            Gets the state of the drive.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.MergedStates.DeviceTransition">
      <summary>
            Gets a value indicating whether the state machine of the first axis
            had a transition.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.Equals(System.Object)">
      <summary>
            Indicates whether this <see cref="T:Triamec.Tam.Registers.MergedStates" /> value
            and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" />
            and this <see cref="T:Triamec.Tam.Registers.MergedStates" /> value are the same type
            and represent the same states, ignoring transitions;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.GetAxisState(System.Int32)">
      <summary>
            Gets the state of the axis with the specified index.
            </summary>
      <param name="axisIndex">Index of the axis.</param>
      <returns>The state of the axis.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.GetHashCode">
      <summary>
            Returns the hash code for this instance, ignoring transitions.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.HasAxisTransition(System.Int32)">
      <summary>
            Indicates whether a specific axis had a transition.
            </summary>
      <param name="axisIndex">The index of the axis.</param>
      <returns>
            Returns <see langword="true" /> if the axis had a transition; otherwise, returns <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.IsEnabled(System.Int32)">
      <summary>
            Indicates whether the a specific axis is in an enabled state.
            </summary>
      <param name="axisIndex">The index of the axis.</param>
      <returns>
            Returns <see langword="true" /> if the axis is enabled; otherwise, returns <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.MergedStates.IsochronousTamaState">
      <summary>
            Gets the user defined state of the Tama program running on the isochronous Tama virtual machine.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.MergedStates.IsochronousTamaTransition">
      <summary>
            Gets a value indicating whether the user defined state machine of the Tama program running on the
            isochronous Tama virtual machine had a transition.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT">
      <summary>
            The maximum number of axis.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.op_Equality(Triamec.Tam.Registers.MergedStates,Triamec.Tam.Registers.MergedStates)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Registers.MergedStates" /> values for equality
            in terms of states, ignoring transitions.
            </summary>
      <param name="states1">The first <see cref="T:Triamec.Tam.Registers.MergedStates" /> value in the comparison.</param>
      <param name="states2">The second <see cref="T:Triamec.Tam.Registers.MergedStates" /> value in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Registers.MergedStates" /> values represent the same state,
            ignoring transitions.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.op_Implicit(Triamec.Tam.Registers.MergedStates)~Triamec.TriaLink.TamValue32">
      <summary>
            Performs an implicit conversion from <see cref="T:Triamec.Tam.Registers.MergedStates" /> to <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.op_Implicit(Triamec.TriaLink.TamValue32)~Triamec.Tam.Registers.MergedStates">
      <summary>
            Performs an implicit conversion from <see cref="T:Triamec.TriaLink.TamValue32" /> to <see cref="T:Triamec.Tam.Registers.MergedStates" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.op_Inequality(Triamec.Tam.Registers.MergedStates,Triamec.Tam.Registers.MergedStates)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Registers.MergedStates" /> values for inequality, ignoring transitions.
            </summary>
      <param name="states1">The first <see cref="T:Triamec.Tam.Registers.MergedStates" /> value in the comparison.</param>
      <param name="states2">The second <see cref="T:Triamec.Tam.Registers.MergedStates" /> value in the comparison.</param>
      <returns>
        <see langword="false" /> if both <see cref="T:Triamec.Tam.Registers.MergedStates" /> values represent the same state, ignoring
            transitions.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MergedStates.ToString">
      <summary>
            Returns a description of the states of the device.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a description of the states of the device.
            </returns>
    </member>
    <member name="F:Triamec.Tam.Registers.MergedStates.TRANSITION_TRIGGER_LEVEL">
      <summary>
            The correct level for an <see cref="F:Triamec.TriaLink.PublicationCommand.AboveLevel" /> trigger to use with an
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" /> listening to state transitions.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.MotorBrakeReleaseAction">
      <summary>
            Action needed for the release of the motor brake during axis enabling.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.MotorBrakeReleaseAction.NoAction">
      <summary>
            No action for axis enabling and disabling.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.MotorBrakeReleaseAction.SetOutput1">
      <summary>
            Set output 1 to release the brake after axis enabling.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.MotorBrakeReleaseAction.SetOutput2">
      <summary>
            Set output 2 to release the brake after axis enabling.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.MutableMergedErrors">
      <summary>
            Mutable layout of the <see cref="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.Errors" /> register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.#ctor(Triamec.TriaLink.TamValue32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> class.
            </summary>
      <param name="value">The value to assign.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.MutableMergedErrors.DeviceError">
      <summary>
            Gets or sets the error identifications of the device.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the
            same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.GetAxisError(System.Int32)">
      <summary>
            Gets the error of a specific axis.
            </summary>
      <param name="axisIndex">The index of the axis.</param>
      <returns>
            Returns the error of the axis with the specified <paramref name="axisIndex" />,
            or <see cref="F:Triamec.TriaLink.AxisErrorIdentification.None" /> if the axis has no error.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.op_Equality(Triamec.Tam.Registers.MutableMergedErrors,Triamec.Tam.Registers.MutableMergedErrors)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> values for equality.
            </summary>
      <param name="e1">The first <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> value in the comparison.</param>
      <param name="e2">The second <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> value in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> values represent the same combination
            	of errors.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.op_Implicit(Triamec.Tam.Registers.MutableMergedErrors)~Triamec.TriaLink.TamValue32">
      <summary>
            Performs an implicit conversion from <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> to <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.op_Implicit(Triamec.TriaLink.TamValue32)~Triamec.Tam.Registers.MutableMergedErrors">
      <summary>
            Performs an implicit conversion from <see cref="T:Triamec.TriaLink.TamValue32" /> to <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.op_Inequality(Triamec.Tam.Registers.MutableMergedErrors,Triamec.Tam.Registers.MutableMergedErrors)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> values for inequality.
            </summary>
      <param name="e1">The first <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> value in the comparison.</param>
      <param name="e2">The second <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> value in the comparison.</param>
      <returns>
        <see langword="false" /> if both <see cref="T:Triamec.Tam.Registers.MutableMergedErrors" /> values represent the same combination
            	of errors.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.SetAxisError(System.Int32,Triamec.TriaLink.AxisErrorIdentification)">
      <summary>
            Sets the error of a specific axis.
            </summary>
      <param name="axisIndex">The index of the axis.</param>
      <param name="value">The error of the axis with the specified <paramref name="axisIndex" />,
            or <see cref="F:Triamec.TriaLink.AxisErrorIdentification.None" /> if the axis has no error.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedErrors.ToString">
      <summary>
            Returns a description of the errors on the device.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a description of the errors on the device.
            </returns>
    </member>
    <member name="T:Triamec.Tam.Registers.MutableMergedStates">
      <summary>
            Mutable layout of the <see cref="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.States" /> register.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.#ctor(Triamec.TriaLink.TamValue32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> class.
            </summary>
      <param name="value">The value to assign.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.MutableMergedStates.AsynchronousTamaState">
      <summary>
            Gets or sets the user defined state of the Tama program running on the asynchronous Tama virtual machine.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.MutableMergedStates.AsynchronousTamaTransition">
      <summary>
            Gets a value indicating whether the user defined state machine of the Tama program running on the
            asynchronous Tama virtual machine had a transition.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.MutableMergedStates.DeviceState">
      <summary>
            Gets the state of the device.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.MutableMergedStates.DeviceTransition">
      <summary>
            Gets a value indicating whether the state machine of the device had a transition.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.Equals(System.Object)">
      <summary>
            Indicates whether this <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> value
            and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" />
            and this <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> value are the same type
            and represent the same states, ignoring transitions;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.GetAxisState(System.Int32)">
      <summary>
            Gets the state of the axis with the specified index.
            </summary>
      <param name="axisIndex">Index of the axis.</param>
      <returns>The state of the axis.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.GetHashCode">
      <summary>
            Returns the hash code for this instance, ignoring transitions.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.HasAxisTransition(System.Int32)">
      <summary>
            Indicates whether a specific axis has a transition.
            </summary>
      <param name="axisIndex">The index of the axis.</param>
      <returns>
            Returns <see langword="true" /> if the axis had a transition; otherwise, returns <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.MutableMergedStates.IsochronousTamaState">
      <summary>
            Gets or sets the user defined state of the Tama program running on the isochronous Tama virtual machine.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.MutableMergedStates.IsochronousTamaTransition">
      <summary>
            Gets a value indicating whether the user defined state machine of the Tama program running on the
            isochronous Tama virtual machine had a transition.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.op_Equality(Triamec.Tam.Registers.MutableMergedStates,Triamec.Tam.Registers.MutableMergedStates)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> values for equality
            in terms of states, ignoring transitions.
            </summary>
      <param name="states1">The first <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> value in the comparison.</param>
      <param name="states2">The second <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> value in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> values represent the same state,
            ignoring transitions.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.op_Implicit(Triamec.Tam.Registers.MutableMergedStates)~Triamec.TriaLink.TamValue32">
      <summary>
            Performs an implicit conversion from <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> to <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.op_Implicit(Triamec.TriaLink.TamValue32)~Triamec.Tam.Registers.MutableMergedStates">
      <summary>
            Performs an implicit conversion from <see cref="T:Triamec.TriaLink.TamValue32" /> to <see cref="T:Triamec.Tam.Registers.MutableMergedStates" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.op_Inequality(Triamec.Tam.Registers.MutableMergedStates,Triamec.Tam.Registers.MutableMergedStates)">
      <summary>
            Compares two <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> values for inequality, ignoring transitions.
            </summary>
      <param name="states1">The first <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> value in the comparison.</param>
      <param name="states2">The second <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> value in the comparison.</param>
      <returns>
        <see langword="false" /> if both <see cref="T:Triamec.Tam.Registers.MutableMergedStates" /> values represent the same state,
            	ignoring transitions.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.SetAxisState(System.Int32,Triamec.TriaLink.AxisState)">
      <summary>
            Sets the state of the axis with the specified index.
            </summary>
      <param name="axisIndex">Index of the axis.</param>
      <param name="value">The new axis state.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.SetAxisTransition(System.Int32,System.Boolean)">
      <summary>
            Sets whether a specific axis has a transition.
            </summary>
      <param name="axisIndex">The index of the axis.</param>
      <param name="value">
        <see langword="true" /> if the axis had a transition; otherwise, returns <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="axisIndex" /> is not between 0 and <c><see cref="F:Triamec.Tam.Registers.MergedStates.MAX_AXIS_COUNT" /> - 1</c>.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.MutableMergedStates.ToString">
      <summary>
            Returns a description of the states of the device.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a description of the states of the device.
            </returns>
    </member>
    <member name="T:Triamec.Tam.Registers.OutputSignalSource">
      <summary>
            Selector for output signal source.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.OutputSignalSource.Register">
      <summary>
            The Register value is connected to the output.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.OutputSignalSource.Axis1Output">
      <summary>
            The Axis 1 output is connected to the output.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.OutputSignalSource.Axis2Output">
      <summary>
            The Axis 2 output is connected to the output.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.PalBusInputPropagationAction">
      <summary>
            Action on PalControl needed after occurance of a Palbus input pulse.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationAction.NoAction">
      <summary>
            No action on PalBus input.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationAction.PulseOnTtlOutput1">
      <summary>
            Propagate PalBus input as pulse on TTL output 1.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationAction.PulseOnTtlOutput2">
      <summary>
            Propagate PalBus input as pulse on TTL output 2.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationAction.PulseOnTtlOutput3">
      <summary>
            Propagate PalBus input as pulse on TTL output 3.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationAction.PulseOnSwOutput1">
      <summary>
            Propagate PalBus input as pulse on SW output 1.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationAction.PulseOnSwOutput2">
      <summary>
            Propagate PalBus input as pulse on SW output 2.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationAction.PulseOnPwmOutput">
      <summary>
            Propagate PalBus input as pulse on Pwm output.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationAction.BuzzerBeep">
      <summary>
            Propagate PalBus input as buzzer beep.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster">
      <summary>
            Action on PalBusMaster needed after occurance of a Palbus input pulse.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.NoAction">
      <summary>
            No action on PalBus input.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.PulseOnOutput1">
      <summary>
            Propagate PalBus input as pulse on Output 1.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.PulseOnOutput2">
      <summary>
            Propagate PalBus input as pulse on Output 2.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.PulseOnOutput3">
      <summary>
            Propagate PalBus input as pulse on Output 3.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.PulseOnOutput4">
      <summary>
            Propagate PalBus input as pulse on Output 4.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.PulseOnOutput5">
      <summary>
            Propagate PalBus input as pulse on Output 5.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.PulseOnOutput6">
      <summary>
            Propagate PalBus input as pulse on Output 6.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.PulseOnOutput7">
      <summary>
            Propagate PalBus input as pulse on Output 7.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.PulseOnOutput8">
      <summary>
            Propagate PalBus input as pulse on Output 8.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PalBusInputPropagationActionOnPalBusMaster.BuzzerBeep">
      <summary>
            Propagate PalBus input as buzzer beep.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.PositionControllerTestSignalCommand">
      <summary>
            Test signal generator command
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PositionControllerTestSignalCommand.NoCommand">
      <summary>
            No command
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PositionControllerTestSignalCommand.SignalActive">
      <summary>
            Activate the test signal generator
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.PositionControllerTestSignalCommand.Stop">
      <summary>
            Stop the test signal generator
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterAccess">
      <summary>
            Access flags of a register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterAccess.None">
      <summary>Hidden register</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterAccess.Read">
      <summary>Read only access</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterAccess.Write">
      <summary>Write only access</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterAccess.Persistent">
      <summary>Persistent register</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterAccess.ReadWrite">
      <summary>Read/write access, persistent register</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterAccess.ReadWriteNonPersistent">
      <summary>Read/write access, non-persistent register</summary>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterComponent">
      <summary>
            Base class of single and compound TAM registers
            on <see cref="T:Triamec.Tam.TamDevice" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.#ctor(Triamec.Tam.ITamDevice,System.UInt32,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> class.
            </summary>
      <param name="device">
            The device where the register component belongs to or <see langword="null" />.
            </param>
      <param name="offset">The relative offset, in bytes.</param>
      <param name="access">The accessibility of this register component.</param>
      <param name="browsableState">The visibility of the register component in GUI controls.</param>
      <param name="name">The name of this register component.</param>
      <param name="unit">A description of the physical unit of this register component.</param>
      <param name="description">The description of this register component.</param>
      <param name="tags">The key/value pairs of tags to attach to this register component.</param>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.#ctor(Triamec.Tam.Registers.RegisterComposite,System.UInt32,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> class.
            </summary>
      <param name="parent">The parent register composite.</param>
      <param name="offset">The relative offset, in bytes.</param>
      <param name="access">The accessibility of this register component.</param>
      <param name="browsableState">The visibility of the register component in GUI controls.</param>
      <param name="name">The name of this register component.</param>
      <param name="unit">A description of the physical unit of this register component.</param>
      <param name="description">The description of this register component.</param>
      <param name="tags">The key/value pairs of tags to attach to this register component.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Access">
      <summary>
            Gets the accessibility of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Address">
      <summary>
            Gets the address of this <see cref="T:Triamec.Tam.Registers.RegisterComponent" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.BrowsableState">
      <summary>
            Gets the browsable state of the <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterComponent.BYTES_PER_REGISTER_WORD">
      <summary>
            The size of a TAM register word, in bytes.
            The value is <c>4u</c>.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.CanEditName">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.Tam.ITamNode.Name" /> property 
            of this instance can be set.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.Commit">
      <summary>
            Commits all commit groups that this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is a member of.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
            One or more commit switches weren't reset in a timely manner by the device, and the device is not simulated.
            </para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.Commit(System.Collections.IEnumerable)">
      <summary>
            Commits the specified registers.
            </summary>
      <param name="registers">The registers.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="registers" /> is <see langword="null" />.</para>
        <para>One element of <paramref name="registers" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
            One or more commit switches weren't reset in a timely manner by the device, and the device is not simulated.
            </para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.Commit(System.String)">
      <summary>
            Commits a commit group that this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is a member of.
            </summary>
      <param name="commitGroup">The name of the commit group.</param>
      <exception cref="T:System.ArgumentException">
        <para>This <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> does not belong to <paramref name="commitGroup" /></para>
        <para>-or-</para>
        <para>The commit switch can't be found.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
            One or more commit switches weren't reset in a timely manner by the device, and the device is not simulated.
            </para>
      </exception>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterComponent.CommitGroupKey">
      <summary>
            The tag key to include a registers in a commit group.
            Used by <see cref="M:Triamec.Tam.Registers.RegisterComponent.Commit" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterComponent.CommitSwitchKey">
      <summary>
            The tag key of switch registers for commit groups.
            Used by <see cref="M:Triamec.Tam.Registers.RegisterComponent.Commit" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.CommitWithHandshake(System.Collections.IEnumerable)">
      <summary>
            Commits the specified registers.
            </summary>
      <param name="registers">The registers.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="registers" /> is <see langword="null" />.</para>
        <para>One element of <paramref name="registers" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:System.ObjectDisposedException">The registers were disposed.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Converter">
      <summary>
            Gets or sets a value converter for compound values or values with non-standard types.
            </summary>
      <exception cref="T:System.NotSupportedException">Thrown on any attempt to set a value when the component does not
            support it.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.CreateReadonlyRegisterListFrom(System.Boolean,Triamec.Tam.Registers.ITamReadonlyRegister[])"></member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.CreateReadonlyRegisterListFrom(Triamec.Tam.Registers.ITamReadonlyRegister[])">
      <summary>
            Creates a new instance of an <see cref="T:Triamec.Tam.Registers.ITamReadonlyRegisterList" /> implementation.
            </summary>
      <param name="registers">The registers to add to the list.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="registers" /> is a <see langword="null" /> reference;</para>
        <para>an element of <paramref name="registers" /> is a <see langword="null" /> reference.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="registers" /> is empty.</para>
        <para>The elements of <paramref name="registers" /> do not belong to the same
            <see cref="T:Triamec.Tam.ITamDevice" />;</para>
        <para>The <paramref name="registers" /> do not belong to a local <see cref="T:Triamec.Tam.TamDevice" />;</para>
        <para>An element of <paramref name="registers" /> is not a <see cref="T:Triamec.Tam.Registers.RegisterComponent" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.CreateRegisterListFrom(Triamec.Tam.Registers.ITamRegister[])">
      <summary>
            Creates a new instance of an <see cref="T:Triamec.Tam.Registers.ITamRegisterList" /> implementation.
            </summary>
      <param name="registers">The registers to add to the list.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="registers" /> is a <see langword="null" /> reference;</para>
        <para>an element of <paramref name="registers" /> is a <see langword="null" /> reference.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="registers" /> is empty.</para>
        <para>The elements of <paramref name="registers" /> do not belong to the same
            <see cref="T:Triamec.Tam.ITamDevice" />;</para>
        <para>The <paramref name="registers" /> do not belong to a local <see cref="T:Triamec.Tam.TamDevice" />;</para>
        <para>An element of <paramref name="registers" /> is not a <see cref="T:Triamec.Tam.Registers.RegisterComponent" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.CustomImage">
      <summary>
            Gets the custom <see cref="T:System.Drawing.Image" />
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterComponent.DefaultUnit">
      <summary>
            The unit used for dimensionless registers.
            <para>The value is <c>"-"</c>.</para></summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Description">
      <summary>
            Gets the description of this register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Device">
      <summary>
            Gets the TAM device where this register component belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.DisplayName">
      <summary>Gets the display name of this node.</summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindAncestorArrayElement">
      <summary>
            Finds the first composite ancestor of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            that is an element in an array,
            or the root <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> if not found.
            </summary>
      <returns>
            Returns the first ancestor of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            that is an element in an array,
            or the root <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> if not found.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindCommitGroups">
      <summary>
            Finds the names of all commit groups
            where this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> belongs to.
            </summary>
      <returns>Returns the possibly empty list of names 
            of all commit groups where this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> belongs to.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindTagCount(System.Object)">
      <summary>
            Finds the number of tags with a particular key in this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <returns>Returns the number of tags with the given <paramref name="key" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindTagCount(System.Object,System.Object)">
      <summary>
            Finds the number of tags with a particular key/value pair in this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <returns>Returns the number of tags with the given <paramref name="key" /></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindTaggedComponent(System.String)">
      <summary>
            Finds the <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            with a particular tag key and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <returns>The found register component.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Multiple or no register components found.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindTaggedComponent(System.String,System.String)">
      <summary>
            Finds the <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            with a particular tag key/value pair and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <returns>The found register component.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Multiple or no register components found.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindTaggedComponents(System.Object,System.Collections.Generic.ICollection{Triamec.Tam.Registers.IRegisterComponent})">
      <summary>
            Finds all descendant <see cref="T:Triamec.Tam.Registers.RegisterComponent" />s
            with a particular tag key
            and adds them to the provided result list.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="foundComponents">The result list to add <see cref="T:Triamec.Tam.Registers.RegisterComponent" />s to
            that have at least one tag with the specified <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="foundComponents" />
            is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindTaggedComponents(System.Object,System.Object,System.Collections.Generic.ICollection{Triamec.Tam.Registers.IRegisterComponent})">
      <summary>
            Finds all descendant <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s
            with a particular tag key/value pair
            and adds them to the provided result list.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <param name="foundComponents">The result list to add <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s to
            that have at least one tag with the specified <paramref name="key" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="foundComponents" />
            is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.FindTamNode(System.Uri)">
      <summary>
            Searches for an existing node within all descendant nodes
            of this node, or the root node of this node.
            </summary>
      <param name="address">An absolute or relative address.</param>
      <returns>
            The node with the specified <paramref name="address" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> cannot be mapped to a valid node.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.GetTag(System.Object,System.Object)">
      <summary>
            Determines whether this <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> is tagged with the specified
            key/value pair.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <returns>
            The corresponding attribute or <see langword="null" /> if not found.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.IsArray">
      <summary>
            Indicates if this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is an array.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.IsCommittable">
      <summary>
            Indicates whether updating the value of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is done indirectly.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.IsComposite(Triamec.Tam.Registers.IRegisterComponent)">
      <summary>
            Determines whether the specified register is a composite register.
            </summary>
      <param name="register">The register.</param>
      <returns>
        <see langword="true" /> if the specified register is composite; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.IsEnum">
      <summary>
            Indicates if this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is an enumeration.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.IsPersistent">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            is included when saving register values persistent to a file.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.Load(System.String)">
      <summary>
            Loads different settings from a configuration file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">An exception occurred during deserialization
            or configuration application.
              </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Name">
      <summary>
            Gets the name of this <see cref="T:Triamec.Tam.Registers.RegisterComponent" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Thrown on any attempt to set the property.
            </exception>
    </member>
    <member name="E:Triamec.Tam.Registers.RegisterComponent.NameChanged">
      <summary>
            Event raised whenever the <see cref="P:Triamec.Tam.ITamNode.Name" /> property has changed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Offset">
      <summary>
            Gets the register offset of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Padding">
      <summary>
            Gets the padding used to determine the <see cref="P:Triamec.Tam.Registers.IRegisterComponent.Offset" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Parent">
      <summary>
            Gets the parent register composite.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.PredefinedImage">
      <summary>
            Gets the predefined image specification.
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.Revert">
      <summary>
            Recursively reverts the shadow values of committable registers.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.Save(System.String)">
      <summary>
            Saves relevant settings as XML configuration to a file.
            </summary>
      <param name="path">Location of the configuration.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">
            Serialization to the file specified by <paramref name="path" /> failed.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.ShadowOffset">
      <summary>
            Gets the register offset of the shadow register 
            of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.ShortDescription">
      <summary>
            Gets a description of this <see cref="T:Triamec.Tam.ITamNode" /> or <see langword="null" /> if it is a root node.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.ShortDescriptionOrName">
      <summary>
            Convenience method to get a description of this <see cref="T:Triamec.Tam.ITamNode" />
            without any <see cref="T:Triamec.Tam.TamException" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.SingleSize">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> type, in bytes,
            including all its nested components, but no shadow instances.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Size">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> instance, in bytes,
            including the size of shadow instances of this component and its nested components.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Tag">
      <summary>
            Gets or sets a client object related to this node.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Tags">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Registers.RegisterTagAttribute" />s with the key/value pairs of tags attached this
            <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComponent.ToString">
      <summary>
            	Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Triamec.Tam.Registers.RegisterComponent" />.
            </summary>
      <returns>
            	A canonical string representation of <see cref="P:Triamec.Tam.Registers.RegisterComponent.Address" />.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.TotalOffset">
      <summary>
            Gets the total offset of this <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> with respect to the register layout, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Triamec#Tam#ITamNode{Triamec#Tam#Registers#IRegisterParent}#ParentNode">
      <summary>
            Gets the parent node of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComponent.Unit">
      <summary>
            Gets a description of the physical unit of this <see cref="T:Triamec.Tam.Registers.RegisterComponent" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterComposite">
      <summary>
            Base class of a compound TAM register
            on <see cref="T:Triamec.Tam.TamDevice" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.#ctor(Triamec.Tam.ITamDevice,System.UInt32,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Constructor of a root register composite.
            </summary>
      <param name="device">
            The device where the register composite belongs to or <see langword="null" />.
            </param>
      <param name="offset">The relative offset, in bytes.</param>
      <param name="access">The accessibility of this register component.</param>
      <param name="browsableState">The visibility of the register component 
            in GUI controls.</param>
      <param name="name">The name of this register component.</param>
      <param name="unit">A description of the physical unit of this register component.</param>
      <param name="description">The description of this register component.</param>
      <param name="tags">The key/value pairs of tags to attach to this register component.</param>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.#ctor(Triamec.Tam.Registers.RegisterComposite,System.UInt32,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Constructor
            </summary>
      <param name="parent">The parent register composite.</param>
      <param name="offset">The relative offset, in bytes.</param>
      <param name="access">The accessibility of this register component.</param>
      <param name="browsableState">The visibility of the register component 
            in GUI controls.</param>
      <param name="name">The name of this register component.</param>
      <param name="unit">A description of the physical unit of this register component.</param>
      <param name="description">The description of this register component.</param>
      <param name="tags">The key/value pairs of tags to attach to this register component.</param>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.AddComponent(Triamec.Tam.Registers.IRegisterComponent)">
      <summary>
            Adds a nested <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />.
            </summary>
      <param name="component">The nested component register to add.</param>
      <returns>Returns the index at which the nested <paramref name="component" /> has been added.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.AddTamArray``1(Triamec.Tam.Registers.TamArray{``0},System.Boolean,System.Int32,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Adds a new child register component.
            </summary>
      <param name="shadow">The shadow register if it exists already.</param>
      <param name="needsShadow">Indicates whether this register needs a shadow register.</param>
      <param name="length">The number of elements in the array.</param>
      <param name="access">The accessibility of the child register component.</param>
      <param name="browsableState">The visibility of the register component
            in GUI controls.</param>
      <param name="name">The name of the child register component.</param>
      <param name="unit">A description of the physical unit of the child register component.</param>
      <param name="description">The description of the child register component.</param>
      <param name="tags">The key/value pairs of tags to attach to the child register.</param>
      <typeparam name="T"></typeparam>
      <returns>The newly created child register component.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.AddTamReadonlyArray``1(Triamec.Tam.Registers.TamReadonlyArray{``0},System.Boolean,System.Int32,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Adds a new read-only child register component array.
            </summary>
      <param name="shadow">The shadow register if it exists already.</param>
      <param name="needsShadow">Indicates whether the child register needs a shadow register.</param>
      <param name="length">The number of elements in the array.</param>
      <param name="access">The accessibility of this register component.</param>
      <param name="browsableState">The visibility of the register component
            in GUI controls.</param>
      <param name="name">The name of the child register component.</param>
      <param name="unit">A description of the physical unit of the child register component.</param>
      <param name="description">The description of the child register component.</param>
      <param name="tags">The key/value pairs of tags to attach to the child register.</param>
      <typeparam name="T">The type of the elements.</typeparam>
      <returns>The newly created read-only register array.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.AddTamReadonlyRegister``1(Triamec.Tam.Registers.ITamReadonlyRegister{``0},System.Boolean,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Adds a new child register component.
            </summary>
      <param name="shadow">The shadow register if it exists already.</param>
      <param name="needsShadow">Indicates whether the child register needs a shadow register.</param>
      <param name="access">The accessibility of the child register component.</param>
      <param name="browsableState">The visibility of the register component
            in GUI controls.</param>
      <param name="name">The name of the child register component.</param>
      <param name="unit">A description of the physical unit of the child register component.</param>
      <param name="description">The description of the child register component.</param>
      <param name="tags">The key/value pairs of tags to attach to the child register.</param>
      <typeparam name="T">The type of the new register.</typeparam>
      <returns>The newly created child register component, or <see langword="null" /> in case the device doesn't
            support the URI.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.AddTamRegister``1(Triamec.Tam.Registers.ITamRegister{``0},System.Boolean,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Adds a new child register component.
            </summary>
      <param name="shadow">The shadow register if it exists already.</param>
      <param name="needsShadow">Indicates whether the child register needs a shadow register.</param>
      <param name="access">The accessibility of the child register component.</param>
      <param name="browsableState">The visibility of the register component
            in GUI controls.</param>
      <param name="name">The name of the child register component.</param>
      <param name="unit">A description of the physical unit of the child register component.</param>
      <param name="description">The description of the child register component.</param>
      <param name="tags">The key/value pairs of tags to attach to the child register.</param>
      <typeparam name="T">The type of the register.</typeparam>
      <returns>The newly created child register component.</returns>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.ComponentOffset">
      <summary>
            Gets the current component offset
            to use when adding member components.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.Count">
      <summary>
            Gets the number of child <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s
            in this <see cref="T:Triamec.Tam.Registers.RegisterComposite" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.CreateConfiguration(Triamec.Tam.Configuration.TamSerializer)">
      <summary>
            Creates a new object containing persistable data of this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
      <param name="serializer">The instance controlling the serializing process.</param>
      <returns>
            An instance which may be used by a <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </returns>
      <exception cref="T:Triamec.Tam.TamException">Creation failed.</exception>
      <exception cref="T:System.NotSupportedException">This <see cref="T:Triamec.Tam.ITamNode" /> cannot be persisted.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.FindTaggedComponents(System.Object,System.Object,System.Collections.Generic.ICollection{Triamec.Tam.Registers.IRegisterComponent})">
      <summary>
            Finds all descendant <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s
            with a particular tag key/value pair
            and adds them to the provided result list.
            </summary>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The tag value to search for.
            The value may be <see langword="null" />.</param>
      <param name="foundComponents">The found components.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> or <paramref name="foundComponents" />
            is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.FindTaggedComposite(System.String)">
      <summary>
            Finds the <see cref="T:Triamec.Tam.Registers.RegisterComposite" />
            with a particular tag key and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.</param>
      <returns>
            The found register composite or <see langword="null" /> if the found <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is not
            a <see cref="T:Triamec.Tam.Registers.RegisterComposite" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Found multiple or no <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> with the specified key.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.FindTaggedComposite(System.String,System.String)">
      <summary>
            Finds the <see cref="T:Triamec.Tam.Registers.RegisterComposite" />
            with a particular tag key and returns it in the result.
            </summary>
      <param name="key">The tag key to search for.</param>
      <param name="value">The tag value to search for.</param>
      <returns>
            The found register composite or <see langword="null" /> if the found <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is not
            a <see cref="T:Triamec.Tam.Registers.RegisterComposite" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:Triamec.Tam.TamException">Found multiple or no <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> with the specified key.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through
            the child <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s
            of this <see cref="T:Triamec.Tam.Registers.RegisterComposite" />.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through 
            the child <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s
            of this <see cref="T:Triamec.Tam.Registers.RegisterComposite" />.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.IsAxisSpecific">
      <summary>Gets or sets a value indicating whether this composite represents an EtherCAT axis.</summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.IsEnum">
      <summary>
            Indicates if this <see cref="T:Triamec.Tam.Registers.RegisterComposite" /> is an enumeration.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.IsPersistent">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            is included when saving register values persistent to a file.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.IsRecord">
      <summary>Gets or sets a value indicating whether this composite represents an EtherCAT RECORD.</summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.Item(System.Int32)">
      <summary>
            Gets a child <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> at a specified index.
            </summary>
      <param name="index">The index of the child TAM node.</param>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="index" /> is less than 0.</para>
        <para>- or -</para>
        <para>
          <paramref name="index" /> is equal to or greater than
            <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" />.<see cref="P:System.Collections.ICollection.Count" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.Item(System.String)">
      <summary>
            Gets a child <see cref="T:Triamec.Tam.Registers.RegisterComposite" /> with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is not the <see cref="P:Triamec.Tam.ITamNode.Name" />
            of any of the child <see cref="P:Triamec.Tam.ITamNodeComposite.Nodes" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.Nodes">
      <summary>
            Gets the child nodes of this TAM node composite.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Registers.RegisterComposite.NodesChanged">
      <summary>
            Event raised after the list of child <see cref="P:Triamec.Tam.Registers.RegisterComposite.Nodes" /> has changed.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Registers.RegisterComposite.NodesChanging">
      <summary>
            Event raised when child <see cref="P:Triamec.Tam.Registers.RegisterComposite.Nodes" /> are about to be removed and/or added.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.Revert">
      <summary>
            Recursively reverts the shadow values of committable registers.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.SingleSize">
      <summary>
            Gets the cumulated size of this <see cref="T:Triamec.Tam.Registers.RegisterComposite" /> type, in bytes,
            including all its nested components, but no shadow instances.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.Size">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Registers.RegisterComposite" /> instance, in bytes,
            including the size of shadow instances of this component and its nested components.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.Triamec#Tam#ITamNodeComposite#Item(System.Int32)">
      <summary>
            Gets a child TAM node at a specified index.
            </summary>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.Triamec#Tam#ITamNodeComposite#Item(System.String)">
      <summary>
            Gets a child TAM node with a specified name.
            </summary>
      <returns>Returns a child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterComposite.Triamec#Tam#ITamNodeComposite#Nodes">
      <summary>
            Gets the child nodes of this TAM node composite.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.Triamec#Tam#ITamNodeComposite#TryGetNode(System.String,Triamec.Tam.ITamNode@)">
      <summary>
            Attempts to retrieve a child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <param name="node">A child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" /> with the specified name,
            or <see langword="null" /> if no such child exists.</param>
      <returns>Whether a node with the specified name was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterComposite.TryGetNode(System.String,Triamec.Tam.Registers.IRegisterComponent@)">
      <summary>
            Attempts to retrieve a strongly typed child TAM node with a specified name.
            </summary>
      <param name="name">The name of the child TAM node.</param>
      <param name="node">A child TAM node of this <see cref="T:Triamec.Tam.ITamNodeComposite" /> with the specified name,
            or <see langword="null" /> if no such child exists.</param>
      <returns>Whether a node with the specified name was found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterExtensions">
      <summary>
            Extensions for registers.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterExtensions.RelativeAddress(Triamec.Tam.Registers.IRegisterComponent)">
      <summary>
            Determines the address <see cref="F:System.UriKind.Relative" /> to the root register, that is, the
            <see cref="P:Triamec.Tam.ITamDevice.Register" /> of the <see cref="P:Triamec.Tam.ITamDeviceComponent.Device" /> of this
            <paramref name="component" />.
            </summary>
      <param name="component">The component.</param>
      <returns>
            The <see cref="F:System.UriKind.Relative" /> address.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterLayoutAttribute">
      <summary>
            Custom attribute for the root <see cref="T:Triamec.Tam.Registers.RegisterComponent" />
            of a register layout.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterLayoutAttribute.#ctor(System.UInt32,System.UInt32)">
      <summary>
            Constructor
            </summary>
      <param name="rlid">The register layout identifier</param>
      <param name="size">
            The cumulated size of the attributed <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> class, in bytes,
            including all its nested components and shadow instances.
            </param>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterLayoutAttribute.Rlid">
      <summary>
            Gets the register layout identifier
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterLayoutAttribute.Size">
      <summary>
            Gets the cumulated size of the attributed <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> class, in bytes,
            including all its nested components and shadow instances.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterLayoutAttribute.UNSPECIFIED_RLID">
      <summary>
            The unspecified value for <see cref="P:Triamec.Tam.Registers.RegisterLayoutAttribute.Rlid" />.
            The value is <c>0u</c>.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterLayoutFactoryAttribute">
      <summary>
            Specifies the register layout factory type of an assembly containing a register layout.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterLayoutFactoryAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.RegisterLayoutFactoryAttribute" /> class.
            </summary>
      <param name="factoryType">The type of the register layout factory.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="factoryType" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterLayoutFactoryAttribute.FactoryType">
      <summary>
            Gets the type of the register layout factory.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterTagAttribute">
      <summary>
            Custom attribute to tag <see cref="T:Triamec.Tam.Registers.RegisterComponent" />s within a register layout
            with any number of key/value string pairs.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterTagAttribute.#ctor(System.String)">
      <summary>
            	Constructor of a marker tag with default inheritance.
            </summary>
      <param name="tagName">The name of the register tag.</param>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterTagAttribute.#ctor(System.String,System.String)">
      <summary>
            	Constructor of a key/value tag with default inheritance.
            </summary>
      <param name="tagName">The name of the register tag.</param>
      <param name="tagValue">The value of the register tag.</param>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterTagAttribute.#ctor(System.String,System.String,Triamec.Tam.Registers.RegisterTagInheritance)">
      <summary>
            	Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.RegisterTagAttribute" /> class.
            </summary>
      <param name="tagName">
            	The name of the register tag.
            </param>
      <param name="tagValue">
            	The value of the register tag.
            </param>
      <param name="inheritance">
            	How the tag is inherited by child registers.
            </param>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterTagAttribute.#ctor(System.String,Triamec.Tam.Registers.RegisterTagInheritance)">
      <summary>
            	Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.RegisterTagAttribute" /> class.
            </summary>
      <param name="tagName">
            	The name of the register tag.
            </param>
      <param name="inheritance">
            	How the tag is inherited by child registers.
            </param>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterTagAttribute.DEFAULT_INHERITANCE">
      <summary>
            	The default register tag inheritance.
            <para>
            	The value is <see cref="F:Triamec.Tam.Registers.RegisterTagInheritance.Inherit" />.
            </para></summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterTagAttribute.Inheritance">
      <summary>
            	Gets a value indicating how the tag is inherited by child registers.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterTagAttribute.TagName">
      <summary>
            Gets the name of the register tag.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterTagAttribute.TagValue">
      <summary>
            Gets the value of the register tag.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterTagConverter">
      <summary>
            A <see cref="T:System.ComponentModel.TypeConverter" /> for <see cref="P:Triamec.Tam.Registers.RegisterComponent.Tags" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterTagConverter.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterTagConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object 
            to the specified type, using the specified context.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>Returns <see langword="true" /> if this converter can perform the conversion; 
            otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterTagConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type, 
            using the specified context and culture information.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. 
            If a <see langword="null" /> reference is passed, the current culture is assumed.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter
            to.</param>
      <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterTagConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object" /> that specifies the type of object to get the properties
            for.</param>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> that will be used as a filter.</param>
      <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for the component, or
            <see langword="null" /> if there are no properties.
            </returns>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterTagInheritance">
      <summary>
            	Defines how register tags are inherited by child registers.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterTagInheritance.Inherit">
      <summary>
            Specifies to bequeath a register tag to all descendant registers.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterTagInheritance.None">
      <summary>
            Specifies to only define a register tag on the register itself.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.RegisterTagInheritance.Element">
      <summary>
            Specifies to define a register tag on the elements of an array, with the values as rainsing indices.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterUnitDisplayAttribute">
      <summary>
            Custom attribute for overriding the default display of <see cref="P:Triamec.Tam.Registers.RegisterComponent.Unit" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterUnitDisplayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.RegisterUnitDisplayAttribute" /> class.
            </summary>
      <param name="typeName">Name of the type.</param>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterUnitDisplayAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.RegisterUnitDisplayAttribute" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterUnitDisplayAttribute.RegisterUnitDisplayTypeName">
      <summary>
            Gets the name of the <see cref="T:System.Type" /> containing the logic for the register unit display.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.RegisterValueConverter">
      <summary>
            Converter for register values to other values.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterValueConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Tam.Registers.RegisterValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterValueConverter.ProvidesTabularValues">
      <summary>
            Gets a value indicating whether the compartments of the values have a consistent horizontal alignment.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterValueConverter.ProvidesTextualValues">
      <summary>
            Gets a value indicating whether the values should be treated as textual values.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterValueConverter.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.RegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.StringRegisterValueConverter">
      <summary>
            Converter to handle an integer register array as a <see langword="string" /> value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.StringRegisterValueConverter.#ctor(Triamec.Tam.Registers.TamRegisterArrayBase{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.StringRegisterValueConverter" /> class.
            </summary>
      <param name="integerArray">The integer register array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="integerArray" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.StringRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="value" /> is too long.</para>
        <para>
          <paramref name="value" /> contains the character <c>'\u0000'</c></para>
        <para>
          <paramref name="value" /> contains characters greater than <see cref="F:System.Byte.MaxValue" />.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.StringRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.StringRegisterValueConverter.ProvidesTextualValues">
      <summary>
            Gets a value indicating whether the values should be treated as textual values.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.StringRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.StringRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.StringRegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.StringRegisterValueConverter.Write(System.Object)" />
            and respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.StringRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="value" /> is too long.</para>
        <para>
          <paramref name="value" /> contains the character <c>'\u0000'</c></para>
        <para>
          <paramref name="value" /> contains characters greater than <see cref="F:System.Byte.MaxValue" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.TamArray`1">
      <summary>
            An array of 32-bit, 40-bit or 64-bit TAM registers on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <typeparam name="T">The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Registers.TamArray`1.CreateElement(System.UInt32)">
      <summary>Creates an array element at the specified index.</summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamArray`1.IsCommittable">
      <summary>
            Indicates whether updating the value of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is done indirectly.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamArray`1.IsPersistent">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            is included when saving register values persistent to a file.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamArray`1.Item(System.Int32)">
      <summary>
            Gets a child <see cref="T:Triamec.Tam.Registers.TamRegister`1" />
            at a specified index.
            </summary>
      <param name="index">The index of the child <see cref="T:Triamec.Tam.Registers.ITamRegister`1" />.</param>
      <returns>Returns a child <see cref="T:Triamec.Tam.Registers.ITamRegister`1" /> of this <see cref="T:Triamec.Tam.Registers.TamArray`1" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Registers.TamArray`1.ShadowOffset">
      <summary>
            Gets the register offset of the shadow register 
            of this <see cref="T:Triamec.Tam.Registers.TamReadonlyArray`1" />, in bytes.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.TamReadonlyArray`1">
      <summary>
            A read-only array of 32-bit, 40-bit or 64-bit TAM registers on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <typeparam name="T">The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.</typeparam>
    </member>
    <member name="P:Triamec.Tam.Registers.TamReadonlyArray`1.IsCommittable">
      <summary>
            Indicates whether updating the value of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is done indirectly.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamReadonlyArray`1.IsPersistent">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            is included when saving register values persistent to a file.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamReadonlyArray`1.Item(System.Int32)">
      <summary>
            Gets a child <see cref="T:Triamec.Tam.Registers.TamReadonlyRegister`1" />
            at a specified index.
            </summary>
      <param name="index">The index of the child <see cref="T:Triamec.Tam.Registers.ITamReadonlyRegister`1" />.</param>
      <returns>Returns a child <see cref="T:Triamec.Tam.Registers.ITamReadonlyRegister`1" /> of this <see cref="T:Triamec.Tam.Registers.TamReadonlyArray`1" />.</returns>
    </member>
    <member name="P:Triamec.Tam.Registers.TamReadonlyArray`1.ShadowOffset">
      <summary>
            Gets the register offset of the shadow register 
            of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />, in bytes.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.TamReadonlyRegister`1">
      <summary>
            A read-only, 32-bit, 40-bit or 64-bit TAM register on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <typeparam name="T">The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.</typeparam>
    </member>
    <member name="P:Triamec.Tam.Registers.TamReadonlyRegister`1.IsPersistent">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            is included when saving register values persistent to a file.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.TamReadonlyRegister`1.Revert">
      <summary>
            Recursively reverts the shadow values of committable registers.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.TamRegister`1">
      <summary>
            A 32-bit, 40-bit or 64-bit TAM register on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <typeparam name="T">The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.</typeparam>
      <typeparam name="TParent">The type of the parent <see cref="T:Triamec.Tam.ITamNode" />s.</typeparam>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegister`1.IsPersistent">
      <summary>
            Gets a value indicating whether this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            is included when saving register values persistent to a file.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegister`1.Revert">
      <summary>
            Recursively reverts the shadow values of committable registers.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegister`1.Write(System.String)">
      <summary>
            Parses a string and writes the register value to the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <param name="value">The value to parse and write to the register.</param>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a <see langword="null" /> reference.
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in a valid format to be parsed.
            </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> represents a value too small or too large to be parsed.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegister`1.Write(`0)">
      <summary>
            Writes the register value to the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <param name="value">The value to write to the register.</param>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegister`1.WriteFromObject(System.Object)">
      <summary>
            Writes the register value to the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <param name="value">The value to write to the register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a <see langword="null" /> reference.
            </exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> is not of type <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" />, and cannot be
            converted to <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.TamRegisterArrayBase`1">
      <summary>
            Base class of an array of 32-bit, 40-bit or 64-bit TAM registers on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <typeparam name="T">The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterArrayBase`1.#ctor(Triamec.Tam.Registers.RegisterComposite,System.Boolean,System.UInt32,System.Int32,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>
            Constructor
            </summary>
      <param name="parent">The parent register composite.</param>
      <param name="hasShadow">Whether the array has a shadow.</param>
      <param name="offset">The relative offset, in bytes.</param>
      <param name="length">The number of elements.</param>
      <param name="access">The accessibility of this register component.</param>
      <param name="browsableState">The visibility of the register component
            in GUI controls.</param>
      <param name="name">The name of this register component.</param>
      <param name="unit">A description of the physical unit of this register component.</param>
      <param name="description">The description of this register component.</param>
      <param name="tags">The key/value pairs of tags to attach to this register component.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterArrayBase`1.Count">
      <summary>
            Gets the number of child <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />s
            in this <see cref="T:Triamec.Tam.Registers.RegisterComposite" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterArrayBase`1.CreateElement(System.UInt32)">
      <summary>Creates an array element at the specified index.</summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterArrayBase`1.ElementConverterFactory">
      <summary>
            Gets or sets a function to create the converter to use for the array's elements.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterArrayBase`1.FindTaggedComponents(System.Object,System.Object,System.Collections.Generic.ICollection{Triamec.Tam.Registers.IRegisterComponent})"></member>
    <member name="P:Triamec.Tam.Registers.TamRegisterArrayBase`1.IsArray">
      <summary>
            Indicates if this <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> is an array.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterArrayBase`1.IsPersistent">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" />
            is included when saving register values persistent to a file.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterArrayBase`1.Length">
      <summary>
            Gets the number of elements in this register array.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterArrayBase`1.Padding">
      <summary>
            Gets the padding used to determine the <see cref="P:Triamec.Tam.Registers.IRegisterComponent.Offset" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterArrayBase`1.PredefinedImage">
      <summary>
            Gets the predefined image specification
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterArrayBase`1.Read">
      <summary>
            Reads all register values of the array from the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <returns>Returns all register values of this array.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterArrayBase`1.ReadRange(System.UInt32,System.UInt32)">
      <summary>
            Reads a range of register values from the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <param name="startIndex">The start index of the range to read.</param>
      <param name="rangeLength">The length of the range to read.</param>
      <returns>Returns the register values.</returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.TamRegisterBase`1">
      <summary>
            Base class of a 32-bit, 40-bit or 64-bit TAM register on an <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
      <typeparam name="T">The type of the register, which is one of
            <see langword="bool" />, <see langword="uint" />, <see langword="int" />, <see langword="ulong" />,
            <see langword="long" />, <see langword="float" />, <see cref="T:Triamec.TriaLink.Float40" />,
            <see langword="double" /> or an <see cref="T:System.Enum" /> type.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterBase`1.#ctor(Triamec.Tam.Registers.RegisterComposite,Triamec.Tam.Subscriptions.ISubscribable,System.UInt32,Triamec.Tam.Registers.RegisterAccess,System.ComponentModel.EditorBrowsableState,System.String,System.String,System.String,Triamec.Tam.Registers.RegisterTagAttribute[])">
      <summary>Constructor</summary>
      <param name="parent">The parent register composite.</param>
      <param name="shadow">The shadow register or <see langword="null" /> if the instance isn't committable.</param>
      <param name="offset">The relative offset, in bytes.</param>
      <param name="access">The accessibility of this register component.</param>
      <param name="browsableState">The visibility of the register component
            in GUI controls.</param>
      <param name="name">The name of this register component.</param>
      <param name="unit">A description of the physical unit of this register component.</param>
      <param name="description">The description of this register component.</param>
      <param name="tags">The key/value pairs of tags to attach to this register component.</param>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterBase`1.ConvertRawValue(System.Int32,Triamec.TriaLink.TamValue32[])">
      <summary>Converts the specified raw value to a value of this register's type.</summary>
      <param name="valueIndex">The index into the Tria-Link packet where value is located.</param>
      <param name="value">The Tria-Link packet.</param>
      <returns>The converted value.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="valueIndex" /> is equal or greater than
            <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" />, even if <paramref name="value" /> has
            <paramref name="valueIndex" /> elements.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterBase`1.GetTamValueConverter(System.Int32,System.Boolean)">
      <summary>Returns a converter where the interesting value is found at the specified index.</summary>
      <param name="valueIndex">The index into a <see cref="T:Triamec.TriaLink.TamValue32" /> array where the value begins.</param>
      <param name="shrinkFloat40">Whether to ignore the size of a register and always use one word.</param>
      <returns>A function taking one or two arrays of raw values, returning one transported value.</returns>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.IsCommittable">
      <summary>
            Indicates whether updating the value of this <see cref="T:Triamec.Tam.Registers.IRegisterComponent" /> is done indirectly.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.IsEnum">
      <summary>
            Indicates if this <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> holds values from an enumeration.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.Padding">
      <summary>
            Gets the padding used to determine the <see cref="P:Triamec.Tam.Registers.IRegisterComponent.Offset" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.PredefinedImage">
      <summary>
            Gets the predefined image specification.
            to use for this <see cref="T:Triamec.Tam.ITamNode" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterBase`1.Read">
      <summary>
            Reads the register value from the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <returns>
            The register value.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterBase`1.Read(Triamec.Tam.Registers.IRegisterComponent,System.String)">
      <summary>
            Finds a <see cref="T:Triamec.Tam.Registers.TamRegisterBase`1" /> with a particular tag and reads its value.
            </summary>
      <param name="searchRoot">The <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> where to start the recursive search.</param>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The value of the tag to search for.</param>
      <returns>
            Returns the value read of the tagged register.
            </returns>
      <exception cref="T:System.ArgumentException">
        <para>The register component with the given tag <paramref name="key" /> does not exist.</para>
        <para>The register component with the given tag is not of the generic type of
            <see cref="T:Triamec.Tam.Registers.TamRegisterBase`1" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="searchRoot" /> is <see langword="null" />.</para>
        <para>
          <paramref name="key" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterBase`1.Read(Triamec.Tam.Registers.IRegisterComponent,System.String,System.String)">
      <summary>
            Finds a <see cref="T:Triamec.Tam.Registers.TamRegisterBase`1" /> with a particular tag and reads its value.
            </summary>
      <param name="searchRoot">The <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> where to start the recursive search.</param>
      <param name="key">The tag key to search for.
            The key must not be <see langword="null" />.</param>
      <param name="value">The value of the tag to search for.</param>
      <returns>
            Returns the value read of the tagged register.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="searchRoot" /> is <see langword="null" />.</para>
        <para>
          <paramref name="key" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>The register component with the given tag <paramref name="key" /> and <paramref name="value" /> does
            not exist.</para>
        <para>The register component with the given tag is not of the generic type of
            <see cref="T:Triamec.Tam.Registers.TamRegisterBase`1" />.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.TamRegisterBase`1.ReadAsObject">
      <summary>
            Reads the register value from the <see cref="T:Triamec.Tam.TamDevice" />.
            </summary>
      <returns>The register value.</returns>
      <exception cref="T:System.ObjectDisposedException">The Tria-Link has been disposed.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">The register does not exist on the device.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.Shadow">
      <summary>
            Gets the shadow register of this TAM register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.ShadowOffset">
      <summary>
            Gets the register offset of the shadow register 
            of this <see cref="T:Triamec.Tam.Registers.TamRegisterBase`1" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.SingleSize">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Registers.RegisterComponent" /> type, in bytes,
            without considering its size duplication when 
            <c><see cref="P:Triamec.Tam.Registers.RegisterComponent.IsCommittable" /> == <see langword="true" /></c>.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.Size">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Registers.TamRegisterBase`1" /> instance, in bytes,
            including the size of its shadow instance if it exists.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.Station">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamStation" /> where this <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" /> belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.Triamec#Tam#Subscriptions#ISubscribable#Size">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Registers.TamRegisterBase`1" /> from the perspective of the subscription API, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.TamRegisterBase`1.ValueType">
      <summary>
            Gets the data type of the values of this <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.TestSignalCommand">
      <summary>
            Test signal generator command.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.NoCommand">
      <summary>
            No command.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.Stop">
      <summary>
            Stop the test signal generator.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartPositionSine">
      <summary>
            Start a position output sine wave.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartPositionSquare">
      <summary>
            Start a position output square wave.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartCurrentSine">
      <summary>
            Start a current output sine wave.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartCurrentSquare">
      <summary>
            Start a current output square wave.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartCurrentSineStaticVector">
      <summary>
            Start a current output static vector modulation with modulating length.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartVoltageSine">
      <summary>
            Start a voltage output sine wave.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartVoltageSineStaticVector">
      <summary>
            Activate a voltage output static vector modulation with modulating length.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartRotatingVectorConstantCurrent">
      <summary>
            Activate constant current output with rotating vector.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TestSignalCommand.StartRotatingVectorConstantVoltage">
      <summary>
            Activate constant voltage output with rotating vector.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand">
      <summary>
            Timing analysis selector command for high priority task
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand.AnalysisOff">
      <summary>
            Timing analsyis off
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand.TimingAll">
      <summary>
            Cumulated time used for all high prio task items during one low prio task cycle
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand.TimingCC">
      <summary>
            Time used for one call of current controller(s)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand.TimingPC">
      <summary>
            Time used for one call of position controller(s)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand.TimingIO">
      <summary>
            Time used for one call of IO
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand.TimingCCPC">
      <summary>
            Time used for one call of position and current controller(s)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand.TimingCCIO">
      <summary>
            Time used for one call of IO and current controller(s)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisHighPriorityTaskCommand.TimingCCPCIO">
      <summary>
            Time used for one call of IO, position and current controller(s)
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.TimingAnalysisLowPriorityTaskCommand">
      <summary>
            Timing analysis selector command for low priority task
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisLowPriorityTaskCommand.AnalysisOff">
      <summary>
            Timing analsyis off
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisLowPriorityTaskCommand.TimingAll">
      <summary>
            Time used for all low prio task items
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisLowPriorityTaskCommand.TimingIO">
      <summary>
            Time used for isochronous IO (includes break(s) by controller task)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisLowPriorityTaskCommand.TimingTama">
      <summary>
            Time used for isochronous Tama (includes break(s) by controller task)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisLowPriorityTaskCommand.TimingStateMachine">
      <summary>
            Time used for state machines with path planning (includes break(s) by controller task)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisLowPriorityTaskCommand.TimingPalBus">
      <summary>
            Time used for PALbus communication part (includes break(s) by controller task)
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.TimingAnalysisLowPriorityTaskCommand.TimingSchedule">
      <summary>
            Time used for Schedule on PalControl (includes break(s) by controller task)
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.UniversalRegisterType">
      <summary>
            Representation of a universal register, as used by the UniversalRegisterValueConverter.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.UniversalRegisterType.Hex">
      <summary>
            32-bit hexadecimal representation as used by the HexRegisterValueConverter.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.UniversalRegisterType.Signed">
      <summary>
            Representation as signed 32-bit integer.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.UniversalRegisterType.Float">
      <summary>
            Single precision floating point representation.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.UniversalRegisterValueConverter">
      <summary>
            Converter for register values with several possible interpretations.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.UniversalRegisterValueConverter.#ctor(Triamec.Tam.Registers.ITamReadonlyRegister{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.UniversalRegisterValueConverter" /> class.
            </summary>
      <param name="integerRegister">The integer register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="integerRegister" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.UniversalRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.UniversalRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.UniversalRegisterValueConverter.FormatType">
      <summary>
            Gets or sets the type which should be used to format the underlying value.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.UniversalRegisterValueConverter.ProvidesTabularValues">
      <summary>
            Gets a value indicating whether the compartments of the values have a consistent horizontal alignment.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.UniversalRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component and converts it to a hexadecimal string representation.
            </summary>
      <returns>
            A value of type <see cref="T:System.String" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.UniversalRegisterValueConverter.SetFormatType(Triamec.Tam.Registers.UniversalRegisterType)">
      <summary>
            Sets <see cref="P:Triamec.Tam.Registers.UniversalRegisterValueConverter.FormatType" /> to the specified value.
            </summary>
      <exception cref="T:Triamec.Tam.TimeoutException">The caching register couldn't be written.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.UniversalRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.UniversalRegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.UniversalRegisterValueConverter.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.UniversalRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A <see cref="T:System.String" /> value with format according to <see cref="P:Triamec.Tam.Registers.UniversalRegisterValueConverter.FormatType" />.
            </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.UniversalRegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.UnixTimeRegisterValueConverter">
      <summary>
            Converter to handle a <see cref="T:System.Int64" /> register as a POSIX date value, converted into a <see cref="T:System.DateTime" />
            with <see cref="F:System.DateTimeKind.Local" /> time.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.UnixTimeRegisterValueConverter.#ctor(Triamec.Tam.Registers.ITamReadonlyRegister{System.Int64})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.DateTimeRegisterValueConverter" /> class.
            </summary>
      <param name="register">The register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="register" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.UnixTimeRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.UnixTimeRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.UnixTimeRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.UnixTimeRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.RegisterValueConverter.Write(System.Object)" /> and
            respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.UnixTimeRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.Utf8StringRegisterValueConverter">
      <summary>
            Converter to handle an integer register array as an <see cref="P:System.Text.Encoding.UTF8" /> encoded <see langword="string" />
            value.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.#ctor(Triamec.Tam.Registers.TamRegisterArrayBase{System.Int32})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.Utf8StringRegisterValueConverter" /> class.
            </summary>
      <param name="integerArray">The integer register array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="integerArray" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.CheckValue(System.Object)">
      <summary>
            Checks the specified formatted value for validity.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="value" /> is too long.</para>
        <para>
          <paramref name="value" /> contains the character <c>'\u0000'</c></para>
        <para>
          <paramref name="value" /> contains characters greater than <see cref="F:System.Byte.MaxValue" />.</para>
      </exception>
      <exception cref="T:System.NotSupportedException">The converter doesn't support writing.</exception>
      <exception cref="T:System.ArgumentException">The value is not valid.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.Format(System.Object)">
      <summary>
            Formats the specified value according to this converter.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> has the wrong type.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.ProvidesTextualValues">
      <summary>
            Gets a value indicating whether the values should be treated as textual values.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.Read">
      <summary>
            Reads the value of the register component.
            </summary>
      <returns>
            A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.
            </returns>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.ValueType">
      <summary>
            Gets the type of value returned by <see cref="M:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.Read" /> and accepted by <see cref="M:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.Write(System.Object)" />
            and respective overloads.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Utf8StringRegisterValueConverter.Write(System.Object)">
      <summary>
            Writes the specified value to the register component.
            </summary>
      <param name="value">A value of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="value" /> is too long.</para>
        <para>
          <paramref name="value" /> contains the character <c>'\u0000'</c></para>
        <para>
          <paramref name="value" /> contains characters greater than <see cref="F:System.Byte.MaxValue" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> cannot be written to the register, for example,
            because it is not of type <see cref="P:Triamec.Tam.Registers.RegisterValueConverter.ValueType" />.</exception>
      <exception cref="T:System.NotSupportedException">The underlying register is read-only.</exception>
      <exception cref="T:Triamec.Tam.TimeoutException">A communication timeout occurred.</exception>
    </member>
    <member name="T:Triamec.Tam.Registers.VectorModulationType">
      <summary>
            Characterization of the modulation method used in space vector modulation and pulse width modulation
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.VectorModulationType.SinusoidalPwm">
      <summary>
            Continuous sinusoidal PWM
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.VectorModulationType.ThirdHarmonicInjectionPwm">
      <summary>
            Continuous 3rd harmonic injection PWM
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.VectorModulationType.SymmetricalPwm">
      <summary>
            Continuous symmetrical PWM
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.Registers.RegisterComponent" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies this configuration to the configured TAM node.
            </summary>
      <param name="matchResult">The match result used as context.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The application failed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" /> and
            is used by the method.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.DoPostDeserialization(System.String)">
      <summary>
            Ensures this configuration is ready to use after deserialization.
            </summary>
      <param name="configurationFile">The absolute path to the configuration file.</param>
      <exception cref="T:Triamec.Configuration.ConfigurationException">The loaded configuration is not a valid configuration.</exception>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.PersistedAddress">
      <summary>
            Gets or sets the address of the configured register relative to the top register.
            </summary>
      <exception cref="T:System.UriFormatException">The address is not a relative URI.</exception>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Type">
      <summary>
            Gets or sets the type of the configured register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.RegisterComponentConfiguration.Value">
      <summary>
            Gets or sets the value of the configured register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Configuration.RegisterCompositeConfiguration">
      <summary>
            XML serializable counterpart to <see cref="T:Triamec.Tam.Registers.RegisterComposite" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.RegisterCompositeConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.Configuration.RegisterCompositeConfiguration" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.RegisterCompositeConfiguration.Apply(Triamec.Configuration.MatchResult)">
      <summary>
            Applies the configuration.
            </summary>
      <param name="matchResult">The match result.</param>
      <returns>
        <see langword="null" /> if the operation succeeded, else the failure.
            </returns>
      <exception cref="T:Triamec.Configuration.ConfigurationException">A communication timeout occurred.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matchResult" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Registers.Configuration.Resolving.RegisterResolver">
      <summary>
            Updater for persisted registers within a TAM configuration from one specific register layout to another specific
            one.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.Resolving.RegisterResolver.#ctor(System.String,System.UInt32,System.UInt32,Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdateGroup[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.Configuration.Resolving.RegisterResolver" /> class.
            </summary>
      <param name="description">A description why the register needed to be updated.</param>
      <param name="previousRegisterLayoutId">The register layout identifier of the register layout which is
            updated.</param>
      <param name="registerLayoutId">The register layout identifier of the new register layout where the update is
            defined.</param>
      <param name="updateGroups">The update groups.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.Resolving.RegisterResolver.PreviousRegisterLayoutId">
      <summary>
            Gets the <see cref="P:Triamec.Tam.Configuration.TamDeviceConfiguration.RegisterLayoutId" /> from which an update is implemented by this
            instance.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.Resolving.RegisterResolver.Resolve(Triamec.Tam.Configuration.TamDeviceConfiguration)">
      <summary>
            Resolves the specified configuration.
            </summary>
      <param name="configuration">The configuration having <see cref="P:Triamec.Tam.Configuration.TamDeviceConfiguration.RegisterLayoutId" />
            equal to <see cref="P:Triamec.Tam.Registers.Configuration.Resolving.RegisterResolver.PreviousRegisterLayoutId" />.</param>
    </member>
    <member name="T:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate">
      <summary>
            Static update declaration for one register persisted in the TAM configuration.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate.#ctor(System.String,System.Type,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate" /> class.
            </summary>
      <param name="address">The address of the register as persisted in the TAM configuration.</param>
      <param name="registerType">The type of the new register or <see langword="null" /> when no new register
            exists.</param>
      <param name="unit">The unit of the new register or <see langword="null" /> or <see cref="F:System.String.Empty" />
            if no new register exists.</param>
      <param name="description">The description for the register or <see langword="null" /> or
            <see cref="F:System.String.Empty" /> if no new register exists.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate.Address">
      <summary>
            Gets the address of the register as persisted in the TAM configuration.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate.Description">
      <summary>
            Gets the description for the new register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate.RegisterType">
      <summary>
            Gets the type of the new register.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate.Unit">
      <summary>
            Gets the unit of the new register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdateGroup">
      <summary>
            Static declaration of a group of <see cref="T:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdateGroup.#ctor(System.String,System.String,Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdate[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdateGroup" /> class.
            </summary>
      <param name="title">The mandatory title of the update group.</param>
      <param name="description">The optional description.</param>
      <param name="updates">The individual updates belonging to this group, at least one.</param>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdateGroup.Description">
      <summary>
            Gets the optional description of the update group.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Registers.Configuration.Resolving.RegisterUpdateGroup.Title">
      <summary>
            Gets the title of the update group.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Esi.AccessTypeReadRestrictions"></member>
    <member name="T:Triamec.Tam.Registers.Esi.AccessTypeWriteRestrictions"></member>
    <member name="T:Triamec.Tam.Registers.Esi.IEsiProvider">
      <summary>
            Provider for EtherCAT dictionaries.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Esi.ItemsChoiceType1"></member>
    <member name="T:Triamec.Tam.Registers.Esi.ItemsChoiceType2"></member>
    <member name="T:Triamec.Tam.Registers.Esi.ObjectTypeFlagsCategory"></member>
    <member name="T:Triamec.Tam.Registers.Esi.ObjectTypeFlagsPdoMapping"></member>
    <member name="T:Triamec.Tam.Registers.Esi.ObjectTypeFlagsSafetyMapping"></member>
    <member name="T:Triamec.Tam.Registers.Esi.ObjectTypeFlagsSdoAccess"></member>
    <member name="T:Triamec.Tam.Registers.Esi.ObjectTypeFlagsTransition"></member>
    <member name="T:Triamec.Tam.Registers.Esi.SubItemTypeFlagsCategory"></member>
    <member name="T:Triamec.Tam.Registers.Esi.SubItemTypeFlagsPdoMapping"></member>
    <member name="T:Triamec.Tam.Registers.Esi.SubItemTypeFlagsSafetyMapping"></member>
    <member name="T:Triamec.Tam.Registers.Esi.TamAncestryUsage"></member>
    <member name="T:Triamec.Tam.Registers.Esi.TamConverterTarget"></member>
    <member name="T:Triamec.Tam.Registers.Esi.TamEditorBrowsable"></member>
    <member name="T:Triamec.Tam.Registers.Esi.TamPersistency"></member>
    <member name="T:Triamec.Tam.Registers.Tags.AxisCommandTags">
      <summary>
            This class provides string constants for tag names of axis commands found in all axis register layouts.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.CurrentControllerTestSignalAddToInput">
      <summary>
            The tag name of the register with the switch controlling the input point for the test signal.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerCouplingTimestamp">
      <summary>
            The tag name of the register with the timestamp of the path values of the path planner.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerDedicatedAcceleration">
      <summary>
            The tag name of the register with the new desired acceleration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerDedicatedPosition">
      <summary>
            The tag name of the register with the new desired position.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerDedicatedVelocity">
      <summary>
            The tag name of the register with the new desired velocity.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerLimitTorque">
      <summary>
            The tag name of the register for specifying whether to move with limited torque.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerNewAcceleration">
      <summary>
            The tag name of the register with a continuously delivered desired acceleration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerNewPosition">
      <summary>
            The tag name of the register with a continuously delivered desired position.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerNewVelocity">
      <summary>
            The tag name of the register with a continuously delivered desired velocity.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.PathPlannerSampleTorqueCurrent">
      <summary>
            The tag name of the register for specifying whether to sample a torque current.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisCommandTags.TestSignalGenerator">
      <summary>
            The tag name of the register containing the test signal generator commands.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Tags.AxisParameterTags">
      <summary>
            This class provides string constants for tag names of axis parameters found in all axis register layouts.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.BiquadFilter">
      <summary>
            The tag name of the root register composite with the biquadratic filters.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.BiquadFilterDampingDenominator">
      <summary>
            The tag name of the register with
            the damping factor denominator of a biquad filter of the position PID controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.BiquadFilterDampingNumerator">
      <summary>
            The tag name of the register with
            the damping factor numerator of a biquad filter of the position PID controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.BiquadFilterFrequencyDenominator">
      <summary>
            The tag name of the register with
            the edge frequency denominator of a biquad filter of the position PID controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.BiquadFilterFrequencyNumerator">
      <summary>
            The tag name of the register with
            the edge frequency numerator of a biquad filter of the position PID controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.BiquadFilterType">
      <summary>
            The tag name of the register with
            the type of the biquadratic filter of the position PID controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.CurrentControllerErrorLimitD">
      <summary>
            The tag name of the register with
            the error limit (desiredCurrent-actualCurrent) of the current PI controller channel D.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.CurrentControllerErrorLimitQ">
      <summary>
            The tag name of the register with
            the limit (desiredCurrent-actualCurrent) of current PI controller channel Q.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.CurrentControllerKrD">
      <summary>
            The tag name of the register with
            the gain of the current PID controller channel D.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.CurrentControllerKrQ">
      <summary>
            The tag name of the register with
            the gain of the current PID controller channel Q.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.CurrentControllerOutputLimit">
      <summary>
            The tag name of the register with
            the output limit of current PI controller channel Q.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.CurrentControllerTnD">
      <summary>
            The tag name of the register with
            the integrator time constant of the current PID controller channel D.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.CurrentControllerTnQ">
      <summary>
            The tag name of the register with
            the integrator time constant of the current PID controller channel Q.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.EncoderInvertDirection">
      <summary>
            The tag name of a register with the encoder invert direction.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.EncoderLines">
      <summary>
            The tag name of a register with the number of encoder counts per mechanical revolution.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.EncoderPitch">
      <summary>
            The tag name of a register with
            the encoder pitch value.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.EncoderType">
      <summary>The tag name of a register telling the type of the connected encoder.</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.EnvironmentMotorPeakCurrent">
      <summary>
            The tag name of the register with
            the motor peak current limit.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.EnvironmentNominalCurrent">
      <summary>
            The tag name of the register with
            the nominal motor current.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.Homing">
      <summary>
            The tag name of a register with
            information related to homing.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerAccelerationMaximum">
      <summary>
            The tag name of the register with the maximal allowed acceleration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerDecelerationMaximum">
      <summary>
            The tag name of the register with the maximal allowed deceleration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerDynamicReductionFactor">
      <summary>
            The tag name of the register with the dynamic reduction factor (DRF) of the path planner.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerEmergencyDeceleration">
      <summary>
            The tag name of the register with the deceleration used for emergency stop.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerJerkMaximum">
      <summary>
            The tag name of the register with the maximal allowed jerk.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerModuloPositionMaximum">
      <summary>
            The tag name of the register with
            the maximal position used for modulo position.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerModuloPositionMinimum">
      <summary>
            The tag name of the register with
            the minimal position used for modulo position.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerTorqueLimitChangeRate">
      <summary>
            The tag name of the register with the torque limit change rate.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerTorqueModeRelativeEnable">
      <summary>
            The tag name of the register with the torque Relativ Mode enable switch.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PathPlannerVelocityMaximum">
      <summary>
            The tag name of the register with the maximal allowed velocity.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PositionControllerErrorLimit">
      <summary>
            The tag name of the register with
            the error limit of position PID controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PositionControllerKr">
      <summary>
            The tag name of the register with
            the gain of the position PID controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PositionControllerOutputLimit">
      <summary>
            The tag name of the register with
            the output limit of position PID controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisParameterTags.PositionControllerParameters">
      <summary>
            The tag name of the <see cref="T:Triamec.Tam.Registers.RegisterComposite" /> with the position controller parameters.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Tags.AxisSignalTags">
      <summary>
            This class provides string constants for tag names of axis signals found in all axis register layouts.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.ActualPosition">
      <summary>
            The tag name of the register with the actually measured position or angle.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.ActualPositionFloat">
      <summary>
            The tag name of the register with the actually measured position or angle.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.AnalogEncoderCosine">
      <summary>
            The tag name of the register with the analog encoder cosine signal.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.AnalogEncoderSine">
      <summary>
            The tag name of the register with the analog encoder sine signal.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CommutationToEncoderAngle">
      <summary>
            The tag name of the register with the commutation to encoder angle difference.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CurrentControllerActualCurrentD">
      <summary>
            The tag name of the register with the measured D component of the D-Q rotating frame.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CurrentControllerActualCurrentQ">
      <summary>
            The tag name of the register with the measured Q component of the D-Q rotating frame.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CurrentControllerErrorQ">
      <summary>
            The tag name of the register with the measured current error of current controller Q.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CurrentControllerOutputVoltageD">
      <summary>
            The tag name of the register with the D output voltage component of the D-Q rotating frame.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CurrentControllerOutputVoltageQ">
      <summary>
            The tag name of the register with the Q output voltage component of the D-Q rotating frame.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.CurrentControllerTestSignal">
      <summary>
            The tag name of the register with the test signal of the current controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.Error">
      <summary>
            Gets the tag name of the register with the <see cref="T:Triamec.TriaLink.AxisErrorIdentification" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.InterpolatorAcceleration">
      <summary>
            The tag name of the register with the desired acceleration
            interpolated to the cycle time of the position controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.InterpolatorPosition">
      <summary>
            The tag name of the register with the desired position
            interpolated to the cycle time of the position controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.InterpolatorVelocity">
      <summary>
            The tag name of the register with the desired velocity
            interpolated to the cycle time of the position controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.PathPlannerAcceleration">
      <summary>
            The tag name of the register with
            the desired acceleration.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.PathPlannerDoneSignal">
      <summary>
            The tag name of the register that indicates the end of a path planner move.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.PathPlannerPosition">
      <summary>
            The tag name of the register with
            the desired position.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.PathPlannerVelocity">
      <summary>
            The tag name of the register with
            the desired velocity.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.PositionControllerOutputCurrentQ">
      <summary>
            The tag name of the register with the requested output current of position controller.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.PositionControllerTestSignal">
      <summary>
            The tag name of the register with the test signal added to the position controller input or output.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.PositionError">
      <summary>
            The tag name of the register with the measured position or angle error.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.State">
      <summary>
            Gets the tag name of the register with the <see cref="T:Triamec.TriaLink.AxisState" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.AxisSignalTags.TamRequest">
      <summary>
            Gets the tag name of the register with the <see cref="T:Triamec.Tam.Requests.TamRequest" /> identifying a service
            request.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Tags.CommonTags">
      <summary>
            This class provides string constants for common tag names found in usually all register layouts.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.CommonTags.Axes">
      <summary>The tag name of the register composite containing the axes of a drive.</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.CommonTags.CommitSwitch">
      <summary>
            The tag name of the register to
            commit prepared parameters and calc internal parameters
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.CommonTags.Identification">
      <summary>
            The tag name of a register composite containing an identifier.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.CommonTags.Unit">
      <summary>
            The tag name of a register specifying a physical unit for others.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.CommonTags.WriteMapId">
      <summary>
            The tag name of a register identifying a persistent memory layout on the device.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Tags.GeneralParameterTags">
      <summary>
            This class provides string constants for tag names of general parameters on a device.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralParameterTags.CycleTime">
      <summary>
            The tag name of a register indicating the duration of a cycle of a specified task executed on an
            <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralParameterTags.DCBusVoltageLowerLimit">
      <summary>
            The tag name of the register with
            the value of the lower limit for the DC-bus voltage.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralParameterTags.DCBusVoltageUpperLimit">
      <summary>
            The tag name of the register with
            the value of the upper limit for the DC-bus voltage.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralParameterTags.MotorBaseConfiguration">
      <summary>
            The tag name of the register with
            the information about the <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralParameterTags.PwmTimeResolution">
      <summary>
            The tag name of the register with
            the time resolution for pulse width modulation switch time.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Tags.GeneralSignalTags">
      <summary>
            This class provides string constants for tag names of general signals on a device.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.ChipTemperature">
      <summary>
            Gets the tag name of the signal containing the current chip temperature of the device.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.DeviceError">
      <summary>Gets the tag name of the signal containing the current device error.</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.DeviceRequest">
      <summary>
            Gets the tag name of the signal containing the current <see cref="T:Triamec.Tam.Requests.TamRequest" /> on the device.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.DeviceState">
      <summary>Gets the tag name of the signal containing the current device state.</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.Errors">
      <summary>Gets the tag name of the signal containing error identifications.</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.States">
      <summary>Gets the tag name of the signal containing state information.</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.StateTransition">
      <summary>Gets the tag name of the state transition signal.</summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.Timestamp">
      <summary>
            The tag name of the register with 
            the timestamp which is used for cyclical Tria-Link messages.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Tags.InternalTags">
      <summary>
            This class provides string constants for device internal tag names.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.CommandTime">
      <summary>
            The tag name of the register containing the timestamp of the last TAM request.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.Event">
      <summary>
            The tag name of the register containing a trigger for a specified state machine.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.EventParameter">
      <summary>
            The tag name of the register containing a trigger for a specified state machine.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.ExternalError">
      <summary>
            The tag name of the boolean register where a device fault can be forced.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.PathPlannerCommand">
      <summary>
            The tag name of the register with the path planner command.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.PathPlannerDirection">
      <summary>
            The tag name of the register with the path planner direction.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.PathPlannerEndPosition">
      <summary>
            The tag name of the register with the internal desired position within the path planner.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.Publication">
      <summary>
            The tag name of a publication related register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.SentinelName">
      <summary>
            The name of the last register.
            Used to fool-proof detect changed register layouts with identical RLIDs.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.SentinelValue">
      <summary>
            The value of the last register. Used to fool-proof detect changed register layouts with
            identical RLIDs.
            <para>The value is the unsigned integer version of the string <c>"Last"</c>.</para></summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.Subscription">
      <summary>
            The tag name of a subscription related register.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.SubscriptionRegisters">
      <summary>
            The tag key name of an <see langword="int" /> register holding the byte address of a publication.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.InternalTags.TamRequest">
      <summary>
            The tag name of the register containing the TAM request for a new command to execute.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Tags.ScheduleTags">
      <summary>
            This class provides string constants for tags related to the <see cref="N:Triamec.Tam.Schedules" /> namespace.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.ScheduleTags.Command">
      <summary>
            The tag name of the scheduler command.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.ScheduleTags.Count">
      <summary>
            The tag name of the number of used entries in a schedule.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.ScheduleTags.Entries">
      <summary>
            The tag name of the schedule entry array.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.ScheduleTags.Index">
      <summary>
            The tag name of the index of the last sent message of the schedule.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.ScheduleTags.Packet">
      <summary>
            The tag name of the message of a schedule entry.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.ScheduleTags.RelativeSendTime">
      <summary>
            The tag name of the relative send time of a schedule entry.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.ScheduleTags.Schedules">
      <summary>
            The tag name of the schedule array.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.ScheduleTags.State">
      <summary>
            The tag name of the schedule state.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Registers.Tags.TamaTags">
      <summary>
            	This class provides string constants for tag names of Tama related registers found in all register layouts.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaAsynchronousMainCommand">
      <summary>
            The tag name of the register with
            the command for the asynchronous Tama main application.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaAsynchronousMainState">
      <summary>
            The tag name of the register with
            the state of the asynchronous Tama main application.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaAsynchronousVMState">
      <summary>
            The tag name of the register with
            the state variable of the asynchronous Tama virtual machine.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaDoubleVariable">
      <summary>
            The tag name of a register with
            a Tama general purpose double precision floating point variable.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaDownloadTarget">
      <summary>
            The tag name of the register array with
            the memory for Tama binary code.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaIntVariable">
      <summary>
            The tag name of a register with
            a Tama general purpose integer variable.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaIsochronousMainCommand">
      <summary>
            The tag name of the register with
            the command for the isochronous Tama main application.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaIsochronousMainState">
      <summary>
            The tag name of the register with
            the state of the isochronous Tama main application.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaIsochronousVMState">
      <summary>
            The tag name of the register with
            the state variable of the isochronous Tama virtual machine.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Registers.Tags.TamaTags.TamaVariable">
      <summary>
            The tag name of a register with
            a Tama general purpose float variable.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Requests.ITamRequestDestination">
      <summary>
            An executor of <see cref="T:Triamec.Tam.Requests.TamRequest" />s.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Requests.ITamRequestDestination.AbortAllTamRequests">
      <summary>
            Artificially terminates all <see cref="T:Triamec.Tam.Requests.TamRequest" />s
            sent to all destinations with
            the same <see cref="P:Triamec.Tam.Requests.ITamRequestDestination.DestinationStation" />
            as this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Requests.ITamRequestDestination.AbortTamRequests">
      <summary>
            Artificially terminates all <see cref="F:Triamec.Tam.Requests.TamRequestState.Pending" /> or
            <see cref="F:Triamec.Tam.Requests.TamRequestState.Executing" /><see cref="T:Triamec.Tam.Requests.TamRequest" />s sent to this
            <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.ITamRequestDestination.DestinationStation">
      <summary>
            Gets the station wherein this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" /> belongs.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Requests.ITamRequestDestination.Transition">
      <summary>
            Occurs after the state machine of this <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" /> was triggered.
            </summary>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>An underlying subscription could not be created or enabled.</para>
        <para>Try to lower device wide usage of subscriptions or use a polling mechanism.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">
            The instance has been <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Requests.ITamRequestSource">
      <summary>
            	An issuer of <see cref="T:Triamec.Tam.Requests.TamRequest" />s.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Requests.StateTransition">
      <summary>
            Represents a state transition observed by a device state observer.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.StateTransition.AsyTamaRequest">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Requests.TamRequest" /> that triggered a state transition
            of the Tama program executed in the
            <see cref="P:Triamec.Tam.TamaNode.AsynchronousVM" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.StateTransition.AxisRequests">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Requests.TamRequest" />s that triggered transitions
            of the axes' state machines.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.StateTransition.DeviceRequest">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Requests.TamRequest" /> that triggered a transition of the device state machine.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.StateTransition.Errors">
      <summary>
            Gets the errors at the time of this transition.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.StateTransition.IsoTamaRequest">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Requests.TamRequest" /> that triggered a state transition
            of the Tama program executed in the
            <see cref="P:Triamec.Tam.TamaNode.IsochronousVM" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.StateTransition.States">
      <summary>
            Gets the current states after this transition.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.StateTransition.Timestamp">
      <summary>
            Gets a relative timing information when the transition(s) did occur.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Requests.StateTransition.ToString">
      <summary>
            Combines <see cref="P:Triamec.Tam.Requests.StateTransition.States" /> and <see cref="P:Triamec.Tam.Requests.StateTransition.Errors" /> representation.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Requests.TamRequest">
      <summary>
            The representation of any requests issued by <see cref="T:Triamec.Tam.Requests.ITamRequestSource" /> and addressed to a
            <see cref="T:Triamec.Tam.Requests.ITamRequestDestination" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequest.Abort">
      <summary>
            Artificially terminates this <see cref="T:Triamec.Tam.Requests.TamRequest" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Cannot abort a foreign <see cref="T:Triamec.Tam.Requests.TamRequest" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Requests.TamRequest.CurrentState">
      <summary>
            Gets the state in the life cycle of this <see cref="T:Triamec.Tam.Requests.TamRequest" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.TamRequest.Identification">
      <summary>
            Gets the identification of this <see cref="T:Triamec.Tam.Requests.TamRequest" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.TamRequest.Successor">
      <summary>
            Gets the successor of this <see cref="T:Triamec.Tam.Requests.TamRequest" /> or <see langword="null" /> if unknown or
            not applicable.
            </summary>
    </member>
    <member name="E:Triamec.Tam.Requests.TamRequest.Terminated">
      <summary>
            Occurs when the request is terminated.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.TamRequest.Termination">
      <summary>
            Gets the reason why this <see cref="T:Triamec.Tam.Requests.TamRequest" /> 
            has been <see cref="F:Triamec.Tam.Requests.TamRequestState.Terminated" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequest.WaitForExecuting">
      <summary>
            Waits until the <see cref="P:Triamec.Tam.Requests.TamRequest.CurrentState" /> of this <see cref="T:Triamec.Tam.Requests.TamRequest" /> 
            gets either <see cref="F:Triamec.Tam.Requests.TamRequestState.Executing" /> or <see cref="F:Triamec.Tam.Requests.TamRequestState.Terminated" />.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait,
            or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>Returns <see langword="true" /> if the request is or was executing;
            otherwise, <see langword="false" /> indicates a timeout.</returns>
      <exception cref="T:System.InvalidOperationException">
            No observers present. <see cref="E:Triamec.Tam.Requests.ITamRequestDestination.Transition" /> has to be subscribed at least
            once, or at least one client has to register observation using <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequest.WaitForExecuting(System.Int32)">
      <summary>
            Waits until the <see cref="P:Triamec.Tam.Requests.TamRequest.CurrentState" /> of this <see cref="T:Triamec.Tam.Requests.TamRequest" /> 
            gets either <see cref="F:Triamec.Tam.Requests.TamRequestState.Executing" /> or <see cref="F:Triamec.Tam.Requests.TamRequestState.Terminated" />.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait,
            or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>Returns <see langword="true" /> if the request is or was executing;
            otherwise, <see langword="false" /> indicates a timeout.</returns>
      <exception cref="T:System.InvalidOperationException">
            No observers present. <see cref="E:Triamec.Tam.Requests.ITamRequestDestination.Transition" /> has to be subscribed at least
            once, or at least one client has to register observation using <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequest.WaitForSuccess(System.TimeSpan)">
      <summary>
            Waits for the successful termination of this <see cref="T:Triamec.Tam.Requests.TamRequest" />.
            </summary>
      <param name="timeout">
            The maximum duration for the task number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />
            to wait indefinitely.
            </param>
      <exception cref="T:System.InvalidOperationException">
            No observers present. <see cref="E:Triamec.Tam.Requests.ITamRequestDestination.Transition" /> has to be subscribed at least
            once, or at least one client has to register observation using <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">The request didn't terminate upon <paramref name="timeout" />.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
            The request's <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> wasn't <see cref="F:Triamec.Tam.Requests.TamRequestResolution.Completed" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequest.WaitForSuccessAsync(System.TimeSpan)">
      <summary>
            Starts a task that completes when the <see cref="P:Triamec.Tam.Requests.TamRequest.CurrentState" /> of this
            <see cref="T:Triamec.Tam.Requests.TamRequest" /> gets <see cref="F:Triamec.Tam.Requests.TamRequestState.Terminated" />.
            </summary>
      <param name="timeout">
            The maximum duration for the task number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />
            to wait indefinitely.
            </param>
      <returns>
            A task which only succeeds if <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> is <see cref="F:Triamec.Tam.Requests.TamRequestResolution.Completed" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            No observers present. <see cref="E:Triamec.Tam.Requests.ITamRequestDestination.Transition" /> has to be subscribed at least
            once, or at least one client has to register observation using <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.
            </exception>
      <exception cref="T:Triamec.Tam.TimeoutException">The request didn't terminate upon <paramref name="timeout" />.</exception>
      <exception cref="T:Triamec.Tam.CommandRejectedException">
            The request's <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> wasn't <see cref="F:Triamec.Tam.Requests.TamRequestResolution.Completed" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequest.WaitForTermination">
      <summary>
            Waits until the <see cref="P:Triamec.Tam.Requests.TamRequest.CurrentState" /> of this <see cref="T:Triamec.Tam.Requests.TamRequest" />
            gets <see cref="F:Triamec.Tam.Requests.TamRequestState.Terminated" />.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait,
            or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the request was terminated; otherwise, <see langword="false" /> indicates a
            timeout.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            No observers present. <see cref="E:Triamec.Tam.Requests.ITamRequestDestination.Transition" /> has to be subscribed at least once,
            or at least one client has to register observation using <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequest.WaitForTermination(System.Int32)">
      <summary>
            Waits until the <see cref="P:Triamec.Tam.Requests.TamRequest.CurrentState" /> of this <see cref="T:Triamec.Tam.Requests.TamRequest" />
            gets <see cref="F:Triamec.Tam.Requests.TamRequestState.Terminated" />.
            </summary>
      <param name="millisecondsTimeout">The number of milliseconds to wait,
            or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
      <returns>
        <see langword="true" /> if the request was terminated; otherwise, <see langword="false" /> indicates a
            timeout.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            No observers present. <see cref="E:Triamec.Tam.Requests.ITamRequestDestination.Transition" /> has to be subscribed at least once,
            or at least one client has to register observation using <see cref="M:Triamec.Tam.ITamDevice.AddStateObserver(System.Object)" />.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Requests.TamRequestIdentification">
      <summary>
            The identification of a <see cref="T:Triamec.Tam.Requests.TamRequest" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequestIdentification.CreateRawValue(System.Byte,System.Boolean,System.Boolean,System.UInt16)">
      <summary>
            Creates a raw TAM request identification value.
            </summary>
      <param name="rawSource">The raw source address.</param>
      <param name="fromIsochronousTamaVM">Whether the isochronous Tama virtual machine is the source
            within <paramref name="rawSource" />.</param>
      <param name="fromAsynchronousTamaVM">Whether the asynchronous Tama virtual machine is the source
            within <paramref name="rawSource" />.</param>
      <param name="rawSessionId">The session id.</param>
      <returns>A value that can be stored in the <see cref="F:Triamec.Tam.Registers.Tags.GeneralSignalTags.DeviceRequest" />
            or the <see cref="F:Triamec.Tam.Registers.Tags.AxisSignalTags.TamRequest" /> registers.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Requests.TamRequestIdentification.Destination">
      <summary>
            Gets the instance the <see cref="T:Triamec.Tam.Requests.TamRequest" /> identified by this <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" />
            was issued to.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequestIdentification.Equals(System.Object)">
      <summary>
            	Determines whether the specified <see cref="T:System.Object" /> is equal to the current
            	<see cref="T:Triamec.Tam.Requests.TamRequestIdentification" />.
            </summary>
      <param name="obj">
            	The <see cref="T:System.Object" /> to compare with the current <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" />.
            </param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Object" /> is equal to the current 
            	<see cref="T:Triamec.Tam.Requests.TamRequestIdentification" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequestIdentification.GetHashCode">
      <summary>
            	Returns the hash code for this instance.
            </summary>
      <returns>
            	A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequestIdentification.op_Equality(Triamec.Tam.Requests.TamRequestIdentification,Triamec.Tam.Requests.TamRequestIdentification)">
      <summary>
            	Compares two <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> values for equality.
            </summary>
      <param name="v1">
            	The first <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> value in the comparison.
            </param>
      <param name="v2">
            	The second <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> value in the comparison.
            </param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> values represent the same 
            	logical call.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Requests.TamRequestIdentification.op_Inequality(Triamec.Tam.Requests.TamRequestIdentification,Triamec.Tam.Requests.TamRequestIdentification)">
      <summary>
            	Compares two <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> values for inequality.
            </summary>
      <param name="v1">
            	The first <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> value in the comparison.
            </param>
      <param name="v2">
            	The second <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> value in the comparison.
            </param>
      <returns>
        <see langword="false" /> if both <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> values represent the same
            	logical call.
            </returns>
    </member>
    <member name="P:Triamec.Tam.Requests.TamRequestIdentification.Session">
      <summary>
            Gets the session to this <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" />, or <see langword="null" /> if the
            information is not available.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Requests.TamRequestIdentification.Source">
      <summary>
            Gets the instance issuing the<see cref="T:Triamec.Tam.Requests.TamRequest" /> identified by this
            <see cref="T:Triamec.Tam.Requests.TamRequestIdentification" /> or <see langword="null" /> for the unknown caller.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Requests.TamRequestResolution">
      <summary>
            The reason why a <see cref="T:Triamec.Tam.Requests.TamRequest" />
            is <see cref="F:Triamec.Tam.Requests.TamRequestState.Terminated" /> (<see cref="P:Triamec.Tam.Requests.TamRequest.Termination" />).
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestResolution.DeviceError">
      <summary>
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> could not be completed because an error or warning occurred on the drive.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestResolution.AxisError">
      <summary>
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> could not be completed because an error occurred on the axis.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestResolution.Error">
      <summary>
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> could not be completed because an error occurred.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestResolution.Aborted">
      <summary>
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> was artificially aborted in the application software; however, it may
            still exist on the <see cref="T:Triamec.Tam.TamDevice" /> and be executed.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestResolution.None">
      <summary>
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> is not <see cref="F:Triamec.Tam.Requests.TamRequestState.Terminated" /> yet.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestResolution.Superseded">
      <summary>
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> was superseded by another one before termination.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestResolution.Completed">
      <summary>
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> was completed normally.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestResolution.Unknown">
      <summary>
            The reason for the termination could not be determined.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Requests.TamRequestState">
      <summary>
            The states of the life cycle of a <see cref="T:Triamec.Tam.Requests.TamRequest" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestState.Pending">
      <summary>
            The start state of a <see cref="T:Triamec.Tam.Requests.TamRequest" /> that
            has been issued to and accepted by
            its <see cref="P:Triamec.Tam.Requests.TamRequestIdentification.Destination" />.
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> is pending for execution.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestState.Executing">
      <summary>
            The <see cref="T:Triamec.Tam.Requests.TamRequest" /> is executing on its 
            <see cref="P:Triamec.Tam.Requests.TamRequestIdentification.Destination" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Requests.TamRequestState.Terminated">
      <summary>
            The final state of a <see cref="T:Triamec.Tam.Requests.TamRequest" />.
            <see cref="P:Triamec.Tam.Requests.TamRequest.Termination" /> shows the reason of the termination.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Schedules.IssueMoveScheduleEntry">
      <summary>
            Atomic move request message to be sent over the Tria-Link at a specified time to a specified destination.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Schedules.IssueMoveScheduleEntry.#ctor(Triamec.Tam.TamAxis,Triamec.TriaLink.PathPlannerCommand,Triamec.TriaLink.PathPlannerDirection,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Schedules.IssueMoveScheduleEntry" /> class.
            </summary>
      <param name="axis">The axis which shall execute the move.</param>
      <param name="clientData">The client data.</param>
      <param name="responseHandler">The response handler.</param>
      <param name="destination">The destination.</param>
      <param name="axisNumber">One or more axis numbers.</param>
      <param name="command">The path planner command.</param>
      <param name="direction">
        <para id="10">The direction to force.</para>
        <para id="1">For the <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> set to
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" /> or
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />, the following holds:</para>
        <para id="20">The value is only taken into account in a limited position configuration.</para>
        <para id="2">For the <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> set to
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveVelocity" /> or
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveVelocity_Acc" />, the following holds:</para>
        <para id="30">If set to <see cref="F:Triamec.TriaLink.PathPlannerDirection.Positive" />, directs a movement in
            positive direction even if a negative velocity is specified. If set to
            <see cref="F:Triamec.TriaLink.PathPlannerDirection.Negative" />, directs a movement in negative direction even if a
            positive velocity is specified. Other <see cref="T:Triamec.TriaLink.PathPlannerDirection" /> values won't have an
            effect.</para>
        <para id="3">For the <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> set to other values, the direction
            does not have an effect.</para>
      </param>
      <param name="limitTorque">
        <para>Whether to limit the torque during the move.</para>
        <para>Not all devices consider this property.</para>
        <para>This property is taken into account when <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> is
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" /> or
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.CoupleOut" />. Additionally, it is taken into account for all
            values of <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> when the axis reaches <see cref="F:Triamec.TriaLink.AxisState.Standstill" />.
              </para>
      </param>
      <param name="moveValue1">
        <list type="table">
          <listheader>
            <term>
              <paramref name="command" />
            </term>
            <description>meaning</description>
          </listheader>
          <item id="0">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPosition" />
              </para>
            </term>
            <description>Part of the desired absolute position, in meters or radian. If
              <paramref name="useDoubleLayout" /> is <see langword="false" />, the <see langword="float" /> part of
              <see cref="T:Triamec.TriaLink.Float40" />; otherwise, the least significant word of a <see langword="double" />.</description>
          </item>
          <item id="1">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPositionRelative" />
              </para>
            </term>
            <description>Part of the desired distance, in meters or radian. If
              <paramref name="useDoubleLayout" /> is <see langword="false" />, the <see langword="float" /> part of
              <see cref="T:Triamec.TriaLink.Float40" />; otherwise, the least significant word of a <see langword="double" />.</description>
          </item>
          <item id="2">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" />
              </para>
            </term>
            <description>The force to use, in newton (for a linear system), or the torque, in newton meters
            (for a rotative system).</description>
          </item>
          <item id="3">
            <term>otherwise</term>
            <description>The parameter is ignored.</description>
          </item>
        </list>
      </param>
      <param name="moveValue2">
        <list type="table">
          <listheader>
            <term>
              <paramref name="command" />
            </term>
            <description>meaning</description>
          </listheader>
          <item id="0">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPosition" />
              </para>
            </term>
            <description>Part of the desired absolute position, in meters or radian. If
              <paramref name="useDoubleLayout" /> is <see langword="false" />, the extended mantissa part of
              <see cref="T:Triamec.TriaLink.Float40" />; otherwise, the most significant word of a <see langword="double" />.</description>
          </item>
          <item id="1">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPositionRelative" />
              </para>
            </term>
            <description>Part of the desired distance, in meters or radian. If
              <paramref name="useDoubleLayout" /> is <see langword="false" />, the extended mantissa part of
              <see cref="T:Triamec.TriaLink.Float40" />; otherwise, the most significant word of a <see langword="double" />.</description>
          </item>
          <item id="2">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" />
              </para>
            </term>
            <description>The maximum time derivative of the force, in newton per second (for a linear
            system), or of the torque in newton meters per second (for a rotative system).</description>
          </item>
          <item id="3">
            <term>otherwise</term>
            <description>The parameter is ignored.</description>
          </item>
        </list>
      </param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
        <para id="0">The <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> must be set to one of the following
            values in order for this value to be taken into account:
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveVelocity" />.</para>
        <para id="1">The value will be ignored when above the configured maximal velocity.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
        <para id="0">The <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> must be set to one of the following
            values in order for this value to be taken into account:
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.Stop_Acc" />.</para>
        <para id="1">The value will be ignored when above the configured maximal acceleration.</para>
        <para id="2">The deceleration is calculated from this value by using the same ratio as defined by the
            ratio between the configured maximal acceleration and deceleration.</para>
      </param>
      <param name="useDoubleLayout">Whether to use the Move Double packet in favor of the Move Float
            packet.</param>
      <param name="relativeSendTime">The relative send time, in milliseconds from when the
            <see cref="T:Triamec.Tam.Schedules.TamSchedule" /> is <see cref="M:Triamec.Tam.Schedules.TamSchedule.Start" />ed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="axis" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeSendTime" /> is negative.</exception>
    </member>
    <member name="M:Triamec.Tam.Schedules.IssueMoveScheduleEntry.#ctor(Triamec.Tam.TamAxis,Triamec.TriaLink.PathPlannerCommand,Triamec.TriaLink.PathPlannerDirection,System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Schedules.IssueMoveScheduleEntry" /> class.
            </summary>
      <param name="axis">The axis which shall execute the move.</param>
      <param name="clientData">The client data.</param>
      <param name="responseHandler">The response handler.</param>
      <param name="destination">The destination.</param>
      <param name="axisNumber">One or more axis numbers.</param>
      <param name="command">The path planner command.</param>
      <param name="direction">
        <para id="10">The direction to force.</para>
        <para id="1">For the <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> set to
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" /> or
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />, the following holds:</para>
        <para id="20">The value is only taken into account in a limited position configuration.</para>
        <para id="2">For the <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> set to
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveVelocity" /> or
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveVelocity_Acc" />, the following holds:</para>
        <para id="30">If set to <see cref="F:Triamec.TriaLink.PathPlannerDirection.Positive" />, directs a movement in
            positive direction even if a negative velocity is specified. If set to
            <see cref="F:Triamec.TriaLink.PathPlannerDirection.Negative" />, directs a movement in negative direction even if a
            positive velocity is specified. Other <see cref="T:Triamec.TriaLink.PathPlannerDirection" /> values won't have an
            effect.</para>
        <para id="3">For the <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> set to other values, the direction
            does not have an effect.</para>
      </param>
      <param name="limitTorque">
        <para>Whether to limit the torque during the move.</para>
        <para>Not all devices consider this property.</para>
        <para>This property is taken into account when <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> is
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel" />,
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" /> or
              <see cref="F:Triamec.TriaLink.PathPlannerCommand.CoupleOut" />. Additionally, it is taken into account for all
            values of <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> when the axis reaches <see cref="F:Triamec.TriaLink.AxisState.Standstill" />.
              </para>
      </param>
      <param name="moveValue1">
        <list type="table">
          <listheader>
            <term>
              <paramref name="command" />
            </term>
            <description>meaning</description>
          </listheader>
          <item id="0">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPosition" />
              </para>
            </term>
            <description>Part of the desired absolute position, in meters or radian. If
              <paramref name="useDoubleLayout" /> is <see langword="false" />, the <see langword="float" /> part of
              <see cref="T:Triamec.TriaLink.Float40" />; otherwise, the least significant word of a <see langword="double" />.</description>
          </item>
          <item id="1">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPositionRelative" />
              </para>
            </term>
            <description>Part of the desired distance, in meters or radian. If
              <paramref name="useDoubleLayout" /> is <see langword="false" />, the <see langword="float" /> part of
              <see cref="T:Triamec.TriaLink.Float40" />; otherwise, the least significant word of a <see langword="double" />.</description>
          </item>
          <item id="2">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" />
              </para>
            </term>
            <description>The force to use, in newton (for a linear system), or the torque, in newton meters
            (for a rotative system).</description>
          </item>
          <item id="3">
            <term>otherwise</term>
            <description>The parameter is ignored.</description>
          </item>
        </list>
      </param>
      <param name="moveValue2">
        <list type="table">
          <listheader>
            <term>
              <paramref name="command" />
            </term>
            <description>meaning</description>
          </listheader>
          <item id="0">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPosition" />
              </para>
            </term>
            <description>Part of the desired absolute position, in meters or radian. If
              <paramref name="useDoubleLayout" /> is <see langword="false" />, the extended mantissa part of
              <see cref="T:Triamec.TriaLink.Float40" />; otherwise, the most significant word of a <see langword="double" />.</description>
          </item>
          <item id="1">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPositionRelative" />
              </para>
            </term>
            <description>Part of the desired distance, in meters or radian. If
              <paramref name="useDoubleLayout" /> is <see langword="false" />, the extended mantissa part of
              <see cref="T:Triamec.TriaLink.Float40" />; otherwise, the most significant word of a <see langword="double" />.</description>
          </item>
          <item id="2">
            <term>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel" />
              </para>
              <para>
                <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" />
              </para>
            </term>
            <description>The maximum time derivative of the force, in newton per second (for a linear
            system), or of the torque in newton meters per second (for a rotative system).</description>
          </item>
          <item id="3">
            <term>otherwise</term>
            <description>The parameter is ignored.</description>
          </item>
        </list>
      </param>
      <param name="velocity">
        <para id="10">The dedicated velocity to use for this move, in meters per second or
            radian per second.</para>
        <para id="0">The <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> must be set to one of the following
            values in order for this value to be taken into account:
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveVelocity" />.</para>
        <para id="1">The value will be ignored when above the configured maximal velocity.</para>
      </param>
      <param name="acceleration">
        <para id="10">The dedicated acceleration to use, in meters per square second or
            radian per square second.</para>
        <para id="0">The <see cref="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand" /> must be set to one of the following
            values in order for this value to be taken into account:
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc" />, <see cref="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc" />,
            <see cref="F:Triamec.TriaLink.PathPlannerCommand.Stop_Acc" />.</para>
        <para id="1">The value will be ignored when above the configured maximal acceleration.</para>
        <para id="2">The deceleration is calculated from this value by using the same ratio as defined by the
            ratio between the configured maximal acceleration and deceleration.</para>
      </param>
      <param name="useDoubleLayout">Whether to use the Move Double packet in favor of the Move Float
            packet.</param>
      <param name="relativeSendTime">The relative send time, in milliseconds from when the
            <see cref="T:Triamec.Tam.Schedules.TamSchedule" /> is <see cref="M:Triamec.Tam.Schedules.TamSchedule.Start" />ed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="axis" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeSendTime" /> is negative.</exception>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.Acceleration">
      <summary>
            Gets the dedicated acceleration to use, in meters per square second or radian per square second.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.Axis">
      <summary>
            Gets the axis executing the move.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.Command">
      <summary>
            Gets the path planner command.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.Direction">
      <summary>
            Gets the path planner direction.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.LimitTorque">
      <summary>
            Gets a value indicating whether to limit the torque during the move.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.PositionOrDistance">
      <summary>
            Gets the position or distance, in meters or radian.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.Torque">
      <summary>
            Gets the force to use, in newton (for a linear system),
            or the torque, in newton meters (for a rotative system).
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.TorqueRamp">
      <summary>
            Gets the maximum time derivative of the force, in newton per second (for a linear system), or of the torque
            in newton meters per second (for a rotative system).
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.IssueMoveScheduleEntry.Velocity">
      <summary>
             Gets the dedicated velocity to use, in meters per second or radian per second.
             </summary>
    </member>
    <member name="T:Triamec.Tam.Schedules.ScheduleEntry">
      <summary>
            Atomic message to be sent over the Tria-Link at a specified time to a specified destination.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Schedules.ScheduleEntry.#ctor(Triamec.Tam.ITamDevice,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Schedules.ScheduleEntry" /> class.
            </summary>
      <param name="destination">Where the packet defined by this entry will be sent to.</param>
      <param name="relativeSendTime">The relative send time, in milliseconds from when the
            <see cref="T:Triamec.Tam.Schedules.TamSchedule" /> is <see cref="M:Triamec.Tam.Schedules.TamSchedule.Start" />ed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeSendTime" /> is negative.</exception>
    </member>
    <member name="M:Triamec.Tam.Schedules.ScheduleEntry.CreatePacket(Triamec.TriaLink.Groups.ITriaLinkStation)">
      <summary>
            Creates the Tria-Link communication packet.
            </summary>
      <param name="destination">The destination of the packet.</param>
      <returns>A newly created packet.</returns>
    </member>
    <member name="P:Triamec.Tam.Schedules.ScheduleEntry.Destination">
      <summary>
            Gets the message destination.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.ScheduleEntry.RelativeSendTime">
      <summary>
            Gets the relative send time, in milliseconds from when the <see cref="T:Triamec.Tam.Schedules.TamSchedule" /> is
            <see cref="M:Triamec.Tam.Schedules.TamSchedule.Start" />ed.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Schedules.TamSchedule">
      <summary>
            Table of atomic messages to be sent over the Tria-Link one by one at a specified time.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Schedules.TamSchedule.Add(Triamec.Tam.Schedules.ScheduleEntry)">
      <summary>
            Adds the specified item to the schedule.
            </summary>
      <param name="item">The item.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="item" /> is to be executed before the previously added item, if any.</para>
        <para>-or-</para>
        <para>Attempted to add the entry to a schedule on a different <see cref="T:Triamec.Tam.TamLink" /> as where
            <see cref="P:Triamec.Tam.Schedules.ScheduleEntry.Destination" /> is located.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Tam.Schedules.TamSchedule.Count" /> has already reached <see cref="P:Triamec.Tam.Schedules.TamSchedule.Capacity" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Schedules.TamSchedule.Capacity">
      <summary>
            Gets the maximal number of <see cref="T:Triamec.Tam.Schedules.ScheduleEntry" /> instances this <see cref="T:Triamec.Tam.Schedules.TamSchedule" /> can hold.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Schedules.TamSchedule.Clear">
      <summary>
            Removes all entries from this schedule.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Schedules.TamSchedule.Commit">
      <summary>
            Commits a transaction of <see cref="M:Triamec.Tam.Schedules.TamSchedule.Add(Triamec.Tam.Schedules.ScheduleEntry)" /> and <see cref="M:Triamec.Tam.Schedules.TamSchedule.Clear" /> modifications.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Communication with the scheduler device failed.</exception>
    </member>
    <member name="P:Triamec.Tam.Schedules.TamSchedule.Count">
      <summary>
            Gets the number of committed entries in this schedule.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Communication with the scheduler device failed.</exception>
    </member>
    <member name="P:Triamec.Tam.Schedules.TamSchedule.CurrentIndex">
      <summary>
            Gets the index of the last executed <see cref="T:Triamec.Tam.Schedules.ScheduleEntry" />.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Communication with the scheduler device failed.</exception>
    </member>
    <member name="P:Triamec.Tam.Schedules.TamSchedule.PrepareCount">
      <summary>
            Gets the number of entries added to the schedule in the current transaction.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Schedules.TamSchedule.Start">
      <summary>
            Starts to execute this <see cref="T:Triamec.Tam.Schedules.TamSchedule" /> at its beginning.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Communication with the scheduler device failed.</exception>
    </member>
    <member name="P:Triamec.Tam.Schedules.TamSchedule.State">
      <summary>
            Gets the current state of the scheduler.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Communication with the scheduler device failed.</exception>
    </member>
    <member name="M:Triamec.Tam.Schedules.TamSchedule.Stop">
      <summary>
            Stops to execute this <see cref="T:Triamec.Tam.Schedules.TamSchedule" />.
            </summary>
      <exception cref="T:Triamec.Tam.TamException">Communication with the scheduler device failed.</exception>
    </member>
    <member name="T:Triamec.Tam.Schedules.WriteRegisterScheduleEntry">
      <summary>
            Atomic write register message to be sent over the Tria-Link at a specified time to a specified destination.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Schedules.WriteRegisterScheduleEntry.#ctor(Triamec.Tam.Registers.ITamRegister[],Triamec.TriaLink.TamValue32[],System.Int32)">
      <summary>
            Creates a new atomic write register message to the specified registers with the specified register values.
            </summary>
      <param name="registers">The registers.</param>
      <param name="values">The values.</param>
      <param name="relativeSendTime">The relative send time, in milliseconds from when the
            <see cref="T:Triamec.Tam.Schedules.TamSchedule" /> is <see cref="M:Triamec.Tam.Schedules.TamSchedule.Start" />ed.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="registers" /> or one of its elements is <see langword="null" />.</para>
        <para>
          <paramref name="values" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="registers" /> is empty.</para>
        <para>
          <paramref name="registers" /> contains more than four elements.</para>
        <para>Not all registers are on the same destination device.</para>
        <para>The <see cref="P:System.Array.Length" /> of <paramref name="values" /> differs from the
            <see cref="P:System.Array.Length" /> of <paramref name="registers" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="relativeSendTime" /> is negative.</exception>
    </member>
    <member name="P:Triamec.Tam.Schedules.WriteRegisterScheduleEntry.Registers">
      <summary>
            Gets the registers to write to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Schedules.WriteRegisterScheduleEntry.Values">
      <summary>
            Gets the values to write to the registers.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.IClientSubscription">
      <summary>
            An <see cref="T:Triamec.Tam.Subscriptions.ISubscription" /> where the Tria-Link <see cref="P:Triamec.Tam.TamLink.Adapter" /> is implicitly subscribed as
            only subscriber.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.IClientSubscription.Disable(System.Boolean)">
      <summary>
            Disables this <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />, purging samples if specified.
            </summary>
      <param name="purge">Whether to wait until all samples up to the disable time are retrieved.</param>
      <returns>
            The date when disabling took place, if <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.IsEnableDateSupported" /> is <see langword="true" />.
            Otherwise, <see cref="F:Triamec.TriaLink.Timestamp.MinValue" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been
              <see cref="M:System.IDisposable.Dispose">Disposed</see>.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.State" /> is none of
              <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabled" />, <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabling" />,
              <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Disabling" /> or <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Subscribed" />.
              </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
            The subscription could not be disabled.
              </exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.IClientSubscription.Handler">
      <summary>
            Gets or sets the handler of <see cref="T:Triamec.TriaLink.Packets.Packet" />s of a subscription.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.IClientSubscription.Notification">
      <summary>
            Gets or sets a value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" /> method
            of the <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.Handler" /> is triggered to <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            Cannot set to <see cref="F:Triamec.Tam.Subscriptions.SubscriptionNotification.OnPacketsAvailable" /> when the handler is
            <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender">
      <summary>
            Gets the provider of <see cref="T:Triamec.TriaLink.Packets.Packet" />s from the <see cref="P:Triamec.Tam.Subscriptions.ISubscription.Publisher" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.IClientSubscription.WaitForTrigger(System.TimeSpan)">
      <summary>
            Waits for a trigger condition set up using
            <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Enable(Triamec.TriaLink.PublicationCommand,Triamec.Tam.Subscriptions.ISubscribable,Triamec.TriaLink.TamValue32)" />
            to become true.
            </summary>
      <param name="maximalWaitingPeriod">How long to wait maximally.</param>
      <returns>
            	Returns <see langword="false" /> if
            <list type="bullet"><item><description>the subscription is not <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.Enabled" />;</description></item><item><description>the subscription was enabled with a <see cref="T:Triamec.TriaLink.PublicationCommand" /> of
            <see cref="F:Triamec.TriaLink.PublicationCommand.Off" /> or
            <see cref="F:Triamec.TriaLink.PublicationCommand.Unconditional" />;</description></item><item><description>the operation timed out.</description></item></list>
            	Otherwise, returns <see langword="true" />.
            </returns>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.IClientSubscription`1">
      <summary>
            An <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />
            where the <see cref="P:Triamec.Tam.TamLink.Adapter" /> of the <see cref="T:Triamec.Tam.TamLink" />
            is the implicit and only subscriber,
            and with an associated <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" />
            that is responsible to <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            from the <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.
            </summary>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />
            retrieved by the <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" />.</typeparam>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler">
      <summary>
            	Gets or sets the handler of <see cref="T:Triamec.TriaLink.Packets.Packet" />s of a subscription.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.IDependentSubscribable">
      <summary>
            Subscribable which is defined in terms of another <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" /> instance.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.IDependentSubscribable.Master">
      <summary>
            Gets the <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" /> instance this instance is related to.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.IPublisher">
      <summary>
            Interface for the sending participant
            in an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.IPublisher.Downsampling">
      <summary>
            Gets the ratio of the desired sampling time to the <see cref="P:Triamec.Tam.ITamDevice.IsochronousBasePeriod" />
            of the <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.IPublisher.GetValueIndex(Triamec.Tam.Subscriptions.ISubscribable)">
      <summary>
            Gets the index of the first value in a <see cref="T:Triamec.TriaLink.Packets.Packet" /> belonging the specified
            subscribable.
            </summary>
      <param name="subscribable">One of the members of this <see cref="T:Triamec.Tam.Subscriptions.IPublisher" />.</param>
      <returns>The index of the first value in a <see cref="T:Triamec.TriaLink.Packets.Packet" /> 
            belonging to the <paramref name="subscribable" />.
            <para>
            The other values, if any, are always lined up after the first value. 
            </para></returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The <paramref name="subscribable" /> is not a member of this <see cref="T:Triamec.Tam.Subscriptions.IPublisher" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.IPublisher.Speed">
      <summary>
            Indicates whether to enable the highspeed mechanism for this <see cref="T:Triamec.Tam.Subscriptions.IPublisher" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscribable">
      <summary>
            Describes an entity on an <see cref="T:Triamec.Tam.TamStation" /> 
            that can be published or subscribed in a <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscribable.Offset">
      <summary>
            Gets the register offset of this <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscribable.Size">
      <summary>
            Gets the size of this <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscribable.Station">
      <summary>
            Gets the TAM station where this <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" /> belongs to.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType">
      <summary>
            Gets the data type of the values of this <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscriber">
      <summary>
            Interface for one of possibly several
            receiving participants in an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriber.Station">
      <summary>
            Gets the station on which all <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" />s reside.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriber.TimestampDestination">
      <summary>
            Gets the timestamp destination register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscription">
      <summary>
            A subscription represents the relationship
            of one <see cref="T:Triamec.Tam.Subscriptions.IPublisher" /> publishing <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" />s
            and one or more subscribers receiving those published values.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscription.Publisher">
      <summary>
            Gets the publisher.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscription.Purpose">
      <summary>
            Gets the intention this <see cref="T:Triamec.Tam.Subscriptions.ISubscription" /> is used for.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscription.Subscribers">
      <summary>
            Gets the read-only list of subscribers.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscriptionBase">
      <summary>
            Base interface for subscriptions
            created by the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Disable">
      <summary>
            Disables this <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />.
            </summary>
      <returns>
            The date when disabling took place, if <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.IsEnableDateSupported" /> is <see langword="true" />.
            Otherwise, <see cref="F:Triamec.TriaLink.Timestamp.MinValue" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been
              <see cref="M:System.IDisposable.Dispose">Disposed</see>.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.State" /> is none of
              <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabled" />, <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabling" />,
              <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Disabling" /> or <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Subscribed" />.
              </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
            The subscription could not be disabled.
              </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Enable">
      <summary>
            Enables this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> without trigger condition.
            </summary>
      <returns>
            The date when enabling took place, if <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.IsEnableDateSupported" /> is <see langword="true" />.
            Otherwise, <see cref="F:Triamec.TriaLink.Timestamp.MinValue" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.State" /> is not <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Subscribed" />
            or <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabling" />.
              </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
            This subscription could not be enabled.
              </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Enable(Triamec.TriaLink.PublicationCommand,Triamec.Tam.Subscriptions.ISubscribable,Triamec.TriaLink.TamValue32)">
      <summary>
            Enables this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> with a specified trigger condition.
            </summary>
      <param name="triggerCondition">The trigger condition of the subscription.</param>
      <param name="trigger">The register used as subscription trigger.</param>
      <param name="triggerLevel">The trigger level.</param>
      <returns>
            The date when enabling took place, if <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.IsEnableDateSupported" /> is <see langword="true" />.
            Otherwise, <see cref="F:Triamec.TriaLink.Timestamp.MinValue" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>For the given <paramref name="triggerCondition" />, <paramref name="trigger" />
            must be defined but is <see langword="null" />.</para>
        <para>The <paramref name="trigger" />'s <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" />
            is not a float, bool, int or enum.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>For the given <paramref name="triggerCondition" />,
              <paramref name="trigger" />'s <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" />
            must be defined but is <see langword="null" />.</para>
        <para>The <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Station" /> of the <paramref name="trigger" /> is not the same as
            the <see cref="P:Triamec.Tam.Subscriptions.ISubscription.Publisher" />.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.State" /> is not <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Subscribed" />
            or <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabling" />.
              </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
            This subscription could not be enabled.
              </exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionBase.Enabled">
      <summary>
            Indicates whether the <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.State" /> 
            of this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> is <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabled" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionBase.IsEnableDateSupported">
      <summary>
            Gets a value indicating whether the firmware supports the return value of the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Enable" /> and
            <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Disable" /> methods.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionBase.Manager">
      <summary>
            Gets the manager that owns this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionBase.State">
      <summary>
            Gets the life cycle state of this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionBase.Trigger">
      <summary>
            Gets the register used for the <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.TriggerCondition" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This subscription is not <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.Enabled" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionBase.TriggerCondition">
      <summary>
            Gets the trigger condition.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This subscription is not <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.Enabled" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionBase.TriggerLevel">
      <summary>
            Gets the trigger level used in the <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.TriggerCondition" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This subscription is not <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.Enabled" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Unsubscribe">
      <summary>
            Dissolves this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" />.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been
            <see cref="M:System.IDisposable.Dispose">Disposed</see>.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
            The subscription could not be unsubscribed.
            </exception>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscriptionGroup`1">
      <summary>
            Collectively managed list of <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" /> instances.
            </summary>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" /> retrieved by
            the <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of an
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" /> which are members of
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionGroup`1" />s.</typeparam>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionGroup`1.Disable(System.Boolean)">
      <summary>
            Disables this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionGroup`1" />, purging samples if specified.
            </summary>
      <param name="purge">Whether to wait until all samples up to the disable time are retrieved.</param>
      <returns>
            The date when disabling took place, if <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.IsEnableDateSupported" /> is <see langword="true" />.
            Otherwise, <see cref="F:Triamec.TriaLink.Timestamp.MinValue" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been
              <see cref="M:System.IDisposable.Dispose">Disposed</see>.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionBase.State" /> is none of
              <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabled" />, <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabling" />,
              <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Disabling" /> or <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Subscribed" />.
              </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
            The subscription could not be disabled.
              </exception>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscriptionHandler">
      <summary>
            	Defines an entity that is able to handle packets
            	returned after activating an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets">
      <summary>
        <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" />s <see cref="T:Triamec.TriaLink.Packets.Packet" />s from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> of the <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionHandler.Subscription" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionHandler.Subscription">
      <summary>
                Gets the subscription that delivers data to this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory`1">
      <summary>
            	Provides a factory to create new instances of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" /> interface.
            </summary>
      <typeparam name="THandler">
            	The <see cref="T:System.Type" /> of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" /> created by this factory.
            </typeparam>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory`1.CreateSubscriptionHandler(Triamec.Tam.Subscriptions.IClientSubscription{`0})">
      <summary>
            Creates a new instance of the <typeparamref name="THandler" /> generic type.
            </summary>
      <param name="subscription">The instance for which the <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" />
            property returns the result of this factory method.</param>
      <returns>
            A new instance of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" /> interface.
            </returns>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscriptionManager">
      <summary>
            A subscription manager is the single point within a <see cref="T:Triamec.Tam.TamLink" /> where instances
            of the <see cref="T:Triamec.Tam.Subscriptions.ISubscription" /> interface are created, modified and deleted.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionManager.Link">
      <summary>
            Gets the <see cref="T:Triamec.Tam.TamLink" /> that this manager operates on.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionManager.MaxDownsampling">
      <summary>
            Gets the maximum supported downsampling.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe(Triamec.Tam.Subscriptions.IPublisher)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <returns>
            A <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging" /> subscription whose
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> has an <see cref="F:System.Threading.Timeout.Infinite" /><see cref="P:Triamec.TriaLink.Packets.IPacketSender.Timeout" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe(Triamec.Tam.Subscriptions.IPublisher,System.Int32,System.TimeSpan)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <returns>
            A <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging" /> subscription.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe(Triamec.Tam.Subscriptions.IPublisher,System.TimeSpan,System.Int32)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <param name="bufferCapacity">The maximal duration in ms for which acquired data can be buffered in the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> of the returned instance.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <returns>
            A <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging" /> subscription.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe(Triamec.Tam.Subscriptions.IPublisher,Triamec.Tam.Subscriptions.ISubscriber[])">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and one or more <see cref="T:Triamec.Tam.TamStation" />s as the subscribers.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="subscribers">The subscribers of the new subscription.</param>
      <returns>
            A newly created subscription.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> and <paramref name="subscribers" />
            do not all belong to the same <see cref="T:Triamec.Tam.TamLink" />.
              </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
          <paramref name="subscribers" /> contains elements and an <see cref="T:Triamec.Tam.ITamDevice" /> was found
            within <paramref name="publisher" /> and <paramref name="subscribers" /> with
              <see cref="P:Triamec.TriaLink.StartupSettings.UseLocalClock" /> set.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe``1(Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory{``0},Triamec.Tam.Subscriptions.SubscriptionNotification,System.Int32,System.TimeSpan,Triamec.Tam.Subscriptions.IPublisher[])">
      <summary>
            Creates one or several client subscriptions with the adapter of the
            <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber.
            </summary>
      <param name="publishers">The information which values are desired to be reported by the subscription
            mechanism.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once for an
            <see cref="T:Triamec.Tam.Subscriptions.IPublisher" /> with <c><see cref="P:Triamec.Tam.Subscriptions.IPublisher.Downsampling" /> == 1</c> and an
            <see cref="T:Triamec.Tam.ITamDevice" /> where <see cref="P:Triamec.Tam.ITamDevice.IsochronousBasePeriod" /> equals the
            <see cref="P:Triamec.Tam.TamLink.TickPeriod" /> of the <see cref="T:Triamec.Tam.TamLink" />.</param>
      <param name="subscriptionHandlerFactory">A factory of <typeparamref name="THandler" />s approving the
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" /> to create a <typeparamref name="THandler" /> and to assign it to the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of the newly created
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" />.</param>
      <param name="notification">A value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            method of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the specified
            <paramref name="subscriptionHandlerFactory" /> are triggered to
            <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.</param>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the
            <paramref name="subscriptionHandlerFactory" />.</typeparam>
      <returns>
            A group of <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging" /> subscriptions.
            </returns>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
          <paramref name="publishers" /> contains several <see cref="T:Triamec.Tam.ITamDevice" /> instances and some of those
              <see cref="T:Triamec.Tam.ITamDevice" /> instances have <see cref="P:Triamec.TriaLink.StartupSettings.UseLocalClock" /> set.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="subscriptionHandlerFactory" /> must not return <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe``1(Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory{``0},Triamec.Tam.Subscriptions.SubscriptionNotification,System.TimeSpan,System.Int32,Triamec.Tam.Subscriptions.IPublisher[])">
      <summary>
            Creates one or several client subscriptions with the adapter of the
            <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber.
            </summary>
      <param name="publishers">The information which values are desired to be reported by the subscription
            mechanism.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once for an
            <see cref="T:Triamec.Tam.Subscriptions.IPublisher" /> with <c><see cref="P:Triamec.Tam.Subscriptions.IPublisher.Downsampling" /> == 1</c> and an
            <see cref="T:Triamec.Tam.ITamDevice" /> where <see cref="P:Triamec.Tam.ITamDevice.IsochronousBasePeriod" /> equals the
            <see cref="P:Triamec.Tam.TamLink.TickPeriod" /> of the <see cref="T:Triamec.Tam.TamLink" />.</param>
      <param name="subscriptionHandlerFactory">A factory of <typeparamref name="THandler" />s approving the
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" /> to create a <typeparamref name="THandler" /> and to assign it to the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of the newly created
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" />.</param>
      <param name="notification">A value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            method of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the specified
            <paramref name="subscriptionHandlerFactory" /> are triggered to
            <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.</param>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <param name="bufferCapacity">The maximal duration in ms for which acquired data can be buffered in the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> of the returned instance.</param>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the
            <paramref name="subscriptionHandlerFactory" />.</typeparam>
      <returns>
            A group of <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging" /> subscriptions.
            </returns>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
          <paramref name="publishers" /> contains several <see cref="T:Triamec.Tam.ITamDevice" /> instances and some of those
              <see cref="T:Triamec.Tam.ITamDevice" /> instances have <see cref="P:Triamec.TriaLink.StartupSettings.UseLocalClock" /> set.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="subscriptionHandlerFactory" /> must not return <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe``1(Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory{``0},Triamec.Tam.Subscriptions.SubscriptionNotification,Triamec.Tam.Subscriptions.IPublisher)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber.
            </summary>
      <param name="subscriptionHandlerFactory">A factory of <typeparamref name="THandler" />s approving the
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" /> to create a <typeparamref name="THandler" /> and to assign it to the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of the newly created
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" />.</param>
      <param name="notification">A value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            method of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the specified
            <paramref name="subscriptionHandlerFactory" /> are triggered to
            <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.</param>
      <param name="publisher">The publisher of the subscription.</param>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the
            <paramref name="subscriptionHandlerFactory" />.</typeparam>
      <returns>
            A <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging" /> subscription.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="subscriptionHandlerFactory" /> must not return <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe``1(Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory{``0},Triamec.Tam.Subscriptions.SubscriptionNotification,Triamec.Tam.Subscriptions.IPublisher,System.Int32,System.TimeSpan)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber.
            </summary>
      <param name="subscriptionHandlerFactory">A factory of <typeparamref name="THandler" />s approving the
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" /> to create a <typeparamref name="THandler" /> and to assign it to the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of the newly created
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" />.</param>
      <param name="notification">A value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            method of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the specified
            <paramref name="subscriptionHandlerFactory" /> are triggered to
            <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.</param>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the
            <paramref name="subscriptionHandlerFactory" />.</typeparam>
      <returns>
            A <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging" /> subscription.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="subscriptionHandlerFactory" /> must not return <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscribe``1(Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory{``0},Triamec.Tam.Subscriptions.SubscriptionNotification,Triamec.Tam.Subscriptions.IPublisher,System.TimeSpan,System.Int32)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber.
            </summary>
      <param name="subscriptionHandlerFactory">A factory of <typeparamref name="THandler" />s approving the
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" /> to create a <typeparamref name="THandler" /> and to assign it to the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of the newly created
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" />.</param>
      <param name="notification">A value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            method of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the specified
            <paramref name="subscriptionHandlerFactory" /> are triggered to
            <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.</param>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <param name="bufferCapacity">The maximal duration in ms for which acquired data can be buffered in the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> of the returned instance.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the
            <paramref name="subscriptionHandlerFactory" />.</typeparam>
      <returns>
            A <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging" /> subscription.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="subscriptionHandlerFactory" /> must not return <see langword="null" />.
            </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.SubscribeEvent(Triamec.Tam.Subscriptions.IPublisher)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber, using
            <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" />.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <returns>
            An <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" /> subscription whose
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> has an <see cref="F:System.Threading.Timeout.Infinite" /><see cref="P:Triamec.TriaLink.Packets.IPacketSender.Timeout" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.SubscribeEvent(Triamec.Tam.Subscriptions.IPublisher,System.TimeSpan)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber, using
            <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" />.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <returns>
            An <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" /> subscription.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.SubscribeEvent(Triamec.Tam.Subscriptions.IPublisher,System.TimeSpan,System.Int32)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber, using
            <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" />.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <param name="bufferCapacity">The maximal duration in ms for which acquired data can be buffered in the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> of the returned instance.</param>
      <returns>
            An <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" /> subscription.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.SubscribeEvent(Triamec.Tam.Subscriptions.IPublisher,Triamec.Tam.Subscriptions.ISubscriber[])">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and one or more <see cref="T:Triamec.Tam.TamStation" />s as the subscribers.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="subscribers">The subscribers of the new subscription.</param>
      <returns>
            A newly created subscription.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> and <paramref name="subscribers" />
            do not all belong to the same <see cref="T:Triamec.Tam.TamLink" />.
              </exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
        <para>-or-</para>
        <para>
          <paramref name="subscribers" /> contains elements and an <see cref="T:Triamec.Tam.ITamDevice" /> was found
            within <paramref name="publisher" /> and <paramref name="subscribers" /> with
              <see cref="P:Triamec.TriaLink.StartupSettings.UseLocalClock" /> set.</para>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.SubscribeEvent``1(Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory{``0},Triamec.Tam.Subscriptions.SubscriptionNotification,Triamec.Tam.Subscriptions.IPublisher)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber, using
            <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" />.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <param name="subscriptionHandlerFactory">A factory of <typeparamref name="THandler" />s approving the
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" /> to create a <typeparamref name="THandler" /> and to assign it to the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of the newly created
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" />.</param>
      <param name="notification">A value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            method of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the specified
            <paramref name="subscriptionHandlerFactory" /> are triggered to
            <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.</param>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the
            <paramref name="subscriptionHandlerFactory" />.</typeparam>
      <returns>
            An <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" /> subscription whose
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> has an <see cref="F:System.Threading.Timeout.Infinite" /><see cref="P:Triamec.TriaLink.Packets.IPacketSender.Timeout" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="subscriptionHandlerFactory" /> must not return <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.SubscribeEvent``1(Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory{``0},Triamec.Tam.Subscriptions.SubscriptionNotification,Triamec.Tam.Subscriptions.IPublisher,System.TimeSpan)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber, using
            <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" />.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <param name="subscriptionHandlerFactory">A factory of <typeparamref name="THandler" />s approving the
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" /> to create a <typeparamref name="THandler" /> and to assign it to the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of the newly created
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" />.</param>
      <param name="notification">A value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            method of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the specified
            <paramref name="subscriptionHandlerFactory" /> are triggered to
            <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.</param>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the
            <paramref name="subscriptionHandlerFactory" />.</typeparam>
      <returns>
            An <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" /> subscription.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="subscriptionHandlerFactory" /> must not return <see langword="null" />.
            </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.ISubscriptionManager.SubscribeEvent``1(Triamec.Tam.Subscriptions.ISubscriptionHandlerFactory{``0},Triamec.Tam.Subscriptions.SubscriptionNotification,Triamec.Tam.Subscriptions.IPublisher,System.TimeSpan,System.Int32)">
      <summary>
            Creates an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" />
            with one <see cref="T:Triamec.Tam.TamStation" /> as the publisher
            and the adapter of the <see cref="T:Triamec.Tam.TamLink" /> as the only receiving subscriber, using
            <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" />.
            </summary>
      <param name="publisher">The publisher of the subscription.</param>
      <param name="dequeueChunkSize">A value for the number of packets that shall be delivered at once.
            <para>Note that you should provide a maximal value for <paramref name="dequeueChunkSize" />. See
            <see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" /> for more explanations.</para></param>
      <param name="timeout">The duration to wait after the last packet was received until the
            timeout mechanism is triggered.
            Specify <see cref="F:System.Threading.Timeout.Infinite" /> ms if you do not need it.</param>
      <param name="subscriptionHandlerFactory">A factory of <typeparamref name="THandler" />s approving the
            <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" /> to create a <typeparamref name="THandler" /> and to assign it to the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription`1.Handler" /> of the newly created
            <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription`1" />.</param>
      <param name="notification">A value indicating when the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" />
            method of the <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the specified
            <paramref name="subscriptionHandlerFactory" /> are triggered to
            <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue" /> data from the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.</param>
      <param name="bufferCapacity">The maximal duration in ms for which acquired data can be buffered in the
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> of the returned instance.</param>
      <typeparam name="THandler">The <see cref="T:System.Type" /> of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionHandler" />s created by the
            <paramref name="subscriptionHandlerFactory" />.</typeparam>
      <returns>
            An <see cref="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking" /> subscription whose
            <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> has an <see cref="F:System.Threading.Timeout.Infinite" /><see cref="P:Triamec.TriaLink.Packets.IPacketSender.Timeout" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publisher" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publisher" /> does not belong to the same
              <see cref="T:Triamec.Tam.TamLink" /> as this instance.</exception>
      <exception cref="T:Triamec.Tam.Subscriptions.SubscriptionException">
        <para>The publisher has no more publishing resources available.</para>
        <para>-or-</para>
        <para>The publisher's <see cref="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link" /> has no more subscription resources
            available.</para>
        <para>-or-</para>
        <para>A communication timeout occurred.</para>
      </exception>
      <exception cref="T:System.InvalidOperationException">
            The <paramref name="subscriptionHandlerFactory" /> must not return <see langword="null" />.
            </exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionManager.Subscriptions">
      <summary>
            Gets the read-only collection of <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" />s
            managed by this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.ISubscriptionParticipant">
      <summary>
            A subscription participant represents a publishing or subscribing instance in an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.ISubscriptionParticipant.Link">
      <summary>
            Gets the link where this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionParticipant" /> belongs to.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.Publisher">
      <summary>
            A Publisher
            is used to describe the sending participant
            in an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.Publisher.Downsampling">
      <summary>
            Gets the ratio of the desired sampling time to the <see cref="P:Triamec.Tam.ITamDevice.IsochronousBasePeriod" />
            of the <see cref="T:Triamec.Tam.ITamDevice" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.Publisher.GetValueIndex(Triamec.Tam.Subscriptions.ISubscribable)">
      <summary>
            Gets the index of the first value in a <see cref="T:Triamec.TriaLink.Packets.Packet" /> belonging the specified
            subscribable.
            </summary>
      <param name="subscribable">One of the members of this <see cref="T:Triamec.Tam.Subscriptions.IPublisher" />.</param>
      <returns>The index of the first value in a <see cref="T:Triamec.TriaLink.Packets.Packet" /> 
            belonging to the <paramref name="subscribable" />.
            <para>
            The other values, if any, are always lined up after the first value. 
            </para></returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The <paramref name="subscribable" /> is not a member of this <see cref="T:Triamec.Tam.Subscriptions.IPublisher" />.</exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.Publisher.Speed">
      <summary>
            Indicates whether to enable the highspeed mechanism for this <see cref="T:Triamec.Tam.Subscriptions.IPublisher" />.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.PublishSpeed">
      <summary>
            Container for intrinsic speed related parameters involved with publishing isochronous values.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.PublishSpeed.Create(System.Int32,Triamec.TriaLink.Subscriptions.SubscriptionSpeed)">
      <summary>
            Gets parameters related to a ratio of a sampling rate compared to a <see cref="F:Triamec.TriaLink.Subscriptions.SubscriptionSpeed.Regular" />
            sampling rate, and a desired speed.
            </summary>
      <param name="ratio">The ratio between the cycle times of the fast task and the communication task.</param>
      <param name="speed">The desired <see cref="T:Triamec.TriaLink.Subscriptions.SubscriptionSpeed" />.</param>
      <returns>
            The parameters, or <see cref="F:Triamec.Tam.Subscriptions.PublishSpeed.Unsupported" />, if the device cannot serve the specified
            <paramref name="speed" />.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.PublishSpeed.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.PublishSpeed.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.PublishSpeed.op_Equality(Triamec.Tam.Subscriptions.PublishSpeed,Triamec.Tam.Subscriptions.PublishSpeed)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="speed1">The first speed.</param>
      <param name="speed2">The second speed.</param>
      <returns>
            The result of the equation.
            </returns>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.PublishSpeed.op_Inequality(Triamec.Tam.Subscriptions.PublishSpeed,Triamec.Tam.Subscriptions.PublishSpeed)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="speed1">The first speed.</param>
      <param name="speed2">The second speed.</param>
      <returns>
            The negated result of the equation.
            </returns>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.PublishSpeed.Regular">
      <summary>
            A value representing <see cref="F:Triamec.TriaLink.Subscriptions.SubscriptionSpeed.Regular" /> speed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.PublishSpeed.SamplesPerPacket">
      <summary>
            Gets the number of samples delivered per packet corresponding to <see cref="P:Triamec.Tam.Subscriptions.PublishSpeed.Speed" />.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.PublishSpeed.Speed">
      <summary>
            Gets a value indicating the sampling ratio compared to <see cref="F:Triamec.TriaLink.Subscriptions.SubscriptionSpeed.Regular" /> speed.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.PublishSpeed.Unsupported">
      <summary>
            A value representing an unsupported speed.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.PublishSpeed.Upsampling">
      <summary>
            Gets the ratio between the sampling time corresponding to <see cref="P:Triamec.Tam.Subscriptions.PublishSpeed.Speed" />, and the sampling time
            corresponding to the <see cref="F:Triamec.TriaLink.Subscriptions.SubscriptionSpeed.Regular" /> speed.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.Subscriber">
      <summary>
            A Subscriber
            is used to describe one of possibly several
            receiving participants in an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.Subscriber.#ctor(Triamec.Tam.Subscriptions.ISubscribable,System.Boolean,Triamec.Tam.Subscriptions.ISubscribable[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Subscriptions.Subscriber" /> class.
            </summary>
      <param name="timestampDestination">The destination register
            where to copy the timestamp field of <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />s
            sent from the <see cref="T:Triamec.Tam.Subscriptions.Publisher" />.
            Specify <see langword="null" /> if the timestamp field is not needed.</param>
      <param name="shrinkFloat40">Whether to ignore the <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Size" /> of
            <paramref name="destinations" /> with <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> being
            <see cref="T:Triamec.TriaLink.Float40" /> and to use one word instead.</param>
      <param name="destinations">The destination registers
            where to copy the register values of <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />s
            sent from the <see cref="T:Triamec.Tam.Subscriptions.Publisher" />.
            For some, but not all of the destination registers, a <see langword="null" /> value is allowed
            if the register values are not needed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinations" /> is <see langref="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <list type="bullet">
          <item>
            <description>the cumulated <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Size" /> of the
              <paramref name="destinations" /> (in register words)
            is bigger than <see cref="F:Triamec.Tam.Subscriptions.SubscriptionParticipant.MaxSubscriptionValues" />;</description>
          </item>
          <item>
            <description>
              <paramref name="destinations" /> does not have at least one
            non-<see langword="null" /> element;</description>
          </item>
          <item>
            <description>The non-<see langword="null" /> elements of <paramref name="destinations" />
            and <paramref name="timestampDestination" />
            do not all belong to the same <see cref="T:Triamec.Tam.TamStation" />.</description>
          </item>
        </list>
      </exception>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.Subscriber.#ctor(Triamec.Tam.Subscriptions.ISubscribable,Triamec.Tam.Subscriptions.ISubscribable[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Tam.Subscriptions.Subscriber" /> class.
            </summary>
      <param name="timestampDestination">The destination register
            where to copy the timestamp field of <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />s
            sent from the <see cref="T:Triamec.Tam.Subscriptions.Publisher" />.
            Specify <see langword="null" /> if the timestamp field is not needed.</param>
      <param name="shrinkFloat40">Whether to ignore the <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Size" /> of
            <paramref name="destinations" /> with <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> being
            <see cref="T:Triamec.TriaLink.Float40" /> and to use one word instead.</param>
      <param name="destinations">The destination registers
            where to copy the register values of <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" />s
            sent from the <see cref="T:Triamec.Tam.Subscriptions.Publisher" />.
            For some, but not all of the destination registers, a <see langword="null" /> value is allowed
            if the register values are not needed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinations" /> is <see langref="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <list type="bullet">
          <item>
            <description>the cumulated <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Size" /> of the
              <paramref name="destinations" /> (in register words)
            is bigger than <see cref="F:Triamec.Tam.Subscriptions.SubscriptionParticipant.MaxSubscriptionValues" />;</description>
          </item>
          <item>
            <description>
              <paramref name="destinations" /> does not have at least one
            non-<see langword="null" /> element;</description>
          </item>
          <item>
            <description>The non-<see langword="null" /> elements of <paramref name="destinations" />
            and <paramref name="timestampDestination" />
            do not all belong to the same <see cref="T:Triamec.Tam.TamStation" />.</description>
          </item>
        </list>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.Subscriber.TimestampDestination">
      <summary>
            Gets the timestamp destination register.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.SubscriptionException">
      <summary>
            The <see cref="T:System.ApplicationException" /> thrown by a <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionManager" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionException.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Subscriptions.SubscriptionException" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Subscriptions.SubscriptionException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionException.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Subscriptions.SubscriptionException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Subscriptions.SubscriptionException" /> class.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionException.#ctor(Triamec.Tam.Subscriptions.ISubscriptionManager)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Subscriptions.SubscriptionException" /> class.
            </summary>
      <param name="manager">The subscription manager.</param>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionException.#ctor(Triamec.Tam.Subscriptions.ISubscriptionManager,System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Subscriptions.SubscriptionException" /> class.
            </summary>
      <param name="manager">The subscription manager.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionException.#ctor(Triamec.Tam.Subscriptions.ISubscriptionManager,System.String,System.Exception)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Tam.Subscriptions.SubscriptionException" /> class.
            </summary>
      <param name="manager">The subscription manager.</param>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.SubscriptionException.Manager">
      <summary>
            Gets or sets the owner of the exception.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.SubscriptionNotification">
      <summary>
            	Kinds of <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.Notification" />s of an <see cref="T:Triamec.Tam.Subscriptions.IClientSubscription" /> when
            	its <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" /> has new <see cref="T:Triamec.TriaLink.Packets.Packet" />s
            	available.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionNotification.Never">
      <summary>
            	The client is never notified and has to poll the <see cref="P:Triamec.Tam.Subscriptions.IClientSubscription.PacketSender" />.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionNotification.OnPacketsAvailable">
      <summary>
            	On the <see cref="E:Triamec.TriaLink.Packets.IPacketSender.PacketsAvailable" />, 
            	the <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionHandler.ProcessPackets" /> method is called.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.SubscriptionParticipant">
      <summary>
            A SubscriptionParticipant
            is a base class for the publisher and subscribers
            in an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />.
            </summary>
    </member>
    <member name="M:Triamec.Tam.Subscriptions.SubscriptionParticipant.#ctor(System.Boolean,Triamec.Tam.Subscriptions.ISubscribable[])">
      <summary>
            Initializes a new instance aggregating the specified subscribables.
            </summary>
      <param name="shrinkFloat40">Whether to ignore the <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Size" /> of
            <paramref name="subscribables" /> with <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.ValueType" /> being <see cref="T:Triamec.TriaLink.Float40" /> and
            to use one word instead.</param>
      <param name="subscribables">The subscription registers of the participant.
            Some of the subscription registers, but not all of them, may be <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribables" /> is not defined.</exception>
      <exception cref="T:System.ArgumentException">
        <list type="bullet">
          <item>
            <description>The cumulated <see cref="P:Triamec.Tam.Subscriptions.ISubscribable.Size" /> of the
            <paramref name="subscribables" /> (in register words) is bigger than <see cref="F:Triamec.Tam.Subscriptions.SubscriptionParticipant.MaxSubscriptionValues" />;
            </description>
          </item>
          <item>
            <description>
              <paramref name="subscribables" /> does not have at least one
            non-<see langword="null" /> element;</description>
          </item>
          <item>
            <description>The non-<see langword="null" /> elements of <paramref name="subscribables" />
            do not all belong to the same <see cref="T:Triamec.Tam.TamStation" />.</description>
          </item>
        </list>
      </exception>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.SubscriptionParticipant.Link">
      <summary>
            Gets the link where this <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionParticipant" /> belongs to.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionParticipant.MaxSubscriptionValues">
      <summary>
            The maximum number of subscription registers within one <see cref="T:Triamec.Tam.Subscriptions.ISubscription" /> instance.
            </summary>
    </member>
    <member name="P:Triamec.Tam.Subscriptions.SubscriptionParticipant.Station">
      <summary>
            Gets the station on which all <see cref="T:Triamec.Tam.Subscriptions.ISubscribable" />s reside.
            </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.SubscriptionPurpose">
      <summary>
            	Specification of the intention an <see cref="T:Triamec.Tam.Subscriptions.ISubscription" /> is used for.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.DataLogging">
      <summary>
        <para>The <see cref="T:Triamec.Tam.Subscriptions.ISubscription" /> is used for high-volume, continuous data delivery.</para>
        <para>For example, this value is used for plotting in a software oscilloscope.</para>
        <para>Data is typically delivered to a different endpoint in order to not congest
            the endpoint used for <see cref="T:Triamec.TriaLink.Sessions.IServiceSession" />s.</para>
      </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionPurpose.EventTracking">
      <summary>
        <para>The <see cref="T:Triamec.Tam.Subscriptions.ISubscription" /> is used for low-volume, sporadic event propagation.</para>
        <para>For example, this value is used when waiting for triggers,
            or in a device state observer that subscribes to state transitions on a device.</para>
        <para>This value should not be used for a high-volume <see cref="T:Triamec.Tam.Subscriptions.ISubscription" />,
            because its packets will congest the endpoint used for <see cref="T:Triamec.TriaLink.Sessions.IServiceSession" />s.
            This could even make it virtually impossible to <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Disable">disable</see>
            the <see cref="T:Triamec.Tam.Subscriptions.ISubscription" /> correctly.</para>
      </summary>
    </member>
    <member name="T:Triamec.Tam.Subscriptions.SubscriptionState">
      <summary>
            The life-cycle state of an <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionState.Disposed">
      <summary>
            The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been
            <see cref="M:System.IDisposable.Dispose">Disposed</see> and must not be used any more.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionState.Unsubscribed">
      <summary>
            The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has successfully been
            <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Unsubscribe">Unsubscribed</see>,
            i.e. has been removed from all of its participants,
            and is ready to be <see cref="M:System.IDisposable.Dispose">Disposed</see>.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionState.Unsubscribing">
      <summary>
            The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been partially
            <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Unsubscribe">Unsubscribed</see>,
            i.e. has been removed from some of its participants.
            This is typically the state after <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Unsubscribe" />
            threw a <see cref="T:Triamec.Tam.TamException" />
            because some of its participants failed to remove the subscription.
            In this case, <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Unsubscribe" />
            may be called repeatedly until
            state <see cref="F:Triamec.Tam.Subscriptions.SubscriptionState.Unsubscribed" /> is reached.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionState.Subscribed">
      <summary>
            The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been created
            on all of its participants and is ready to be 
            <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Enable(Triamec.TriaLink.PublicationCommand,Triamec.Tam.Subscriptions.ISubscribable,Triamec.TriaLink.TamValue32)">Enabled</see>.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabling">
      <summary>
            The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been partially
            <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Enable(Triamec.TriaLink.PublicationCommand,Triamec.Tam.Subscriptions.ISubscribable,Triamec.TriaLink.TamValue32)">Enabled</see>.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionState.Disabling">
      <summary>
            The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been partially
            <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Disable">Disabled</see>.
            </summary>
    </member>
    <member name="F:Triamec.Tam.Subscriptions.SubscriptionState.Enabled">
      <summary>
            The <see cref="T:Triamec.Tam.Subscriptions.ISubscriptionBase" /> instance has been
            <see cref="M:Triamec.Tam.Subscriptions.ISubscriptionBase.Enable(Triamec.TriaLink.PublicationCommand,Triamec.Tam.Subscriptions.ISubscribable,Triamec.TriaLink.TamValue32)">Enabled</see>
            successfully.
            </summary>
    </member>
    <member name="T:Triamec.TamMath.CholeskyDecomposition">
      <summary>Cholesky Decomposition.</summary>
    </member>
    <member name="M:Triamec.TamMath.CholeskyDecomposition.#ctor(Triamec.TamMath.Matrix)">
      <summary>
            Cholesky algorithm for symmetric and positive definite matrix.
            </summary>
      <param name="squareMatrix">Square, symmetric matrix.</param>
      <returns>Structure to access L and isspd flag.</returns>
      <exception cref="T:System.ArgumentNullException">The squareMatrix must not be null.</exception>
    </member>
    <member name="P:Triamec.TamMath.CholeskyDecomposition.IsSPD">
      <summary>
            Gets a value indicating whether this instance is Symetric and Positive Definit (SPD).
            </summary>
    </member>
    <member name="M:Triamec.TamMath.CholeskyDecomposition.Solve(Triamec.TamMath.Matrix)">
      <summary>
            Solves linear system of equations A*X = B for solution X.
            </summary>
      <param name="matrixB">A Matrix with as many rows as A and any number of columns.</param>
      <returns>X so that L*L'*X = matrixB</returns>
      <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
      <exception cref="T:System.InvalidOperationException">Matrix is not symmetric positive definite.</exception>
      <exception cref="T:System.ArgumentNullException">The matrixB must not be null.</exception>
    </member>
    <member name="P:Triamec.TamMath.CholeskyDecomposition.TriangularMatrixL">
      <summary>
            Gets the triangular matrix L.
            </summary>
    </member>
    <member name="T:Triamec.TamMath.EigenvalueDecomposition">
      <summary>Eigenvalues and eigenvectors of a real matrix.</summary>
    </member>
    <member name="M:Triamec.TamMath.EigenvalueDecomposition.#ctor(Triamec.TamMath.Matrix)">
      <summary>
            Check for symmetry, then construct the eigenvalue decomposition
            </summary>
      <param name="squareMatrix">Square matrix</param>
      <exception cref="T:System.ArgumentNullException">The squareMatrix must not be null.</exception>
    </member>
    <member name="P:Triamec.TamMath.EigenvalueDecomposition.BlockDiagonalMatrixD">
      <summary>
            Gets the block diagonal eigenvalue matrix D
            </summary>
    </member>
    <member name="P:Triamec.TamMath.EigenvalueDecomposition.Eigenvectors">
      <summary>
            Returns the eigenvector matrix
            </summary>
    </member>
    <member name="M:Triamec.TamMath.EigenvalueDecomposition.GetEigenvaluesImaginaryPart">
      <summary>
            Returns the imaginary part of the eigenvalues.
            imag(diag(D))
            </summary>
      <returns>The imaginary part of the eingenvalues.</returns>
    </member>
    <member name="M:Triamec.TamMath.EigenvalueDecomposition.GetEigenvaluesRealPart">
      <summary>
            Returns the real part of the eigenvalues.
            real(diag(D))
            </summary>
      <returns>The real part of the eigenvalues.</returns>
    </member>
    <member name="T:Triamec.TamMath.LUDecomposition">
      <summary>LU Decomposition.</summary>
    </member>
    <member name="M:Triamec.TamMath.LUDecomposition.#ctor(Triamec.TamMath.Matrix)">
      <summary>
            LU Decomposition
            Initializes a new instance of the <see cref="T:Triamec.TamMath.LUDecomposition" /> class.
            Calculates LU decomposition into Structure.
            </summary>
      <param name="rectangularMatrix">The Rectangular matrix A.</param>
      <exception cref="T:System.ArgumentNullException">The rectangularMatrix must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.LUDecomposition.Determinant">
      <summary>
            Determinant of the Matrix
            </summary>
      <returns>det(A)</returns>
      <exception cref="T:System.ArgumentException">Matrix must be square</exception>
    </member>
    <member name="M:Triamec.TamMath.LUDecomposition.GetPivotVector">
      <summary>
            Gets pivot permutation vector
            </summary>
      <returns>The pivot vector</returns>
    </member>
    <member name="P:Triamec.TamMath.LUDecomposition.IsNonsingular">
      <summary>
            Indicates whether the matrix is nonsingular.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.LUDecomposition.LowerTriangularMatrixL">
      <summary>
            Gets lower triangular Matrix LowerTriangularMatrixL.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.LUDecomposition.Solve(Triamec.TamMath.Matrix)">
      <summary>
            Solves linear system of equations A*X = B for solution X.
            </summary>
      <param name="matrixB">A Matrix with as many rows as A and any number of columns.</param>
      <returns>X so that LowerTriangularMatrixL*UpperTriangularMatrixU*X = matrixB(piv,:)</returns>
      <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
      <exception cref="T:System.InvalidOperationException">Matrix is singular.</exception>
    </member>
    <member name="P:Triamec.TamMath.LUDecomposition.UpperTriangularMatrixU">
      <summary>
            Gets upper triangular Matrix.
            </summary>
    </member>
    <member name="T:Triamec.TamMath.Matrix">
      <summary>Utility operations on real matrices.</summary>
    </member>
    <member name="M:Triamec.TamMath.Matrix.#ctor(System.Double[0:,0:])">
      <summary>
            Constructs a matrix from a two-dimensional array of double values.
            </summary>
      <param name="valuesArray">A two-dimensional array of double values</param>
      <exception cref="T:System.ArgumentNullException">The values array must not be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.#ctor(System.Double[],System.Int32)">
      <summary>
            Construct a matrix from a one-dimensional packed array of double values
            </summary>
      <param name="values">One-dimensional array of doubles, packed by columns (ala Fortran).</param>
      <param name="rows">The number of rows.</param>
      <exception cref="T:System.ArgumentException">Array length must be a multiple of rows.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.ArgumentNullException">The values array must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.#ctor(System.Int32,System.Int32)">
      <summary>
            Construct a m-by-n matrix of zeros.
            </summary>
      <param name="rows">The number of rows (m).</param>
      <param name="columns">The number of columns (n).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
      <summary>
            Construct a m-by-n matrix initialized with a value.
            </summary>
      <param name="rows">The number of rows (m).</param>
      <param name="columns">The number of columns (n).</param>
      <param name="value">The value to initialize the matrix with.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Add(System.Double)">
      <summary>
            In place addition of scalar value to this matrix.
            this.matrix = this.matrix + value
            </summary>
      <param name="value">The scalar value to add.</param>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Add(Triamec.TamMath.Matrix)">
      <summary>
            In place addition of matrix m1 to this matrix.
            this.matrix = this.matrix + m1
            </summary>
      <param name="m1">The matrix to add.</param>
      <exception cref="T:System.ArgumentException">Matrix dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.ArrayDivide(Triamec.TamMath.Matrix)">
      <summary>
            In place element-by-element right division of this.matrix by matrix m1.
            this.matrix = this.matrix ./ m1
            </summary>
      <param name="m1">The matrix used for the division.</param>
      <exception cref="T:System.ArgumentException">Matrix dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.ArrayDivide(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Returns the element-by-element right division of m1 and m2.
            m = m1 ./ m2
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="m2">The matrix m2.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">The matrix m1 or m2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.ArrayMultiply(Triamec.TamMath.Matrix)">
      <summary>
            In place element-by-element multiplication of matrix m1 by this matrix.
            this.m = this.m .* m1
            </summary>
      <param name="m1">The matrix to multiply.</param>
      <exception cref="T:System.ArgumentException">Matrix dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.ArrayMultiply(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Returns the element-by-element multiplication of matrix m1 and m2.
            m = m1 .* m2;
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="m2">The matrix m2.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">The matrix m1 or m2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.CholeskyDecomposition">
      <summary>
            Cholesky Decomposition
            For a symmetric, positive definite matrix, the Cholesky decomposition
            is an lower triangular matrix L so that A = L*L'.
            </summary>
      <returns>CholeskyDecomposition of this matrix</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Clone">
      <summary>
            Returns a deep copy of this instance.
            </summary>
      <returns>The deep copy of this matrix.</returns>
    </member>
    <member name="P:Triamec.TamMath.Matrix.ColumnCount">
      <summary>
            Gets the number of columns of the matrix.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Condition">
      <summary>
            Returns the condition (2 norm) of this matrix.
            Condition is the ratio of largest to smallest singular value.
            </summary>
      <returns>The condition of this matrix.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Determinant">
      <summary>
            Returns the determinant of this matrix.
            </summary>
      <returns>The determinant of this matrix.</returns>
      <exception cref="T:System.ArgumentException">Matrix must be square</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.EigenvalueDecomposition">
      <summary>
            Eigenvalue Decomposition
            produces a diagonal matrix D of eigenvalues and a full matrix V whose
            columns are the corresponding eigenvectors so that X*V = V*D.
            </summary>
      <returns>EigenvalueDecomposition of this matrix</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Equals(System.Object)">
      <summary>
            Indicates whether another object is equal to this instance.
            </summary>
      <param name="obj">The other object to compare to this instance.</param>
      <returns>Returns <see langword="true" /> if <paramref name="obj" />
            is a <see cref="T:Triamec.TamMath.Matrix" />, 
            of the same dimensions (<see cref="P:Triamec.TamMath.Matrix.RowCount" />, <see cref="P:Triamec.TamMath.Matrix.ColumnCount" />) as this <see cref="T:Triamec.TamMath.Matrix" />,
            and has equal values for all elements;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Equals(Triamec.TamMath.Matrix)">
      <summary>
            Indicates whether another <see cref="T:Triamec.TamMath.Matrix" /> is equal to this instance.
            </summary>
      <param name="matrix">The matrix to compare with this instance.</param>
      <returns>Returns <see langword="true" /> if <paramref name="matrix" />
            is not <see langword="null" />, 
            of the same dimensions (<see cref="P:Triamec.TamMath.Matrix.RowCount" />, <see cref="P:Triamec.TamMath.Matrix.ColumnCount" />) as this <see cref="T:Triamec.TamMath.Matrix" />,
            and has equal values for all elements;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.GetHashCode">
      <summary>
            Gets the hashcode of this <c>Matrix</c>.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns a submatrix out of this matrix.
            The submatrix is defined with the start/end row and start/end column number.
            </summary>
      <param name="row1">The initial row index row1.</param>
      <param name="rowM">The final row index rowM.</param>
      <param name="column1">The initial column index column1.</param>
      <param name="columnN">The final column index columnN.</param>
      <returns>
            The submatrix A(row1:rowM,column1:columnN)
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.GetMatrix(System.Int32,System.Int32,System.Int32[])">
      <summary>
            Returns a submatrix out of this matrix.
            The submatrix is defined with the start/end row number and a column index vector.
            </summary>
      <param name="row1">The initial row index row1.</param>
      <param name="rowM">The final row index rowM.</param>
      <param name="columnIndexes">An array of column indexes.</param>
      <returns>
            The submatrix A(row1:roeM1,columnIndexes(:))
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      <exception cref="T:System.ArgumentNullException">The index vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.GetMatrix(System.Int32[],System.Int32,System.Int32)">
      <summary>
            Returns a submatrix out of this matrix.
            The submatrix is defined with a row index vector and the start/end column number.
            </summary>
      <param name="rowIndexes">An array of row indexes.</param>
      <param name="column1">The initial column index column1.</param>
      <param name="columnN">The final column index columnN.</param>
      <returns>
            The submatrix A(rowIndexes(:),column1:columnN
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      <exception cref="T:System.ArgumentNullException">The index vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.GetMatrix(System.Int32[],System.Int32[])">
      <summary>
            Returns a submatrix out of this matrix.
            The submatrix is defined with a row and column index vector
            </summary>
      <param name="rowIndexes">An array of row indexes.</param>
      <param name="columnIndexes">An array of column indexes.</param>
      <returns>
            The submatrix A(rowIndexes(:),columnIndexes(:))
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Submatrix indices.</exception>
      <exception cref="T:System.ArgumentNullException">The index vectors must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.HorizontalConcatenate(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Returns the concatenation of the two matrices m1 and m2 with the same number
            of rows horizontal to one matrix m = [m1 m2].
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="m2">The matrix m2.</param>
      <returns>The horizontal concatenated matrix</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.ArgumentNullException">Matrix m1 or m2 must not be null.</exception>
      <exception cref="T:System.ArgumentException">Matrix number of rows must agree.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Identity(System.Int32,System.Int32)">
      <summary>
            Returns a m-by-n identity matrix with ones on the diagonal and zeros elsewhere.
            </summary>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of colums.</param>
      <returns>The m-by-n identity matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Inverse">
      <summary>
            Returns the Inverse or pseudoinverse of this matrix.
            </summary>
      <returns>
            The Inverse(A) if A is square, pseudoinverse otherwise.
            </returns>
    </member>
    <member name="P:Triamec.TamMath.Matrix.Item(System.Int32,System.Int32)">
      <summary>
            Gets or set the element indexed by <c>(i, j)</c>
            in the <c>Matrix</c>.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns are invalid.</exception>
    </member>
    <member name="P:Triamec.TamMath.Matrix.LeastSquaresError">
      <summary>
            Gets or sets the least squares error of the least squares solution
            which was found within method SolveWithLeastSqures.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Matrix.LUDecomposition">
      <summary>
            LU Decomposition.
            stores an upper triangular matrix in U and a "psychologically lower
            triangular matrix" (i.e. a product of lower triangular and permutation
            matrices) in L, so that X = L*U. X can be rectangular.
            </summary>
      <returns>LUDecomposition of this matrix</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Multiply(System.Double)">
      <summary>
            In place multiplication of this matrix by a scalar value.
            this.matrix = this.matrix * value
            </summary>
      <param name="value">The scalar value to multiply.</param>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Negate">
      <summary>
            In place negation of this matrix.
            this.m = -this.m
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Norm1">
      <summary>
            Returns the Norm1, the 1-norm of this matrix, the largest column sum.
            </summary>
      <returns>Maximum column sum.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Norm2">
      <summary>
            Returns the Norm2, the largest singular value of this matrix
            </summary>
      <returns>Maximum singular value.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.NormF">
      <summary>
            Returns the NormF, the Frobenius norm of this matrix.
            The frobenius norm is the sqrt of the sum of squares of all elements.
            </summary>
      <returns>The frobenius norm of this matrix</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.NormInf">
      <summary>
            Returns the NormInf, the infinity norm of this matrix, the largest row sum.
            </summary>
      <returns>Maximum row sum.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Addition(System.Double,Triamec.TamMath.Matrix)">
      <summary>
            Returns sum of scalar and matrix.
            m = value + m1
            </summary>
      <param name="value">The scalar value.</param>
      <param name="m1">The matrix m1.</param>
      <returns>
            The sum of a scalar value and the matrix m1.
            </returns>
      <exception cref="T:System.ArgumentNullException">Matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Addition(Triamec.TamMath.Matrix,System.Double)">
      <summary>
            Returns sum of matrix and scalar.
            m = m1 + value
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="value">The scalar value.</param>
      <returns>
            The sum of the matrix m1 and a scalar value.
            </returns>
      <exception cref="T:System.ArgumentNullException">Matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Addition(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Returns sum of matrices m1 and m2.
            m = m1 + m2
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="m2">The matrix m2.</param>
      <returns>The sum of the matrices m1 and m2.</returns>
      <exception cref="T:System.ArgumentException">Matrix dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The matrices m1 and m2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Equality(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Equality test
            </summary>
      <param name="m1">The first matrix in the comparison.</param>
      <param name="m2">The second matrix in the comparison.</param>
      <returns>Returns <see langword="true" /> if matrices 
            <paramref name="m1" /> and <paramref name="m2" /> are equal or both <see langword="null" />;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Implicit(Triamec.TamMath.Matrix)~System.Double[0:,0:]">
      <summary>
            Returns conversion of a matrix m1 to a double[,] array.
            </summary>
      <param name="m1">The matrix m1.</param>
      <returns>
            2-dimensional array which represents the matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">Matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Inequality(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Inequality test
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="m2">The matrix m2.</param>
      <returns>Returns <see langword="true" /> if matrices 
            <paramref name="m1" /> and <paramref name="m2" /> are not equal and both not <see langword="null" />;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Multiply(System.Double,Triamec.TamMath.Matrix)">
      <summary>
            Returns the product of a scalar by a matrix.
            m = m1 * value
            </summary>
      <param name="value">The scalar value.</param>
      <param name="m1">The matrix m1.</param>
      <returns>
            The product of the scalar and the matrix.
            </returns>
      <exception cref="T:System.ArgumentNullException">Matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Multiply(Triamec.TamMath.Matrix,System.Double)">
      <summary>
            Returns the product of a matrix by a scalar.
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="value">The scalar value.</param>
      <returns>
            The product of the matrix and the scalar.
            </returns>
      <exception cref="T:System.ArgumentNullException">Matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Multiply(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Returns the matrix product of matrices m1 and m2.
            m = m1 x m2
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="m2">The matrix m2.</param>
      <returns>The matrix product of m1 and m2</returns>
      <exception cref="T:System.ArgumentException">Matrix inner dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">Matrix m1 or m2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Subtraction(System.Double,Triamec.TamMath.Matrix)">
      <summary>
            Returns difference of scalar value and a matrix.
            m = value - m1
            </summary>
      <param name="value">The scalar value.</param>
      <param name="m1">The matrix m1.</param>
      <returns>
            The difference beteen a scalar and the matrix m1.
            </returns>
      <exception cref="T:System.ArgumentNullException">Matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Subtraction(Triamec.TamMath.Matrix,System.Double)">
      <summary>
            Returns difference of matrix and scalar value.
            m = m1 - value
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="value">The scalar value.</param>
      <returns>
            The difference beteen a matrix m1 and a scalar.
            </returns>
      <exception cref="T:System.ArgumentNullException">Matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_Subtraction(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Returns difference of matrices m1 and m2.
            m = m1 - m2
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="m2">The matrix m2.</param>
      <returns>
            The difference beteen the matrix m1 and the matrix m2.
            </returns>
      <exception cref="T:System.ArgumentException">Matrix dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">Matrix m1 or m2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.op_UnaryNegation(Triamec.TamMath.Matrix)">
      <summary>
            Returns unary minus operation of a matrix.
            m = -m1
            </summary>
      <param name="m1">The matrix m1.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">Matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.QRDecomposition">
      <summary>
            QR Decomposition
            produces an m-by-n upper triangular matrix R and an m-by-m unitary
            matrix Q so that A = Q*R, where A is m-by-n
            </summary>
      <returns>QRDecomposition of this matrix</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Rank">
      <summary>
            Returns rank of this matrix.
            </summary>
      <returns>
            The effective numerical rank, obtained from SVD.
            </returns>
    </member>
    <member name="P:Triamec.TamMath.Matrix.RowCount">
      <summary>
            Gets the number of rows of the matrix.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32,System.Int32,Triamec.TamMath.Matrix)">
      <summary>
            Set a submatrix in this matrix.
            The submatrix is defined with the start/end row and start/end column number.
            </summary>
      <param name="row1">The initial row index row1.</param>
      <param name="rowM">The final row index rowM.</param>
      <param name="column1">The initial column index column1.</param>
      <param name="columnN">The final column index columnN.</param>
      <param name="m1">The submatrix to set in A(row1:rowM,column1:columnN)</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      <exception cref="T:System.ArgumentNullException">The vector m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.SetMatrix(System.Int32,System.Int32,System.Int32[],Triamec.TamMath.Matrix)">
      <summary>
            Set a submatrix in this matrix.
            The submatrix is defined with the start/end row number and a column index vector.
            </summary>
      <param name="row1">The initial row index row1.</param>
      <param name="rowM">The final row index rowM.</param>
      <param name="columnIndexes">An array of column indexes.</param>
      <param name="m1">The submatrix to set in A(row1:rowM,colIndexes(:))</param>
      <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.ArgumentNullException">The index vector or m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.SetMatrix(System.Int32[],System.Int32,System.Int32,Triamec.TamMath.Matrix)">
      <summary>
            Set a submatrix in this matrix.
            The submatrix is defined with a row index vector and the start/end column number.
            </summary>
      <param name="rowIndexes">An array of row indexes.</param>
      <param name="column1">The initial column index column1.</param>
      <param name="columnN">The final column index columnN.</param>
      <param name="m1">The submatrix to set in A(rowIndexes(:),col1:colN)</param>
      <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.ArgumentNullException">The index vector or m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.SetMatrix(System.Int32[],System.Int32[],Triamec.TamMath.Matrix)">
      <summary>
            Set a submatrix in this matrix.
            The submatrix is defined with a row and column index vector
            </summary>
      <param name="rowIndexes">An array of row indexes.</param>
      <param name="columnIndexes">An array of column indexes.</param>
      <param name="m1">The submatrix to set in A(rowIndexes(:),columnIndexes(:))</param>
      <exception cref="T:System.IndexOutOfRangeException">Submatrix indices</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.ArgumentNullException">The index vectors or m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.SingularValueDecomposition">
      <summary>
            Singular Value Decomposition
            produces a diagonal matrix S, of the same dimension as matrix A and
            with nonnegative diagonal elements in decreasing order, and unitary
            matrices U and V so that X = U*S*V'
            </summary>
      <returns>
            SingularValueDecomposition of this matrix
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Solve(Triamec.TamMath.Matrix)">
      <summary>
            Solves linear system of equations A*X = B for solution X.
            </summary>
      <param name="matrixB">right hand side matrix B</param>
      <returns>
            solution if A is square, least squares solution otherwise.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.SolveTranspose(Triamec.TamMath.Matrix)">
      <summary>
            Solves linear system of equations X*A = B for solution X.
            This system is equal to A'*X' = B'
            </summary>
      <param name="matrixB">right hand side matrix B</param>
      <returns>
            solution if A is square, least squares solution otherwise.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.SolveWithLeastSquares(Triamec.TamMath.Matrix)">
      <summary>
            Solves overdetermined linear system of equations A*X = B for best 
            solution X. Minimizes the distance A*X - B within least squares method.
            QR decomposition is used for the solution of the least squares problem
            The least squares error of the found solution is availabe via property LeastSquaresError.
            </summary>
      <param name="matrixB">right hand side matrix B</param>
      <returns>least squares solution.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Subtract(System.Double)">
      <summary>
            In place subtraction of scalar value from this matrix.
            this.matrix = this.matrix - value
            </summary>
      <param name="value">The scalar value to subtract.</param>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Subtract(Triamec.TamMath.Matrix)">
      <summary>
            In place substraction of matrix m1 from this matrix.
            this.matrix = this.matrix - m1
            </summary>
      <param name="m1">The matrix to subtract.</param>
      <exception cref="T:System.ArgumentException">Matrix dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The matrix m1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Trace">
      <summary>
            Returns the trace of ths matrix. Trace is the sum of the diagonal elements.
            </summary>
      <returns>The trace of this matrix.</returns>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Transpose">
      <summary>
            In place transposition of this matrix.
            this.m = this.m'
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Matrix.Transpose(Triamec.TamMath.Matrix)">
      <summary>
            Returns the transposed of the provided matrix mTrans.
            m = mTrans'
            </summary>
      <param name="matrixTrans">The matrix to transpose.</param>
      <returns></returns>
      <exception cref="T:System.ArgumentNullException">The matrixTrans must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Matrix.VerticalConcatenate(Triamec.TamMath.Matrix,Triamec.TamMath.Matrix)">
      <summary>
            Returns the concatenation of the two matrices m1 and m2 with the same number of columns
            vertical to one matrix m = [m1; m2].
            </summary>
      <param name="m1">The matrix m1.</param>
      <param name="m2">The matrix m2.</param>
      <returns>The vertical concatenated matrix.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
      <exception cref="T:System.ArgumentNullException">Matrix m1 or m2 must not be null.</exception>
      <exception cref="T:System.ArgumentException">Matrix number of columns must agree.</exception>
    </member>
    <member name="T:Triamec.TamMath.NumberSeparator">
      <summary>
            A representation of a separation character in a number.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.NumberSeparator.#ctor(System.Char,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TamMath.NumberSeparator" /> class.
            </summary>
      <param name="character">The character to represent.</param>
      <param name="description">The description of the character.</param>
    </member>
    <member name="P:Triamec.TamMath.NumberSeparator.Character">
      <summary>
            Gets the character.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.NumberSeparator.Comma">
      <summary>
            The representation of a comma ','.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.NumberSeparator.DecimalSeparators">
      <summary>
            The representation of possible decimal separators.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.NumberSeparator.Description">
      <summary>
            Gets the description.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.NumberSeparator.Dot">
      <summary>
            The representation of a dot '.'.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.NumberSeparator.FromString(System.String)">
      <summary>
            Creates a <see cref="T:Triamec.TamMath.NumberSeparator" />
            from a given separator string.
            </summary>
      <param name="separator">A string with one character.</param>
      <returns>Returns a <see cref="T:Triamec.TamMath.NumberSeparator" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="separator" /> is <see langword="null" />.</exception>
    </member>
    <member name="F:Triamec.TamMath.NumberSeparator.GroupSeparators">
      <summary>
            The representation of possible thousands separators.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.NumberSeparator.SingleQuote">
      <summary>
            The representation of a single quote '''.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.NumberSeparator.Space">
      <summary>
            The representation of a space ' '.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.NumberSeparator.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.TamMath.QRDecomposition">
      <summary>QR Decomposition.</summary>
    </member>
    <member name="M:Triamec.TamMath.QRDecomposition.#ctor(Triamec.TamMath.Matrix)">
      <summary>
            Calculates QR Decomposition, computed by Householder reflections.
            A = Q*R;
            </summary>
      <param name="matrixA">The matrix A to decompose.</param>
      <exception cref="T:System.ArgumentNullException">matrixB if matrixB is null.</exception>
    </member>
    <member name="P:Triamec.TamMath.QRDecomposition.FullRank">
      <summary>
            Indicates whether the matrix is full rank.
            </summary>
      <returns>
        <see langword="true" /> if R, and hence A, has full rank.</returns>
    </member>
    <member name="P:Triamec.TamMath.QRDecomposition.MatrixH">
      <summary>
            Gets the Householder vectors.
            </summary>
      <returns>Lower trapezoidal matrix whose columns define the reflections.</returns>
    </member>
    <member name="P:Triamec.TamMath.QRDecomposition.MatrixQ">
      <summary>
            Gets the (economy-sized) orthogonal matrix Q.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.QRDecomposition.MatrixR">
      <summary>
            Gets the upper triangular matrix R
            </summary>
    </member>
    <member name="M:Triamec.TamMath.QRDecomposition.Solve(Triamec.TamMath.Matrix)">
      <summary>
            Least squares solution of A*X = B
            Minimizes A*X-B within least squares method.
            The least squares error of the found solution is availabe via property LeastSquaresError.
            </summary>
      <param name="matrixB">A Matrix with as many rows as A and any number of columns.</param>
      <returns>
            LEast squares solution X that minimizes the two norm of A*X-B = Q*R*X-B.
            </returns>
      <exception cref="T:System.ArgumentNullException">matrixB if matrixB is null.</exception>
      <exception cref="T:System.ArgumentException">Matrix row dimensions must agree.</exception>
      <exception cref="T:System.InvalidOperationException"> Matrix is rank deficient.</exception>
    </member>
    <member name="T:Triamec.TamMath.Range">
      <summary>
            A range description
            with a 1-based start and a possibly unlimited length.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Range.#ctor">
      <summary>
            Initializes a new instance 
            of an unlimited <see cref="T:Triamec.TamMath.Range" />.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Range.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of 
            an unlimited <see cref="T:Triamec.TamMath.Range" />.
            </summary>
      <param name="start">The 1-based start of the range.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="start" /> is zero.</para>
      </exception>
    </member>
    <member name="M:Triamec.TamMath.Range.#ctor(System.UInt32,System.UInt32)">
      <summary>
            Initializes a new instance of 
            a limited <see cref="T:Triamec.TamMath.Range" />.
            </summary>
      <param name="start">The 1-based start of the range.</param>
      <param name="length">The length of the range.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="start" /> is zero.</para>
        <para>
          <paramref name="length" /> is zero.</para>
      </exception>
    </member>
    <member name="M:Triamec.TamMath.Range.CanMerge(Triamec.TamMath.Range,Triamec.TamMath.Range)">
      <summary>
            Determines whether two <see cref="T:Triamec.TamMath.Range" />s
            can be <see cref="M:Triamec.TamMath.Range.Merge(Triamec.TamMath.Range,Triamec.TamMath.Range)" />d.
            </summary>
      <param name="r1">The first <see cref="T:Triamec.TamMath.Range" /> in the test.</param>
      <param name="r2">The second <see cref="T:Triamec.TamMath.Range" /> in the test.</param>
      <returns>
        <see langword="true" /> if this <see cref="T:Triamec.TamMath.Range" />
            can be <see cref="M:Triamec.TamMath.Range.Merge(Triamec.TamMath.Range,Triamec.TamMath.Range)" />d with the specified <paramref name="r2" />;
            otherwise, <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="r1" /> is <see langword="null" />.</para>
        <para>
          <paramref name="r2" /> is <see langword="null" />.</para>
      </exception>
    </member>
    <member name="M:Triamec.TamMath.Range.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Range.CompareTo(Triamec.TamMath.Range)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has the following meanings:
            <table width="100%" cellspacing="2" cellpadding="5"><tr><th><p>Value</p></th><th><p>Meaning</p></th></tr><tr><td><p>Less than zero</p></td><td><p>This object is less than the <paramref name="other" />.</p></td></tr><tr><td><p>Zero</p></td><td><p>This object is equal to the <paramref name="other" />.</p></td></tr><tr><td><p>Greater than zero</p></td><td><p>This object is greater than the <paramref name="other" />.</p></td></tr></table></returns>
    </member>
    <member name="M:Triamec.TamMath.Range.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:Triamec.TamMath.Range.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:Triamec.TamMath.Range.IsUnlimited">
      <summary>
            Gets a value indicating whether this range is unlimited.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.Range.Length">
      <summary>
            Gets the length of the range.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This <see cref="T:Triamec.TamMath.Range" /> is unlimited
            (<c><see cref="P:Triamec.TamMath.Range.IsUnlimited" /> == <see langword="true" /></c>).</exception>
    </member>
    <member name="F:Triamec.TamMath.Range.LIMIT_SEPARATOR">
      <summary>
            The separation character for the range limits.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Range.Merge(Triamec.TamMath.Range,Triamec.TamMath.Range)">
      <summary>
            Merges the specified other <see cref="T:Triamec.TamMath.Range" />
            with this <see cref="T:Triamec.TamMath.Range" />.
            </summary>
      <param name="r1">The first <see cref="T:Triamec.TamMath.Range" /> to merge.</param>
      <param name="r2">The second <see cref="T:Triamec.TamMath.Range" /> to merge.</param>
      <returns>Returns a new <see cref="T:Triamec.TamMath.Range" /> instance
            with the merged range of <paramref name="r1" /> and <paramref name="r2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="r1" /> is <see langword="null" />.</para>
        <para>
          <paramref name="r2" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">The two <see cref="T:Triamec.TamMath.Range" />s
            <paramref name="r1" /> and <paramref name="r2" />
            can't be merged because they do not adjoin or overlap.</exception>
    </member>
    <member name="M:Triamec.TamMath.Range.op_Equality(Triamec.TamMath.Range,Triamec.TamMath.Range)">
      <summary>
            Compares two <see cref="T:Triamec.TamMath.Range" />s for equality.
            </summary>
      <param name="r1">The first range in the comparison.</param>
      <param name="r2">The second range in the comparison.</param>
      <returns>Returns <see langword="true" /> if the two <see cref="T:Triamec.TamMath.Range" />s are equal;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TamMath.Range.op_GreaterThan(Triamec.TamMath.Range,Triamec.TamMath.Range)">
      <summary>
            Compares one <see cref="T:Triamec.TamMath.Range" /> for being greater than another <see cref="T:Triamec.TamMath.Range" />.
            </summary>
      <param name="r1">The first range in the comparison.</param>
      <param name="r2">The second range in the comparison.</param>
      <returns>Returns <see langword="true" /> if <paramref name="r1" /> is greater than <paramref name="r2" />;
            otherwise, returns <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="r1" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.Range.op_Implicit(System.String)~Triamec.TamMath.Range">
      <summary>
            Implicit casting operator from the specified range <see langword="string" />
            to a <see cref="T:Triamec.TamMath.Range" />.
            </summary>
      <param name="range">The range description.
            For example, <c>5</c>, <c>7-10</c>, or <c>16-</c>.</param>
      <returns>Returns a <see cref="T:Triamec.TamMath.Range" />
            parsed from the specified <paramref name="range" /> description.
            When <paramref name="range" /> is the <see cref="F:System.String.Empty" /> string,
            returns the default unlimited <see cref="T:Triamec.TamMath.Range" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="range" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="range" /> does not describe a range.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="range" />
            contains values less than <see cref="F:System.Int32.MinValue" /> 
            or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.Range.op_Inequality(Triamec.TamMath.Range,Triamec.TamMath.Range)">
      <summary>
            Compares two <see cref="T:Triamec.TamMath.Range" />s for inequality.
            </summary>
      <param name="r1">The first range in the comparison.</param>
      <param name="r2">The second range in the comparison.</param>
      <returns>Returns <see langword="true" /> if the two <see cref="T:Triamec.TamMath.Range" />s are not equal;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TamMath.Range.op_LessThan(Triamec.TamMath.Range,Triamec.TamMath.Range)">
      <summary>
            Compares one <see cref="T:Triamec.TamMath.Range" /> for being less than another <see cref="T:Triamec.TamMath.Range" />.
            </summary>
      <param name="r1">The first range in the comparison.</param>
      <param name="r2">The second range in the comparison.</param>
      <returns>Returns <see langword="true" /> if <paramref name="r1" /> is less than <paramref name="r2" />;
            otherwise, returns <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="r1" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.Range.Parse(System.String,System.IFormatProvider)">
      <summary>
            Parses a description of one range.
            </summary>
      <param name="range">The range description.
            For example, <c>5</c>, <c>7-10</c>, or <c>16-</c>.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" />
            that supplies culture-specific formatting information 
            about the <paramref name="range" />.</param>
      <returns>
            Returns a <see cref="T:Triamec.TamMath.Range" />
            parsed from the specified <paramref name="range" /> description.
            When <paramref name="range" /> is the <see cref="F:System.String.Empty" /> string,
            returns the default unlimited <see cref="T:Triamec.TamMath.Range" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="range" /> is <see langword="null" />.</para>
        <para>
          <paramref name="provider" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The start or length <paramref name="range" /> is zero.
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="range" /> does not describe a range.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="range" />
            contains values less than <see cref="F:System.Int32.MinValue" />
            or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:Triamec.TamMath.Range.Start">
      <summary>
            Gets the 1-based start of the range.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Range.System#IComparable#CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has the following meanings:
            <table width="100%" cellspacing="2" cellpadding="5"><tr><th><p>Value</p></th><th><p>Meaning</p></th></tr><tr><td><p>Less than zero</p></td><td><p>This object is less than the <span class="parameter">other</span> parameter.</p></td></tr><tr><td><p>Zero</p></td><td><p>This object is equal to <span class="parameter">other</span>.</p></td></tr><tr><td><p>Greater than zero</p></td><td><p>This object is greater than <span class="parameter">other</span>.</p></td></tr></table></returns>
      <exception cref="T:System.ArgumentException">obj is not the same type as this instance.</exception>
    </member>
    <member name="M:Triamec.TamMath.Range.ToIndexArray">
      <summary>
            Convertes this <see cref="T:Triamec.TamMath.Range" /> into an array of 1-based indexes.
            </summary>
      <returns>An array of 1-based indexes that correspond to this <see cref="T:Triamec.TamMath.Range" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.TamMath.Range.IsUnlimited" /> is <see langword="true" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.Range.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.TamMath.RangeList">
      <summary>
            A list of <see cref="T:Triamec.TamMath.Range" />s.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.RangeList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TamMath.RangeList" /> class.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.RangeList.#ctor(System.Collections.Generic.IEnumerable{Triamec.TamMath.Range})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TamMath.RangeList" /> class.
            </summary>
      <param name="collection">The collection of <see cref="T:Triamec.TamMath.Range" />s
            whose elements are copied into the new <see cref="T:Triamec.TamMath.RangeList" />.</param>
    </member>
    <member name="M:Triamec.TamMath.RangeList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TamMath.RangeList" /> class.
            </summary>
      <param name="capacity">The number of elements that the new <see cref="T:Triamec.TamMath.RangeList" />
            can initially store.</param>
    </member>
    <member name="M:Triamec.TamMath.RangeList.Add(Triamec.TamMath.Range)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.Add(Triamec.TamMath.RangeList)">
      <summary>
            Adds all <see cref="T:Triamec.TamMath.Range" />s of a <see cref="T:Triamec.TamMath.RangeList" />
            to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
      <param name="list">The <see cref="T:Triamec.TamMath.RangeList" /> to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.AddParsed(System.String,System.IFormatProvider)">
      <summary>
            Parses a description of one or more <see cref="T:Triamec.TamMath.Range" />s,
            and adds the parsed <see cref="T:Triamec.TamMath.Range" />s to this <see cref="T:Triamec.TamMath.RangeList" />.
            </summary>
      <param name="ranges">The description of the ranges.
            For example, <c>5;7-10;12;16-</c>.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" />
            that supplies culture-specific formatting information 
            about the <paramref name="ranges" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="ranges" /> is <see langword="null" />.</para>
        <para>
          <paramref name="provider" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ranges" /> does not describe one or more ranges.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="ranges" />
            contains values less than <see cref="F:System.Int32.MinValue" /> 
            or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.BeginUpdate">
      <summary>
            Begins an update.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.RangeList.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.Contains(Triamec.TamMath.Range)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:Triamec.TamMath.RangeList.CopyTo(Triamec.TamMath.Range[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:Triamec.TamMath.RangeList.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:Triamec.TamMath.RangeList.ElementCount">
      <summary>
            Gets the sum of <see cref="P:Triamec.TamMath.Range.Length" />s.
            When this <see cref="T:Triamec.TamMath.RangeList" /> has been <see cref="M:Triamec.TamMath.RangeList.Minimize" />d,
            this is the count of distinct indexes in this <see cref="T:Triamec.TamMath.RangeList" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.TamMath.Range.IsUnlimited" /> is <see langword="true" />
            for at least one <see cref="T:Triamec.TamMath.Range" /> in this <see cref="T:Triamec.TamMath.RangeList" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.EndUpdate">
      <summary>
            Ends an update
            and raises deferred <see cref="E:Triamec.TamMath.RangeList.RangeListChanged" /> event if necessary.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.RangeList.FromString(System.String)">
      <summary>
            Parses a description of one or more ranges.
            </summary>
      <param name="ranges">The description of the ranges.
            For example, <c>5;7-10;12;16-</c>.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" />
            that supplies culture-specific formatting information 
            about the <paramref name="ranges" />.</param>
      <returns>Returns an array of <see cref="T:Triamec.TamMath.Range" />s
            parsed from the specified <paramref name="ranges" /> description.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="ranges" /> is <see langword="null" />.</para>
        <para>
          <paramref name="provider" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The start or length of any of <paramref name="ranges" /> is zero.
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ranges" /> does not describe one or more ranges.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="ranges" />
            contains values less than <see cref="F:System.Int32.MinValue" /> 
            or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Triamec.TamMath.RangeList.IndexOf(Triamec.TamMath.Range)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Triamec.TamMath.RangeList.Insert(System.Int32,Triamec.TamMath.Range)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:Triamec.TamMath.RangeList.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Triamec.TamMath.RangeList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Triamec.TamMath.Range" /> at the specified index.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.RangeList.Minimize">
      <summary>
            Sorts and minimizes the <see cref="T:Triamec.TamMath.Range" />s
            in this <see cref="T:Triamec.TamMath.RangeList" />.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.RangeList.OnRangeListChanged">
      <summary>
            Raises the <see cref="E:Triamec.TamMath.RangeList.RangeListChanged" /> event
            if not deferred by a previous call of <see cref="M:Triamec.TamMath.RangeList.BeginUpdate" />.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.RangeList.op_Implicit(System.String)~Triamec.TamMath.RangeList">
      <summary>
            Implicit casting operator from the specified ranges <see langword="string" />
            to a <see cref="T:Triamec.TamMath.RangeList" />.
            </summary>
      <param name="ranges">The description of the ranges.
            For example, <c>5;7-10;12;16-</c>.</param>
      <returns>Returns an array of <see cref="T:Triamec.TamMath.Range" />s
            parsed from the specified <paramref name="ranges" /> description.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ranges" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="ranges" /> does not describe one or more ranges.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="ranges" />
            contains values less than <see cref="F:System.Int32.MinValue" /> 
            or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.Parse(System.String,System.IFormatProvider)">
      <summary>
            Parses a description of one or more ranges.
            </summary>
      <param name="ranges">The description of the ranges.
            For example, <c>5;7-10;12;16-</c>.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" />
            that supplies culture-specific formatting information 
            about the <paramref name="ranges" />.</param>
      <returns>Returns an array of <see cref="T:Triamec.TamMath.Range" />s
            parsed from the specified <paramref name="ranges" /> description.</returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="ranges" /> is <see langword="null" />.</para>
        <para>
          <paramref name="provider" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The start or length of any of <paramref name="ranges" /> is zero.
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ranges" /> does not describe one or more ranges.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="ranges" />
            contains values less than <see cref="F:System.Int32.MinValue" /> 
            or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="E:Triamec.TamMath.RangeList.RangeListChanged">
      <summary>
            Occurs when the content of this <see cref="T:Triamec.TamMath.RangeList" /> changed.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.RangeList.RangeSeparator">
      <summary>
            The range separation character.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.RangeList.Remove(Triamec.TamMath.Range)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.ReplaceParsed(System.String,System.IFormatProvider)">
      <summary>
            Parses a description of one or more <see cref="T:Triamec.TamMath.Range" />s,
            and replaces the <see cref="T:Triamec.TamMath.Range" />s in this <see cref="T:Triamec.TamMath.RangeList" />
            with the parsed <see cref="T:Triamec.TamMath.Range" />s.
            </summary>
      <param name="ranges">The description of the ranges.
            For example, <c>5;7-10;12;16-</c>.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" />
            that supplies culture-specific formatting information 
            about the <paramref name="ranges" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="ranges" /> is <see langword="null" />.</para>
        <para>
          <paramref name="provider" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ranges" /> does not describe one or more ranges.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="ranges" />
            contains values less than <see cref="F:System.Int32.MinValue" /> 
            or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Triamec.TamMath.RangeList.ToIndexArray">
      <summary>
            Converts this <see cref="T:Triamec.TamMath.RangeList" /> into an array of 1-based indexes.
            </summary>
      <returns>An array of 1-based indexes that correspond to this <see cref="T:Triamec.TamMath.RangeList" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.TamMath.Range.IsUnlimited" /> is <see langword="true" />
            for at least one <see cref="T:Triamec.TamMath.Range" /> in this <see cref="T:Triamec.TamMath.RangeList" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.RangeList.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.TamMath.RowImporter">
      <summary>
            A callback method for use by the <see cref="M:Triamec.TamMath.TableImporter.Import" /> method.
            </summary>
      <param name="lineIndex">The index of the processed line in the table file.</param>
      <param name="rowIndex">The index of the table row to import.
            This value increments in subsequent calls of this callback method.</param>
      <param name="values">The column values of the table row to import.</param>
      <returns>Whether to cancel importing rows.</returns>
      <exception cref="T:Triamec.Tam.TamException">An exception occurred during importing the row.</exception>
    </member>
    <member name="T:Triamec.TamMath.Scalar">
      <summary>Utility operations on scalars.</summary>
    </member>
    <member name="M:Triamec.TamMath.Scalar.DistanceToOrigin(System.Double,System.Double)">
      <summary>
            Calculates a points distance to origin in 2-dimensional space.
            distance = sqrt(Xcomponent^2 + Ycomponent^2).
            calculation is made without under/overflow.
            </summary>
      <param name="coordinateX">The x coordinate of the point.</param>
      <param name="coordinateY">The y coordinate of the point.</param>
      <returns>The points distance to origin.</returns>
    </member>
    <member name="M:Triamec.TamMath.Scalar.HighestCommonFactor(System.Int32,System.Int32)">
      <summary>
            Calculates the highest common factor of two integer values.
            </summary>
      <param name="value1">The value1.</param>
      <param name="value2">The value2.</param>
      <returns>The highest common factor</returns>
    </member>
    <member name="M:Triamec.TamMath.Scalar.RelativeEpsilon(System.Double)">
      <summary>
            Returns a small value such that <c><paramref name="value" /> + result &gt; value</c>.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Scalar.RelativeEpsilon(System.Single)">
      <summary>
            Returns a small value such that <c><paramref name="value" /> + result &gt; value</c>.
            </summary>
    </member>
    <member name="T:Triamec.TamMath.SingularValueDecomposition">
      <summary>Singular Value Decomposition.</summary>
    </member>
    <member name="M:Triamec.TamMath.SingularValueDecomposition.Condition">
      <summary>Two norm condition number.</summary>
      <returns>max(S)/min(S)</returns>
    </member>
    <member name="P:Triamec.TamMath.SingularValueDecomposition.DiagonalMatrixS">
      <summary>
            Get the diagonal matrix of singular values.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.SingularValueDecomposition.GetSingularValues">
      <summary>
            Returns the one-dimensional array of singular values.
            </summary>
      <returns>diagonal of S.</returns>
    </member>
    <member name="P:Triamec.TamMath.SingularValueDecomposition.LeftUnaryMatrixU">
      <summary>
            Gets the left unary matrix U.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.SingularValueDecomposition.Norm2">
      <summary>Two norm.</summary>
      <returns>max(S)</returns>
    </member>
    <member name="M:Triamec.TamMath.SingularValueDecomposition.Rank">
      <summary>Effective numerical matrix rank.</summary>
      <returns>Number of nonnegligible singular values.</returns>
    </member>
    <member name="P:Triamec.TamMath.SingularValueDecomposition.RightUnaryMatrixV">
      <summary>
            Gets the right unary matrix V.
            </summary>
    </member>
    <member name="T:Triamec.TamMath.TableImporter">
      <summary>
            A general purpose class to import float tables from files.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.TableImporter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TamMath.TableImporter" /> class.
            </summary>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.ColumnDelimitersChanged">
      <summary>
            Occurs when the <see cref="M:Triamec.TamMath.TableImporter.SetColumnDelimiters(System.Char[])" /> method is called.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.TableImporter.ColumnRanges">
      <summary>
            Gets the 1-based column ranges to import.
            </summary>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.ColumnRangesChanged">
      <summary>
            Occurs when the <see cref="P:Triamec.TamMath.TableImporter.ColumnRanges" /> property changes.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.TableImporter.FileEncoding">
      <summary>
            Gets or sets the encoding to use
            when importing the table file.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.FileEncodingChanged">
      <summary>
            Occurs when the <see cref="P:Triamec.TamMath.TableImporter.FileEncoding" /> property changes.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.TableImporter.FileName">
      <summary>
            Gets or sets the path name of the table file.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> equals <see cref="F:System.String.Empty" />.
            </exception>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.FileNameChanged">
      <summary>
            Occurs when the <see cref="P:Triamec.TamMath.TableImporter.FileName" /> property changes.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.TableImporter.GetColumnDelimiters">
      <summary>
            Gets the Unicode characters 
            that delimit the columns in the table file.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.TableImporter.Import">
      <summary>
            Imports the table file an calls the import callback method
            for each imported table row.
            </summary>
      <returns>Returns the number of imported lines.</returns>
      <exception cref="T:System.InvalidOperationException">
        <para>
          <see cref="P:Triamec.TamMath.TableImporter.FileName" />
          <see cref="M:System.String.IsNullOrEmpty(System.String)" />.</para>
        <para>-or-</para>
        <para>The path specified by <see cref="P:Triamec.TamMath.TableImporter.FileName" />
            includes an incorrect or invalid syntax for file name, directory name, or volume label.</para>
        <para>-or-</para>
        <para>The path specified by <see cref="P:Triamec.TamMath.TableImporter.FileName" /> is invalid, such as being on an unmapped device.
            </para>
        <para>-or-</para>
        <para>The file specified by <see cref="P:Triamec.TamMath.TableImporter.FileName" /> cannot be found.</para>
        <para>-or-</para>
        <para>The <see cref="P:Triamec.TamMath.TableImporter.RowRanges" /> are not sorted in ascending order.</para>
        <para>-or-</para>
        <para>The table file has less lines than expected.</para>
        <para>-or-</para>
        <para>A line in the table file has less columns than expected.</para>
        <para>-or-</para>
        <para>One of the table values is not a number in a valid format.</para>
        <para>-or-</para>
        <para>One of the table values represents a number less than <see cref="F:System.Single.MinValue" /> or greater than
            <see cref="F:System.Single.MaxValue" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.TamMath.TableImporter.JoinColumnDelimiters">
      <summary>
            Gets or sets a value indicating whether
            to treat consecutive column delimiters as one.
            </summary>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.JoinColumnDelimitersChanged">
      <summary>
            Occurs when the <see cref="P:Triamec.TamMath.TableImporter.JoinColumnDelimiters" /> property changes.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.TableImporter.NumberFormat">
      <summary>
            Gets or sets the number format of the table values.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.
            </exception>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.NumberFormatChanged">
      <summary>
            Occurs when the <see cref="P:Triamec.TamMath.TableImporter.NumberFormat" /> property changes.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.TableImporter.RowImportCallback">
      <summary>
            Gets or sets the row import callback.
            </summary>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.RowImportCallbackChanged">
      <summary>
            Occurs when the <see cref="P:Triamec.TamMath.TableImporter.RowImportCallback" /> property changes.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.TableImporter.RowRanges">
      <summary>
            Gets the 1-based row ranges to import.
            </summary>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.RowRangesChanged">
      <summary>
            Occurs when the <see cref="P:Triamec.TamMath.TableImporter.RowRanges" /> property changes.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.TableImporter.SetColumnDelimiters(System.Char[])">
      <summary>
            Sets the Unicode characters
            that delimit the columns in the table file.
            </summary>
      <param name="delimiters">The column delimiter characters.</param>
    </member>
    <member name="P:Triamec.TamMath.TableImporter.UseDefaultEncoding">
      <summary>
            Gets or sets a value indicating whether to
            import the table file with the system's default encoding.
            </summary>
    </member>
    <member name="E:Triamec.TamMath.TableImporter.UseDefaultEncodingChanged">
      <summary>
            Occurs when the <see cref="P:Triamec.TamMath.TableImporter.UseDefaultEncoding" /> property changes.
            </summary>
    </member>
    <member name="T:Triamec.TamMath.Trigonometry">
      <summary>
            trigonometry helper Class.
            This class implements trigonometry methods which are not supported by Math library.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.ArcCosec(System.Double)">
      <summary>
            Returns the arcus cosecant of the specified value.
            </summary>
      <param name="value">The value.</param>
      <returns>
            The arcus cosecant of value, measured in radians.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.ArcCot(System.Double)">
      <summary>
            Returns the arcus cotangent of the specified value.
            </summary>
      <param name="length">A value.</param>
      <returns>The arcus cotangent of value, measured in radians.</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.ArcSec(System.Double)">
      <summary>
            Returns the arcus secant of the specified value.
            </summary>
      <param name="length">A value.</param>
      <returns>The arcus secant of value, measured in radians.</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.Cosec(System.Double)">
      <summary>
            Returns the cosecant of the specified angle.
            </summary>
      <param name="angle">An angle, measured in radians.</param>
      <returns>The cosecant of angle.</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.CosecHyperbolic(System.Double)">
      <summary>
            Returns the hyperbolic cosecant of the specified angle.
            </summary>
      <param name="angle">The angle, measured in radians.</param>
      <returns>The hyperbolic cosecant of angle.</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.Cot(System.Double)">
      <summary>
            Returns the cotangent of the specified angle.
            </summary>
      <param name="angle">An angle in, measured in radion.</param>
      <returns>The cotangent of angle</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.CotHyperbolic(System.Double)">
      <summary>
            Returns the hyperbolic cotangent of the specified angle.
            </summary>
      <param name="angle">An angle, measured in radians.</param>
      <returns>The hyperbolic cotangent of angle.</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.DegreeToRadiant(System.Double)">
      <summary>
            Converts a degree (360-periodic) angle to a radian (2*Pi-periodic) angle.
            </summary>
      <param name="angleInDegree">An angle in degree.</param>
      <returns>The angle in radian</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.RadiantToDegree(System.Double)">
      <summary>
            Converts a radian (2*Pi-periodic) angle to a degree (360-periodic) angle.
            </summary>
      <param name="angleInRadiant">An angle in radian.</param>
      <returns>The angle in degree</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.Sec(System.Double)">
      <summary>
            Returns the secant of the specified angle.
            </summary>
      <param name="angle">An angle, measured in raadians.</param>
      <returns>The secant of angle.</returns>
    </member>
    <member name="M:Triamec.TamMath.Trigonometry.SecHyperbolic(System.Double)">
      <summary>
            Returns the hyperbolic secant of the specified angle.
            </summary>
      <param name="angle">An angle, measured in radians.</param>
      <returns>The hyperbolic secant of angle</returns>
    </member>
    <member name="T:Triamec.TamMath.UnwrapStyle">
      <summary>
            Mode of <see cref="M:Triamec.TamMath.Vector.Angle(Triamec.TamMath.Vector,Triamec.TamMath.UnwrapStyle)" /> and <see cref="M:Triamec.TamMath.Vector.AngleDegree(Triamec.TamMath.Vector,Triamec.TamMath.UnwrapStyle)" />.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.UnwrapStyle.None">
      <summary>
            Don't transform the vector.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.UnwrapStyle.Unwrap">
      <summary>
            Unwraps radian angles by changing absolute jumps greater than <see cref="F:System.Math.PI" /> to their
            <c>2 * <see cref="F:System.Math.PI" /></c> complement.
            </summary>
    </member>
    <member name="F:Triamec.TamMath.UnwrapStyle.Limit">
      <summary>
            Unwraps radian angles to range from <c>-2 * <see cref="F:System.Math.PI" /> to zero.</c></summary>
    </member>
    <member name="T:Triamec.TamMath.Vector">
      <summary>Utility operations on complex vectors.</summary>
    </member>
    <member name="M:Triamec.TamMath.Vector.#ctor(System.Double[])">
      <summary>
            Constructs a vector from a one-dimensional array of double values.
            </summary>
      <param name="values">The values to initialize the vector with.</param>
      <exception cref="T:System.ArgumentNullException">The values array must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.#ctor(System.Int32)">
      <summary>
            Construct a vector with given length, initialized with zeros.
            </summary>
      <param name="length">The length of the vector.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.#ctor(System.Int32,System.Numerics.Complex)">
      <summary>
            Construct a vector with given length, initialized with a value.
            </summary>
      <param name="length">The length of the vector.</param>
      <param name="value">The value to initialize the vector with.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows/columns must be positive.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.#ctor(System.Numerics.Complex[])">
      <summary>
            Constructs a vector from a one-dimensional array of complex values.
            </summary>
      <param name="values">The values to initialize the vector with.</param>
      <exception cref="T:System.ArgumentNullException">The values array must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Abs(Triamec.TamMath.Vector)">
      <summary>
            Calculates the absolute value of the elements of the input vector.
            When the input vector X is complex, Abs(X) is the complex modulus
            (magnitude) of the elements of X.
            </summary>
      <param name="v1">The input vector.</param>
      <returns>The absolute values</returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.AbsLog(Triamec.TamMath.Vector)">
      <summary>
            Calculates the logarithmic magnitude in deciBel [dB] values from
            the given complex values in the input vector.
            </summary>
      <param name="v1">The input vector containing complex values.</param>
      <returns>
            The vector containing the magnitude values in [dB]
            </returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.AbsLog10(Triamec.TamMath.Vector)">
      <summary>
            Calculates the base ten logarithmic magnitude from the given complex values in the input vector.
            </summary>
      <param name="vector">The input vector containing complex values.</param>
      <returns>
            The vector containing the base ten logarithmic values.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="vector" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Add(System.Numerics.Complex)">
      <summary>
            In place addition of complex value to this vector.
            this.vector = this.vector + value
            </summary>
      <param name="value">The complex value to add.</param>
    </member>
    <member name="M:Triamec.TamMath.Vector.Add(Triamec.TamMath.Vector)">
      <summary>
            In place addition of vector v1 to this vector.
            this.vector = this.vector + v1
            </summary>
      <param name="v1">The vector to add.</param>
      <exception cref="T:System.ArgumentException">Vector dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Amplitude(Triamec.TamMath.Vector)">
      <summary>
            Returns the amplitude of the input real vector.
            </summary>
      <param name="v1">The input vector v1.</param>
      <returns>
        <c>max(vector)-min(vector)</c>.</returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
      <exception cref="T:System.ArgumentException">The input vector be real.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Angle(Triamec.TamMath.Vector,Triamec.TamMath.UnwrapStyle)">
      <summary>
            Calculates and returns the angle values from the given complex values.
            If <paramref name="unwrap" /> is true, angle values are unwraped.
            </summary>
      <param name="complexValues">The complex input vector.</param>
      <param name="unwrap">if set to <see langword="true" /> [unwrap].</param>
      <returns>The phase angles measured in radian.</returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.AngleDegree(Triamec.TamMath.Vector,Triamec.TamMath.UnwrapStyle)">
      <summary>
            Calculates and returns the unwraped angle values from the
            given complex values.
            </summary>
      <param name="complexValues">The complex input vector.</param>
      <param name="unwrap">if set to <see langword="true" /> [unwrap].</param>
      <returns>
            The unwraped phase angles measured in degree.
            </returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.AsImaginary">
      <summary>
            Returns conversion of this instance to a double[] array consisting of imaginary values.
            </summary>
      <returns>
            One-dimensional double array with the imaginary part of the vector elements.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.AsReal">
      <summary>
            Returns conversion of this instance to a double[] array consisting of real values.
            </summary>
      <returns>
            One-dimensional double array with the real part of the vector elements.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.Clone">
      <summary>
            Returns a deep copy of this instance.
            </summary>
      <returns>The deep copy of this vector.</returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.ComplexAmplitude(System.Double,System.Double)">
      <summary>
            Computes the complex amplitude of the signal in the vector for a single frequency.
            Uses the principle of synchron rectifier.
            </summary>
      <param name="frequency">The input signal frequency, measured in Hz.</param>
      <param name="timeResolution">The duration between adjacent values in the time vector, in seconds.</param>
      <returns>The complex value G(w) at frequency w.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters must be valid.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Concatenate(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Returns the concatenation of the two vectors v1 and v2 to one vector v = [v1; v2].
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="v2">The vector v2.</param>
      <returns>The vertical concatenated vector.</returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 or v2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Cos(Triamec.TamMath.Vector)">
      <summary>
            Computes elementwise cosinus of the input vector.
            </summary>
      <param name="v1">The input vector v1.</param>
      <returns>
            The Vector containing the cosinus values of the input vector.
            </returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Diff(Triamec.TamMath.Vector)">
      <summary>
            Returns a new vector with the approximative derivative.
            for a vector X, is [X(1)-X(0)  X(2)-X(1) ... X(n)-X(n-1)]
            </summary>
      <param name="v1">The input vector v1.</param>
      <returns>
            The approximative derivative of vector v1.
            </returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Divide(System.Numerics.Complex)">
      <summary>
            In place division of this vector by a complex value.
            this.vector = this.vector / value
            </summary>
      <param name="value">The complex value to divide with.</param>
    </member>
    <member name="M:Triamec.TamMath.Vector.Divide(Triamec.TamMath.Vector)">
      <summary>
            In place element-by-element right division of this vector by vector v1.
            this.vector = this.vector ./ v1
            </summary>
      <param name="v1">The vector used for the division.</param>
      <exception cref="T:System.ArgumentException">Vector dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Equals(System.Object)">
      <summary>
            Indicates whether another object is equal to this instance.
            </summary>
      <param name="obj">The other object to compare to.</param>
      <returns>
            Returns <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:Triamec.TamMath.Vector" />
            of the same <see cref="P:Triamec.TamMath.Vector.Length" /> and with the same elements;
            otherwise, returns <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.Equals(Triamec.TamMath.Vector)">
      <summary>
            Indicates whether another <see cref="T:Triamec.TamMath.Vector" /> is equal to this instance.
            </summary>
      <param name="vector">The vector to compare with this instance.</param>
      <returns>
            Returns <see langword="true" /> if <paramref name="vector" /> is a <see cref="T:Triamec.TamMath.Vector" />
            of the same <see cref="P:Triamec.TamMath.Vector.Length" /> and with the same elements;
            otherwise, returns <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.Exp">
      <summary>
            Returns <see cref="F:System.Math.E" />s raised to the power specified by this instance.
            </summary>
      <returns>The exponential result.</returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.GetHashCode">
      <summary>
            Gets the hashcode of this <c>Vector</c>.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="P:Triamec.TamMath.Vector.IsReal">
      <summary>
            Gets a value indicating whether this instance is real.
            </summary>
    </member>
    <member name="P:Triamec.TamMath.Vector.Item(System.Int32)">
      <summary>
            Gets or set the element indexed by <c>(i)</c>
            in the <c>Vector</c>.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of rows are invalid.</exception>
    </member>
    <member name="P:Triamec.TamMath.Vector.Length">
      <summary>
            Gets the Length of the vector.
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Vector.LinearSpace(System.Double,System.Double,System.Int32)">
      <summary>
            Returns a vector with <paramref name="steps" /> elements, linearly spaced between lower and upper.
            If <paramref name="steps" /> is less than 2, LinearSpace returns the last entry.
            </summary>
      <param name="first">The first entry.</param>
      <param name="last">The last entry.</param>
      <param name="steps">The number of required entries in the vector.</param>
      <returns>The linear spaced vector.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters steps,first and last must be valid.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.LinearSpace(System.Int32,System.Int32)">
      <summary>
            Returns a vector with integer linearly spaced elements between values first and last .
            If difference between last and first is less than 2, LinearSpace returns the last entry.
            </summary>
      <param name="first">The first entry.</param>
      <param name="last">The last entry.</param>
      <returns>
            The vector with all integers in the interval <c>[<paramref name="first" />,<paramref name="last" />]</c>.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters first and last must be valid.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.LogarithmicSpace(System.Double,System.Double,System.Int32)">
      <summary>
            Returns a vector with <paramref name="steps" /> elements, logarithmically equally spaced entries
            between decade points 10^first and 10^last.
            If <paramref name="steps" /> is less than 2, LogSpace returns the last entry.
            </summary>
      <param name="first">The exponent of the first frequency.</param>
      <param name="last">The exponent of the last frequency.</param>
      <param name="steps">The number of required values.</param>
      <returns>The logarithmically spaced vector.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The steps, first and last must be valid.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.MaxValue(Triamec.TamMath.Vector)">
      <summary>
            Gets the maximum value of the input vector.
            Returns the complex number with the larges modulus, if vector is complex.
            Returns the value with the laregest real part, if vector is not complex.
            </summary>
      <param name="v1">The input vector v1.</param>
      <returns>The maximum value found in the vector.</returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Mean(Triamec.TamMath.Vector)">
      <summary>
            Computes the average of all values in the input vector.
            </summary>
      <param name="v1">The input vector v1.</param>
      <returns>The average of the input vector values.</returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.MinValue(Triamec.TamMath.Vector)">
      <summary>
            Gets the minimum value of the input vector.
            Returns the complex number with the smallest modulus, if vector is complex.
            Returns the value with the smallest real part, if vector is not complex.
            </summary>
      <param name="v1">The input vector v1.</param>
      <returns>The maximum value found in the vector.</returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Multiply(System.Numerics.Complex)">
      <summary>
            In place multiplication of this vector by a complex value.
            this.vector = this.vector * value
            </summary>
      <param name="value">The complex value to multiply.</param>
    </member>
    <member name="M:Triamec.TamMath.Vector.Multiply(Triamec.TamMath.Vector)">
      <summary>
            In place element-by-element multiplication of vector v1 by this vector.
            this.m = this.m .* v1
            </summary>
      <param name="v1">The vector to multiply.</param>
      <exception cref="T:System.ArgumentException">Vector dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Negate">
      <summary>
            In place negation of this vector.
            this.m = -this.m
            </summary>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Addition(System.Numerics.Complex,Triamec.TamMath.Vector)">
      <summary>
            Returns sum of acomlex value and a vector.
            m = value + v1
            </summary>
      <param name="value">The complex value.</param>
      <param name="v1">The vector v1.</param>
      <returns>
            The sum of the complex value and the vector v1.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Addition(Triamec.TamMath.Vector,System.Numerics.Complex)">
      <summary>
            Returns sum of a vector and a complex value.
            m = v1 + value
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="value">The complex value.</param>
      <returns>
            The sum of the vector v1 and the complex value.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Addition(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Returns sum of vectors v1 and v2.
            m = v1 + v2
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="v2">The vector v2.</param>
      <returns>The sum of the vectors v1 and v2.</returns>
      <exception cref="T:System.ArgumentException">Vector dimensions must agree.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Division(System.Numerics.Complex,Triamec.TamMath.Vector)">
      <summary>
            Returns the division of a complex value by a vector.
            m = value ./ v1
            </summary>
      <param name="value">The complex value.</param>
      <param name="v1">The vector v1.</param>
      <returns>
            The division of the complex value and the vector.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Division(Triamec.TamMath.Vector,System.Numerics.Complex)">
      <summary>
            Returns the division of a vector by a complex value.
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="value">The complex value.</param>
      <returns>
            The division of the vector and the complex value.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Division(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Returns the element-by-element division of vectors v1 and v2.
            m = v1 ./ v2
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="v2">The vector v2.</param>
      <returns>The division of v1 and v2</returns>
      <exception cref="T:System.ArgumentException">Vector dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">Vector v1 or v2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Equality(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Equality test
            </summary>
      <param name="v1">The first vector in the comparison.</param>
      <param name="v2">The second vector in the comparison.</param>
      <returns>Returns <see langword="true" /> if vectors 
            <paramref name="v1" /> and <paramref name="v2" /> are equal or both <see langword="null" />;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_ExclusiveOr(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Computes the vector of element-by-element powers (<paramref name="baseVector" />.^<paramref name="exponentVector" />).
            <paramref name="baseVector" /> and <paramref name="exponentVector" /> must have the same dimensions unless one is a scalar.
            </summary>
      <param name="baseVector">The vector with the base values.</param>
      <param name="exponentVector">The exponent vector.</param>
      <returns>The power vector</returns>
      <exception cref="T:System.ArgumentNullException">The baseVector and the exponentVector must not be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The size of baseVector and exponentVector is too small.</exception>
      <exception cref="T:System.ArithmeticException">Vector dimensions must agree unless one is a scalar.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Implicit(System.Double)~Triamec.TamMath.Vector">
      <summary>
            Returns conversion of a double value into a vector.
            </summary>
      <param name="value">The double value.</param>
      <returns>
            The corresponding vector with one double element.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Implicit(System.Double[])~Triamec.TamMath.Vector">
      <summary>
            Returns conversion of a double[] array to a vector.
            </summary>
      <param name="doubleArray">The one-dimensional double array.</param>
      <returns>The corresponding vector.</returns>
      <exception cref="T:System.ArgumentNullException">The double array doubleArray must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Implicit(System.Numerics.Complex)~Triamec.TamMath.Vector">
      <summary>
            Returns conversion of a complex value into a vector.
            </summary>
      <param name="complexValue">The complex value.</param>
      <returns>
            The corresponding vector with one complex element.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Implicit(System.Numerics.Complex[])~Triamec.TamMath.Vector">
      <summary>
            Returns conversion of a complex[] array to a vector.
            </summary>
      <param name="complexArray">The one-dimensional complex array.</param>
      <returns>The corresponding vector.</returns>
      <exception cref="T:System.ArgumentNullException">The complex array must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Implicit(Triamec.TamMath.Vector)~System.Numerics.Complex[]">
      <summary>
            Returns conversion of a vector v1 to a Complex[] array.
            </summary>
      <param name="v1">The vector v1.</param>
      <returns>
            one-dimensional array which represents the vector.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Implicit(Triamec.TamMath.Vector)~System.Double[]">
      <summary>
            Returns conversion of a vector v1 to a double[] array.
            </summary>
      <param name="v1">The vector v1.</param>
      <returns>
            one-dimensional double array with the real part of the vector elements.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
      <exception cref="T:System.ArithmeticException">Complex vector v1 can't be returned in a double array.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Inequality(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Inequality test
            </summary>
      <param name="v1">The first vector in the comparison.</param>
      <param name="v2">The second vector in the comparison.</param>
      <returns>Returns <see langword="true" /> if vectors 
            <paramref name="v1" /> and <paramref name="v2" /> are not equal and both not <see langword="null" />;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Multiply(System.Numerics.Complex,Triamec.TamMath.Vector)">
      <summary>
            Returns the product of a complex value and a vector.
            m = v1 * value
            </summary>
      <param name="value">The complex value.</param>
      <param name="v1">The vector v1.</param>
      <returns>
            The product of the complex and the vector.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Multiply(Triamec.TamMath.Vector,System.Numerics.Complex)">
      <summary>
            Returns the product of a vector by a complex value.
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="value">The complex value.</param>
      <returns>
            The product of the vector and the complex value.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Multiply(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Returns the element-by-element multiplication of vectors v1 and v2.
            m = v1 .* v2
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="v2">The vector v2.</param>
      <returns>The product of v1 and v2</returns>
      <exception cref="T:System.ArgumentException">Vector dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">Vector v1 or v2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Subtraction(System.Numerics.Complex,Triamec.TamMath.Vector)">
      <summary>
            Returns the difference of a complex value and a vector.
            m = value - v1
            </summary>
      <param name="value">The complex value.</param>
      <param name="v1">The vector v1.</param>
      <returns>
            The difference beteen the complex and the vector v1.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Subtraction(Triamec.TamMath.Vector,System.Numerics.Complex)">
      <summary>
            Returns the difference of a vector and a complex value.
            m = v1 - value
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="value">The complex value.</param>
      <returns>
            The difference beteen the vector v1 and the complex.
            </returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_Subtraction(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Returns the difference of vectors v1 and v2.
            m = v1 - v2
            </summary>
      <param name="v1">The vector v1.</param>
      <param name="v2">The vector v2.</param>
      <returns>
            The difference beteen the vector v1 and the vector v2.
            </returns>
      <exception cref="T:System.ArgumentException">Vector dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">Vector v1 or v2 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.op_UnaryNegation(Triamec.TamMath.Vector)">
      <summary>
            Returns unary minus operation of a vector.
            m = -v1
            </summary>
      <param name="v1">The vector v1.</param>
      <returns>The negated vector.</returns>
      <exception cref="T:System.ArgumentNullException">Vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Power(Triamec.TamMath.Vector,Triamec.TamMath.Vector)">
      <summary>
            Computes the vector of element-by-element powers (<paramref name="baseVector" />.^<paramref name="exponentVector" />).
            <paramref name="baseVector" /> and <paramref name="exponentVector" /> must have the same dimensions unless one is a scalar.
            </summary>
      <param name="baseVector">The vector with the base values.</param>
      <param name="exponentVector">The exponent vector.</param>
      <returns>The power vector</returns>
      <exception cref="T:System.ArgumentNullException">The baseVector and the exponentVector must not be null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The size of baseVector and exponentVector is too small.</exception>
      <exception cref="T:System.ArithmeticException">Vector dimensions must agree unless one is a scalar.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.RandomComplex(System.Int32)">
      <summary>
            Returns a vector with uniformly distributed random Complex values in [0, 1)
            </summary>
      <param name="length">The length of the vector.</param>
      <returns>The vomplex random vector.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The length must be positive.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.RandomDoubles(System.Int32)">
      <summary>
            Returns a vector with uniformly distributed random double values in [0, 1)
            </summary>
      <param name="length">The length of the vector.</param>
      <returns>The doubles random vector.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The length must be positive.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Sin(Triamec.TamMath.Vector)">
      <summary>
            Computes elementwise sinus of the input vector.
            </summary>
      <param name="v1">The input vector v1.</param>
      <returns>
            The Vector containing the sinus values of the input vector.
            </returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.Subtract(System.Numerics.Complex)">
      <summary>
            In place subtraction of complex value from this vector.
            this.vector = this.vector - value
            </summary>
      <param name="value">The complex value to subtract.</param>
    </member>
    <member name="M:Triamec.TamMath.Vector.Subtract(Triamec.TamMath.Vector)">
      <summary>
            In place substraction of vector v1 from this vector.
            this.vector = this.vector - v1
            </summary>
      <param name="v1">The vector to subtract.</param>
      <exception cref="T:System.ArgumentException">Vector dimensions must agree.</exception>
      <exception cref="T:System.ArgumentNullException">The vector v1 must not be null.</exception>
    </member>
    <member name="M:Triamec.TamMath.Vector.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.System#ICloneable#Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:Triamec.TamMath.Vector.Unwrap(Triamec.TamMath.Vector)">
      <summary>
            unwraps radian angles by changing absolute jumps greater than pi
            to their 2*pi complement.
            </summary>
      <param name="angles">The angles vector.</param>
      <returns>The unwraped angles vector.</returns>
      <exception cref="T:System.ArgumentNullException">The input vector must not be null.</exception>
    </member>
    <member name="T:Triamec.Threading.AsyncCallbackContext">
      <summary>
            Asynchronous operation context for the <see cref="T:Triamec.Threading.AsyncCallbackSorter`1" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Threading.AsyncCallbackContext.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Threading.AsyncCallbackContext</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Triamec.Threading.AsyncCallbackSorter`1">
      <summary>
            Maintains call order in the context of asynchronous operations using <see cref="T:System.AsyncCallback" />.
            </summary>
      <typeparam name="TContext"></typeparam>
    </member>
    <member name="M:Triamec.Threading.AsyncCallbackSorter`1.#ctor(System.Action{System.AsyncCallback,`0},System.Action{System.IAsyncResult},System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Threading.AsyncCallbackSorter`1" /> class.
            </summary>
      <param name="submitter">
            A method that passes the specified state object and callback to the asynchronous operation.
            </param>
      <param name="callback">
            The callback which will be invoked in the same order than <see cref="M:Triamec.Threading.CallbackSorter`1.Submit(`0)" /> was
            called. Only one <see cref="T:System.Threading.Thread" /> will execute the callback at any time.
            </param>
      <param name="operationCount">
            The maximal number of pending asynchronous operations which will be setup.
            </param>
    </member>
    <member name="T:Triamec.Threading.CallbackContext">
      <summary>
            Asynchronous operation context for the <see cref="T:Triamec.Threading.CallbackSorter`1" /> class.
            </summary>
    </member>
    <member name="M:Triamec.Threading.CallbackContext.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Threading.CallbackContext</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Triamec.Threading.CallbackSorter`1">
      <summary>
            Maintains call order in the context of asynchronous operations.
            </summary>
      <typeparam name="TContext">The asynchronous state passed to the asynchronous operation.</typeparam>
    </member>
    <member name="M:Triamec.Threading.CallbackSorter`1.#ctor(System.Action{System.Action{`0},`0},System.Action{`0},System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.Threading.CallbackSorter`1" /> class.
            </summary>
      <param name="submitter">
            A method that passes the specified state object and callback to the asynchronous operation.
            </param>
      <param name="callback">
            The callback which will be invoked in the same order than <see cref="M:Triamec.Threading.CallbackSorter`1.Submit(`0)" /> was called.
            Only one <see cref="T:System.Threading.Thread" /> will execute the callback at any time.
            </param>
      <param name="operationCount">
            The maximal number of pending asynchronous operations which will be setup.
            </param>
    </member>
    <member name="M:Triamec.Threading.CallbackSorter`1.Submit(`0)">
      <summary>
            Executes an asynchronous operation.
            </summary>
      <param name="context">The context to pass to the submitter specified in the constructor.</param>
      <exception cref="T:System.InvalidOperationException">
            The call leads to more pending operations as initially specified in the constructor.
            </exception>
    </member>
    <member name="T:Triamec.Threading.ReferenceCounter">
      <summary>
            Simple reference counter.
            </summary>
    </member>
    <member name="M:Triamec.Threading.ReferenceCounter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.Threading.ReferenceCounter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Triamec.Threading.ReferenceCounter.Decrement">
      <summary>
            Decrements this instance.
            </summary>
      <returns>
            Whether the number of calls to <see cref="M:Triamec.Threading.ReferenceCounter.Increment" /> and <see cref="M:Triamec.Threading.ReferenceCounter.Decrement" /> are equal after this
            call.
            </returns>
      <exception cref="T:System.InvalidOperationException">The number of calls to <see cref="M:Triamec.Threading.ReferenceCounter.Increment" /> and
              <see cref="M:Triamec.Threading.ReferenceCounter.Decrement" /> are equal prior this call. If occurring in a multithreaded scenario, the result
              of simultaneous calls to <see cref="M:Triamec.Threading.ReferenceCounter.Increment" /> is undefined.
              </exception>
    </member>
    <member name="M:Triamec.Threading.ReferenceCounter.Increment">
      <summary>
            Increments this instance.
            </summary>
      <returns>
            Whether the number of calls to <see cref="M:Triamec.Threading.ReferenceCounter.Increment" /> and <see cref="M:Triamec.Threading.ReferenceCounter.Decrement" /> are equal before this
            call.
            </returns>
    </member>
    <member name="P:Triamec.Threading.ReferenceCounter.Positive">
      <summary>
            Gets a value indicating whether the number of calls to <see cref="M:Triamec.Threading.ReferenceCounter.Increment" /> is greater than the calls to
            <see cref="M:Triamec.Threading.ReferenceCounter.Decrement" />.
            </summary>
    </member>
    <member name="M:Triamec.Threading.ReferenceCounter.Reset">
      <summary>
            Resets the instance.
            </summary>
    </member>
    <member name="T:Triamec.Threading.SimpleSynchronizationContext">
      <summary>
            Message marshaller delivering events to a private <see cref="T:System.Threading.Thread" /> with selectable
            <see cref="T:System.Threading.ThreadPriority" />.
            </summary>
    </member>
    <member name="M:Triamec.Threading.SimpleSynchronizationContext.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Triamec.Threading.SimpleSynchronizationContext.GeneralOwner">
      <summary>
            Gets an <see cref="T:System.AppDomain" /> wide singleton <see cref="T:System.Threading.SynchronizationContext" /> .
            </summary>
    </member>
    <member name="P:Triamec.Threading.SimpleSynchronizationContext.GuaranteedSpecificAssociatedStaThread">
      <summary>
            Gets the <see cref="P:System.Threading.SynchronizationContext.Current" /> synchronization context or <see cref="P:Triamec.Threading.SimpleSynchronizationContext.GeneralOwner" />,
            if the former isn't associated with a specific <see cref="T:System.Threading.Thread" /> in a
            <see cref="F:System.Threading.ApartmentState.STA">single threaded apartment.</see>.
            </summary>
    </member>
    <member name="P:Triamec.Threading.SimpleSynchronizationContext.GuaranteedSpecificAssociatedThread">
      <summary>
            Gets the <see cref="P:System.Threading.SynchronizationContext.Current" /> synchronization context or <see cref="P:Triamec.Threading.SimpleSynchronizationContext.GeneralOwner" />,
            if the former isn't associated with a specific <see cref="T:System.Threading.Thread" />.
            </summary>
    </member>
    <member name="M:Triamec.Threading.SimpleSynchronizationContext.HasSpecificAssociatedThread(System.Threading.SynchronizationContext)">
      <summary>
            Indicates whether the specified <see cref="T:System.Threading.SynchronizationContext" /> uses one specific <see cref="T:System.Threading.Thread" />
            for posting messages.
            </summary>
      <param name="context">The <see cref="T:System.Threading.SynchronizationContext" /> to examine.</param>
    </member>
    <member name="M:Triamec.Threading.SimpleSynchronizationContext.OperationCompleted">
      <summary>
            Decreases the instance counter. Needs to be paired with <see cref="M:Triamec.Threading.SimpleSynchronizationContext.OperationStarted" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
            This method was called more than <see cref="M:Triamec.Threading.SimpleSynchronizationContext.OperationStarted" />.
            </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
            A callback passed with <see cref="M:Triamec.Threading.SimpleSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" /> caused an exception.
            </exception>
    </member>
    <member name="M:Triamec.Threading.SimpleSynchronizationContext.OperationStarted">
      <summary>
            Increases the instance counter. Needs to be paired with <see cref="M:Triamec.Threading.SimpleSynchronizationContext.OperationCompleted" />.
            </summary>
    </member>
    <member name="M:Triamec.Threading.SimpleSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Enqueues a new callback.
            </summary>
      <param name="d">The callback to execute on the private <see cref="T:System.Threading.Thread" />.</param>
      <param name="state">The object passed to the callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
            A callback previously passed with <see cref="M:Triamec.Threading.SimpleSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" /> caused an exception.
              </exception>
    </member>
    <member name="M:Triamec.Threading.SimpleSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Synchronously executes the specified callback.
            </summary>
      <param name="d">The callback to execute on the private <see cref="T:System.Threading.Thread" />.</param>
      <param name="state">The object passed to the callback.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <para>A callback previously passed with <see cref="M:Triamec.Threading.SimpleSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" /> caused an exception.</para>
        <para>-or-</para>
        <para>
          <paramref name="d" /> threw an exception.</para>
      </exception>
    </member>
    <member name="T:Triamec.Threading.ThreadSafeMutex">
      <summary>
        <see cref="T:System.Threading.Mutex" /> wrapper maintaining <see cref="T:System.Threading.Thread" /> ownership.
            </summary>
    </member>
    <member name="M:Triamec.Threading.ThreadSafeMutex.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.Threading.ThreadSafeMutex" /> class.
            </summary>
      <param name="name">A unique lock name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" /> or
              <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.UnauthorizedAccessException">A mutex with the same name has already been acquired.
              </exception>
    </member>
    <member name="M:Triamec.Threading.ThreadSafeMutex.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Triamec.Threading.ThreadSafeMutex.Name">
      <summary>
            Gets the name of the <see cref="T:System.Threading.Mutex" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.AddressControlCommand">
      <summary>
            The commands of the <see cref="F:Triamec.TriaLink.ServiceRequestCommand.AddressControl" /> request.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AddressControlCommand.Identify">
      <summary>
            Asks a station to send an <see cref="T:Triamec.TriaLink.IAddressControlResponse" /> packet containing its
            <see cref="T:Triamec.TriaLink.UniqueDeviceId" /> and hardware identifier.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AddressControlCommand.AssumeAddress">
      <summary>
            Gives a station having a specified <see cref="T:Triamec.TriaLink.UniqueDeviceId" /> a new specified address.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AddressControlCommand.Reset">
      <summary>
            Tells a station to reset its address to the illegal address <c>0</c>.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.AxisControlCommands">
      <summary>
            Specifies axis control commands for use in <see cref="M:Triamec.TriaLink.TriaLinkProtocol.ControlAxis(System.Object,Triamec.TriaLink.Sessions.IAxisControlResponseHandler,Triamec.TriaLink.Groups.IAddressee,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.AxisControlCommands)" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisControlCommands.Disable">
      <summary>Disable the axis.</summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisControlCommands.None">
      <summary>No command.</summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisControlCommands.Enable">
      <summary>Enable the axis.</summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisControlCommands.ResetError">
      <summary>Reset the axis error flag.</summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisControlCommands.ResetErrorAndDisable">
      <summary>Reset the axis error flag and disables the axis, if not already disabled.</summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisControlCommands.ResetErrorAndEnable">
      <summary>Reset the axis error flag and enables the axis, if not already enabled.</summary>
    </member>
    <member name="T:Triamec.TriaLink.AxisErrorIdentification">
      <summary>
            Error identification for the axis.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.None">
      <summary>
            No errors encountered.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.PositionErrorLimit">
      <summary>
            The position error limit of the position controller is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.IdErrorLimit">
      <summary>
            The current error limit of the D current controller is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.IqErrorLimit">
      <summary>
            The current error limit of the Q current controller is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.IdIqErrorLimit">
      <summary>
            The current error limit of the D and Q current controller is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.EncoderSubResolutionError">
      <summary>
            The sub-resolution of the encoder is ambiguous. Possible cause: faulty wiring.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.EnablingNoMotorAxis">
      <summary>
            Enabling of an Axis with no motor configuration is not possible.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.EncoderError">
      <summary>
            Encoder works not as expected. (no or too low signal from encoder)
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.EncoderShort">
      <summary>
            The encoder supply is shorted.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.DigOutputShort">
      <summary>
            A digital output is shorted.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.MotorI2t">
      <summary>
            The I2t limit of the motor is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.PowerBridgeI2tLimit">
      <summary>
            The I2t limit of the power bridge is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.MotorPeakCurrentLimit">
      <summary>
            The peak current limit of the motor is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.PowerBridgePeakCurrentLimit">
      <summary>
            The peak current limit of the power bridge is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.EncoderConfigurationError">
      <summary>
            Two encoders of different type point to the same hardware.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.OptionModuleFailure">
      <summary>
            An encoder points to an option module which is not present or a present option module did not boot.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.EncoderDataBusError">
      <summary>
            Encoder data bus not connected, or communication failed.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.EncoderParameterError">
      <summary>
            This encoder type is not supported.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.NoDigitalEncoderPersistency">
      <summary>
            The encoder does not contain persistency data. Please save using Commands/PositionController/EncoderPersistency.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.PhaseShort">
      <summary>
            A short (phase-to-phase or phase-to-earth) was detected in PWM during bridge power-up.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.SynchronizationLost">
      <summary>
            The stream interpolation synchronization is lost.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.GantryTrackingError">
      <summary>
            The distance between the two gantry axes was larger than the GantryDeviationLimit.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.Commutation600HzLimit">
      <summary>
            The 600Hz commutation frequency limit of this product was reached.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.UnspecifiedPositionUnit">
      <summary>
            The position unit is not specified or not known.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.MotorTemperatureLimit">
      <summary>
            The motor temperature limit was reached.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.AxisParameterError">
      <summary>
            A parameter of this axis is unknown.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.AxisCommandError">
      <summary>
            A command of this axis is unknown.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisErrorIdentification.SafeError">
      <summary>
            The Safety mdoule threw this axis error.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.AxisEvent">
      <summary>
            Events for the axis state machine.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.None">
      <summary>
            No event.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.SwitchOn">
      <summary>
            Event for switching on the drive.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.SwitchOff">
      <summary>
            Event for switching off the drive.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.EnableAxis">
      <summary>
            Event for enabling the axis.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.DisableAxis">
      <summary>
            Event for disabling the axis.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.MoveCommand">
      <summary>
            Event for move command.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.ErrorStop">
      <summary>
            Event to rise an error with a move stop.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.ErrorDisable">
      <summary>
            Event to rise an error with a disable axis.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.ErrorStopDisable">
      <summary>
            Event to rise an error with a stop and disable axis.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.ResetError">
      <summary>
            Event to reset axis errors.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisEvent.ChangeUnit">
      <summary>
            Event to change axis units.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.AxisNumbers">
      <summary>
            The axis numbers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisNumbers.None">
      <summary>No axis</summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisNumbers.Axis0">
      <summary>Axis0</summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisNumbers.Axis1">
      <summary>Axis1</summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisNumbers.Axis0And1">
      <summary>Axis0And1</summary>
    </member>
    <member name="T:Triamec.TriaLink.AxisState">
      <summary>
            Defines the states of the axis state machine which is used to control motion.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.Startup">
      <summary>
            This is the state in which the axis is, if drive is not operational.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.Disabled">
      <summary>
            Switched on but not enabled.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.Enabling">
      <summary>
            During enabling phase.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.Standstill">
      <summary>
            Enabled and not moving.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.DiscreteMotion">
      <summary>
            Motion with defined end.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.ContinuousMotion">
      <summary>
            Continuous motion with constant velocity.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.DirectCoupledMotion">
      <summary>
            Direct coupled motion used for slave path planner.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.TamaCoupledMotion">
      <summary>
            Tama indirect coupled motion used for slave path planner.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.Stopping">
      <summary>
            Stopping the move.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.ErrorStopping">
      <summary>
            Stopping the move with maximum dynamics; error state.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.AxisState.Disabling">
      <summary>
            Preparing to disable control, for example, to put the brakes on.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.BootManager">
      <summary>
            The boot manager executes the boot sequence for the Tria-Link.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.BootManager.#ctor(Triamec.TriaLink.ITriaLinkBootProtocol)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.BootManager" /> class.
            </summary>
      <param name="protocol">The Tria-Link protocol implementation.</param>
    </member>
    <member name="M:Triamec.TriaLink.BootManager.AcquireStations">
      <summary>
            Identifies stations allowing for recovery.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
            The link is not ready.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.BootManager.FindAdapterStation(System.Boolean,System.Boolean)">
      <summary>
            Finds the <see cref="P:Triamec.TriaLink.Groups.GroupManager.AdapterStation" />.
            </summary>
      <param name="acceptInvalidAddress">If set to <see langword="true" />,
            accepts the adapter station to have no address (<see cref="F:Triamec.TriaLink.Groups.Addressee.BootAddress" />).</param>
      <param name="reset">Whether to include additional reset logic prior find.</param>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Adapter station has no address.</exception>
    </member>
    <member name="P:Triamec.TriaLink.BootManager.GroupManager">
      <summary>
            Gets the group manager used by this instance.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.BootManager.IdentifyStations">
      <summary>
            (Re-)attaches the endpoints and (re-)identifies all <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
            The Tria-Link identifying procedure failed.
            </exception>
    </member>
    <member name="P:Triamec.TriaLink.BootManager.IsClosed">
      <summary>
            Indicates whether the bus is available and functional.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.BootManager.Protocol">
      <summary>
            Gets the Tria-Link protocol.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.BootManager.StartLink">
      <summary>
            Ensures the data-link layer works properly.
            </summary>
      <returns>
            Whether the link is ready to use.
            </returns>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">The data-link layer could not be set up correctly.</exception>
    </member>
    <member name="F:Triamec.TriaLink.BootManager.STATION_RESPONSE_WAIT">
      <summary>
            The thread sleep time
            when waiting for a Tria-Link response,
            in milliseconds.
            <para>The value equals the <c>StationBootResponseWait</c> application setting.</para></summary>
    </member>
    <member name="M:Triamec.TriaLink.BootManager.TryFindAdapterAddress(Triamec.TriaLink.Groups.ITriaLinkStation,System.Byte@)">
      <summary>
            Tries to find the adapter address within sending of request of identification.
            </summary>
      <returns>
            Returns <see langword="true" /> if adapter address is found.
            </returns>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Failed to send the message.</exception>
    </member>
    <member name="T:Triamec.TriaLink.BreakingProductChange">
      <summary>
            Record specifying a firmware release whose update cannot be accomplished using the TAM API.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.BreakingProductChange.BaseFirmwareId">
      <summary>
            Gets or sets the base firmware id.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.BreakingProductChange.FirmwareId">
      <summary>
            Gets or sets the version of the firmware which is not compatible with previous firmwares.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.BridgeMode">
      <summary>
            Access to the Tria-Link ring granted to auxiliary connections.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.BridgeMode.Disabled">
      <summary>
            Only the device is visible.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.BridgeMode.Ethernet">
      <summary>
            All stations of the Tria-Link ring are accessible via a network connection.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.BridgePowerSwitch">
      <summary>
            Settings of the power section switch.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.BridgePowerSwitch.Off">
      <summary>
            Power section off.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.BridgePowerSwitch.On">
      <summary>
            Power section on.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ChecksumCalculator">
      <summary>
            Provides checksum calculation specific to the Tria-Link object model.	
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ChecksumCalculator.GetExpectedChecksum(System.Int32,System.Int32,Triamec.TriaLink.TamValue32[])">
      <summary>
            Calculate a checksum over a range of elements in the cached array
            </summary>
      <param name="startIndex">Index of the first element in the range</param>
      <param name="numberOfElements">Number of elements in the range</param>
      <param name="values">The values.</param>
      <returns>An MD5 checksum</returns>
    </member>
    <member name="T:Triamec.TriaLink.Command">
      <summary>
            Identifiers for isochronous and service packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.NoOperation">
      <summary>
            No operation.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.SendSubscriptionValues">
      <summary>
            Identifier for isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.Stream3rdOrderValues">
      <summary>
            cyclic 3rd order stream values.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.Stream4rdOrderValues">
      <summary>
            cyclic 4rd order stream values.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.UriReadRequest">
      <summary>
            Identifier for reading values from individual registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.UriReadResponse">
      <summary>
            Identifier for acknowledging individually read registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.UriWriteRequest">
      <summary>
            Identifier for writing values to individual registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.UriWriteResponse">
      <summary>
            Identifier for acknowledging individually written registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.MoveDoubleRequest">
      <summary>
            Identifier for path planner requests with double precision floating point positions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.MoveDoubleResponse">
      <summary>
            Identifier for acknowledging path planner requests with double precision floating point positions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ResetSubscriptionsRequest">
      <summary>
            Identifier for resetting subscriptions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ResetSubscriptionsResponse">
      <summary>
            Identifier for acknowledging reset subscriptions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.PublishRequest">
      <summary>
            Identifier for preparing the publication of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.PublishResponse">
      <summary>
            Identifier for acknowledging the preparation of publishing isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.SubscribeRequest">
      <summary>
            Identifier for setting up retrieval of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.SubscribeResponse">
      <summary>
            Identifier for acknowledging the setup for retrieval of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.EnableSubscriptionRequest">
      <summary>
            Identifier for enabling the delivery of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.EnableSubscriptionResponse">
      <summary>
            Identifier for acknowledging the enabled delivery of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.DriveControlRequest">
      <summary>
            Identifier for controlling drives.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.DriveControlResponse">
      <summary>
            Identifier for acknowledging drive control requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.AxisControlRequest">
      <summary>
            Identifier for preparing axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.AxisControlResponse">
      <summary>
            Identifier for acknowledging the preparation of axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.TamaControlRequest">
      <summary>
            Identifier for controlling the Tama virtual machine.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.TamaControlResponse">
      <summary>
            Identifier for acknowledge Tama virtual machine control requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.MoveFloatRequest">
      <summary>
            Identifier for commanding moves with float or Float40 typed positions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.MoveFloatResponse">
      <summary>
            Identifier for acknowledging move commands with float or Float40 typed positions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.TestSignalRequest">
      <summary>
            Identifier for controlling the test signal generator.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.TestSignalResponse">
      <summary>
            Identifier for acknowledging requests to the test signal generator.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ReadRegisterRequest">
      <summary>
            Identifier for requests for reading individual registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ReadRegisterResponse">
      <summary>
            Identifier for delivering individual register values.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.WriteRegisterRequest">
      <summary>
            Identifier for writing values to individual registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.WriteRegisterResponse">
      <summary>
            Identifier for acknowledging individually written registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ReadRegisterRangeRequest">
      <summary>
            Identifier for requests for reading a range of registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ReadRegisterRangeResponse">
      <summary>
            Identifier for delivering a range of register values.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.WriteRegisterRangeRequest">
      <summary>
            Identifier for writing values to a range of registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.WriteRegisterRangeResponse">
      <summary>
            Identifier for acknowledging written register ranges.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.FirmwareControlRequest">
      <summary>
            Identifier for controlling the firmware.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.FirmwareStatusResponse">
      <summary>
            Identifier for acknowledging requests for controlling the firmware.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ReadFirmwareRangeRequest">
      <summary>
            Identifier for requesting firmware binary code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ReadFirmwareRangeResponse">
      <summary>
            Identifier for delivering firmware binary code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.WriteFirmwareRangeRequest">
      <summary>
            Identifier for programming firmware binary code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.WriteFirmwareRangeResponse">
      <summary>
            Identifier for acknowledging the programming of firmware binary code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ReadIdentificationRequest">
      <summary>
            Identifier for requesting device identifications.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ReadIdentificationResponse">
      <summary>
            Identifier for delivering device identifications.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.TimeUpdateRequest">
      <summary>
            Identifier for time update requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ControlStartupRequest">
      <summary>
            Identifier for control startup requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ControlStartupResponse">
      <summary>
            Identifier for control startup responses.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ControlStatisticsRequest">
      <summary>
            Identifier for control statistics requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.ControlStatisticsResponse">
      <summary>
            Identifier for control statistics responses.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.AddressControlRequest">
      <summary>
            Identifier for address control requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.AddressControlResponse">
      <summary>
            Identifier for address control responses.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.IPTunnelRequest">
      <summary>
            Identifier for Ethernet over Tria-Link requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Command.IPTunnelResponse">
      <summary>
            Identifier for Ethernet over Tria-Link responses.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ConnectionHeader">
      <summary>
            The packet header of the connection layer.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ConnectionHeader.#ctor(Triamec.TriaLink.TamValue32[])">
      <summary>
            Constructor of a connection header.
            </summary>
      <param name="packetData">The raw packet data to create the connection header from.</param>
    </member>
    <member name="P:Triamec.TriaLink.ConnectionHeader.Destination">
      <summary>
            Gets the destination address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ConnectionHeader.DestinationPort">
      <summary>
            Gets the destination's <see cref="T:Triamec.TriaLink.Port" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ConnectionHeader.EndpointType">
      <summary>
            Gets the endpoint type.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ConnectionHeader.ExpectResponse">
      <summary>
            Gets the "expect response" flag.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ConnectionHeader.Source">
      <summary>
            Gets the source address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ConnectionHeader.SourcePort">
      <summary>
            Gets the source's <see cref="T:Triamec.TriaLink.Port" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ConnectionHeader.ToString">
      <summary>
            Returns a description of the fields in this <see cref="T:Triamec.TriaLink.ConnectionHeader" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.CurrentControllerTestSignalCommand">
      <summary>
            Test signal generator command.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.CurrentControllerTestSignalCommand.NoCommand">
      <summary>
            No command.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.CurrentControllerTestSignalCommand.SignalActive">
      <summary>
            Activate the test signal generator.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.CurrentControllerTestSignalCommand.Stop">
      <summary>
            Stop the test signal generator.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.CurrentControllerTestSignalCommand.PwmVectorModulationActive">
      <summary>
            Activate the test signal generator in the mode PWM vector modulation.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.CurrentControllerTestSignalCommand.PwmVectorRotationActive">
      <summary>
            Activate the test signal generator in the mode PWM vector rotation.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.DeviceErrorIdentification">
      <summary>
            Error identification for the device.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.None">
      <summary>
            No errors encountered.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.LinkNotReady">
      <summary>
            The device isn't synchronized with its real-time link.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.ComputingTime">
      <summary>
            The limit of the computing time is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.I2tLimitMotorOrDrive">
      <summary>
            The I2t limit of the motor or drive is exceeded. This error only occurs for drive-type devices.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.CurrentLimitMotorOrDrive">
      <summary>
            The limit of the current vector is exceeded. This error only occurs for drive-type devices.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.DCBusVoltageOutOfRange">
      <summary>
            The DC-bus voltage is out of range. This error only occurs for drive-type devices.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.DCBusOverCurrentLimit">
      <summary>
            The limit of the DC-bus current is exceeded. Also reported by old drive firmware when the mid voltage is out of range.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.TemperatureLimit">
      <summary>
            The limit of a temperature is exceeded.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.VoltageOutOfRange">
      <summary>
            At least one operating voltage is out of range.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.ExternalError">
      <summary>
            The external error is triggered.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.NoValidTamaCodeAvailable">
      <summary>
            Running Tama without valid Tama code error.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.InvalidPersistentParameters">
      <summary>
            Persistent parameters are not compatible with running firmware.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.TamaOutOfMemory">
      <summary>
            While executing a Tama program, the program memory became full during heap allocation. Memory is typically allocated on the heap when creating new instances of reference types, including arrays.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.TamaDivisionByZero">
      <summary>
            While executing a Tama program, an attempt was made to divide by zero.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.TamaNullReference">
      <summary>
            While executing a Tama program, an object property was requested, but there was a null reference.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.TamaIndexOutOfRange">
      <summary>
            While executing a Tama program, an array element index was outside the range of the array.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.TamaCorruptedState">
      <summary>
            While executing a Tama program, Tama program state was corrupted. This value is returned when an unknown operation code is encountered.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.MonitorIsNotRunning">
      <summary>
            Hardware monitor on the device is not running.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.InvalidEepromData">
      <summary>
            EEPROM data are not consistent.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.EepromWriteOperationFailed">
      <summary>
            EEPROM write data is not possible.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.SafeTorqueOffActiveWarning">
      <summary>
            SafeTorqueOff (STO) is active.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.SafeTorqueOffInconsistent">
      <summary>
            SafeTorqueOff (STO) safe mode due to inconsistent channels detected (only one contact is closed).
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.SafeTorqueOffStartupTestFailure">
      <summary>
            SafeTorqueOff (STO) safe mode due to a Startup test failure. As of TSD firmware release 6.9.0, this error is shown as SafeTorqueOffSafeMode with details in the log. 
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.SafeTorqueOffSafeMode">
      <summary>
            SafeTorqueOff (STO) safe mode due to any safe mode reason. Up to TSD firmware release 6.9.0, this error was used for SafeTorqueOffPulseTestFailure. 
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.SafeTorqueOffVoltOrTempLimit">
      <summary>
            SafeTorqueOff (STO) safe mode due to Temperature or voltage limit on safety Monitor. As of TSD firmware release 6.9.0, this error is shown as SafeTorqueOffSafeMode with details in the log. 
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.PhaseShort">
      <summary>
            A short (phase-to-phase or phase-to-earth) was detected in PWM during bridge power-up.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.MidVoltageOutOfRange">
      <summary>
            The mid voltage is out of range.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.PowerSupplyOrBrakeNotOk">
      <summary>
            Power supply or brake is not OK. Not all power lines available or line disturbance or brake issues.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.CommandError">
      <summary>
            A Command was not successful.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.ParameterError">
      <summary>
            Found an unknown or inconsistent Parameter.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceErrorIdentification.BootError">
      <summary>
            Error during boot. Check errorMessage for details.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.DeviceEvent">
      <summary>
            Events for the device state machine.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.None">
      <summary>
            No event.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.InitDone">
      <summary>
            Event when initialization of the device is done.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.SetMotorConfiguration">
      <summary>
            Event for setting motor base configuration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.SwitchOn">
      <summary>
            Event for power bridge switch on.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.SwitchOff">
      <summary>
            Event for power bridge switch off.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.FaultStopOff">
      <summary>
            Event for fault with stop and power off action.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.FaultOff">
      <summary>
            Event for fault with power off action.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.ResetFault">
      <summary>
            Event for reset of fault condition.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.StopAllAxes">
      <summary>
            Event which stops all axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.StopDisableAllAxes">
      <summary>
            Event which stops and disables all axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.DisableAllAxes">
      <summary>
            Event which disables all axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceEvent.Reboot">
      <summary>
            Event which reboots the drive.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.DeviceState">
      <summary>
            Defines the states of the device state machine.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceState.StartUp">
      <summary>
            Starting up the software, initialization and self-test software.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceState.NotReadyToSwitchOn">
      <summary>
            Software and Hardware ready to change mode but power on is not possible.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceState.ReadyToSwitchOn">
      <summary>
            Software and Hardware ready to change mode or switch power on.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceState.Operational">
      <summary>
            Drive is operating, high Voltage is applied to the drive. For some devices, this state is equal to the ReadyToSwitchOn state.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceState.FaultReactionActive">
      <summary>
            A fault reaction is in progress.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DeviceState.FaultPending">
      <summary>
            A fault is pending to reset.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.DriveControlCommands">
      <summary>
            Specifies drive control commands
            for use in <see cref="M:Triamec.TriaLink.TriaLinkProtocol.ControlDrive(System.Object,Triamec.TriaLink.Sessions.IDriveControlResponseHandler,Triamec.TriaLink.Groups.IAddressee,System.Boolean,Triamec.TriaLink.DriveControlCommands,Triamec.TriaLink.DriveStopCommand,Triamec.TriaLink.MotorBaseConfiguration,Triamec.TriaLink.BridgePowerSwitch)" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveControlCommands.None">
      <summary>No command.</summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveControlCommands.EmergencyStop">
      <summary>Executes an emergency stop.</summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveControlCommands.ResetFault">
      <summary>Resets a drive fault.</summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration">
      <summary>Sets the motor base configuration.</summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower">
      <summary>Sets the power section switch.</summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveControlCommands.Restart">
      <summary>Restarts the device firmware.</summary>
    </member>
    <member name="T:Triamec.TriaLink.DriveStopCommand">
      <summary>
            Type of the drive emergency stop command.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveStopCommand.None">
      <summary>
            No drive emergency stop.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveStopCommand.StopAllAxes">
      <summary>
            Execute an emergency stop for all axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.DriveStopCommand.StopDisableAllAxes">
      <summary>
            Execute an emergency stop for and disable all axes.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.EtherCatTime">
      <summary>
            Serializer for EtherCAT distributed clock values.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.#ctor(System.Int64)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.EtherCatTime" /> structure.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance. </param>
      <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.Equals(Triamec.TriaLink.EtherCatTime)">
      <summary>
            Gets a value indicating whether this and the specified EtherCAT distributed clock values are equal.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.FromDateTime(System.DateTime)">
      <summary>
            Computes an <see cref="T:Triamec.TriaLink.EtherCatTime" /> value from the specified <see cref="T:System.DateTime" /> value.
            </summary>
      <returns>
            The date or the default <see cref="T:Triamec.TriaLink.EtherCatTime" /> value if <paramref name="dateTime" /> is the default
            value.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dateTime" /> is not in the range
            [<see cref="F:Triamec.TriaLink.EtherCatTime.UniversalZeroPoint" />, <see cref="F:Triamec.TriaLink.EtherCatTime.MaxDateTime" />] and not the default <see cref="T:System.DateTime" />
            value.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="F:Triamec.TriaLink.EtherCatTime.MaxDateTime">
      <summary>
            Gets the largest possible UTC <see cref="T:System.DateTime" /> which can be passed to <see cref="M:Triamec.TriaLink.EtherCatTime.FromDateTime(System.DateTime)" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.op_Equality(Triamec.TriaLink.EtherCatTime,Triamec.TriaLink.EtherCatTime)">
      <summary>
            Gets a value indicating whether the two specified EtherCAT distributed clock values are equal.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.op_Explicit(Triamec.TriaLink.EtherCatTime)~Triamec.TriaLink.TamValue32Pair">
      <summary>
            Converts the specified EtherCAT distributed clock value into a Tria-Link feasible representation.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.op_Explicit(Triamec.TriaLink.TamValue32Pair)~Triamec.TriaLink.EtherCatTime">
      <summary>
            Converts a raw Tria-Link value into an EtherCAT distributed clock value.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.op_GreaterThan(Triamec.TriaLink.EtherCatTime,Triamec.TriaLink.EtherCatTime)">
      <summary>
            Gets a value indicating whether the first specified EtherCAT distributed clock value is greater than the
            second.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.op_Inequality(Triamec.TriaLink.EtherCatTime,Triamec.TriaLink.EtherCatTime)">
      <summary>
            Gets a value indicating whether the two specified EtherCAT distributed clock values differ.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.op_LessThan(Triamec.TriaLink.EtherCatTime,Triamec.TriaLink.EtherCatTime)">
      <summary>
            Gets a value indicating whether the first specified EtherCAT distributed clock value is less than the
            second.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.op_Subtraction(Triamec.TriaLink.EtherCatTime,Triamec.TriaLink.EtherCatTime)">
      <summary>
            Computes how much more current the first EtherCAT distributed clock value is compared to the second.
            </summary>
      <returns>The difference in nanoseconds.</returns>
    </member>
    <member name="M:Triamec.TriaLink.EtherCatTime.ToDateTime">
      <summary>
            Computes the corresponding <see cref="T:System.DateTime" />.
            </summary>
      <returns>
            The date in universal time or the default <see cref="T:System.DateTime" /> value if this is the default
            <see cref="T:Triamec.TriaLink.EtherCatTime" />.
            </returns>
    </member>
    <member name="F:Triamec.TriaLink.EtherCatTime.UniversalZeroPoint">
      <summary>
            Gets the smallest possible UTC <see cref="T:System.DateTime" /> which can be passed to <see cref="M:Triamec.TriaLink.EtherCatTime.FromDateTime(System.DateTime)" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.FirmwareLocation">
      <summary>
            Types of firmware locations.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.FirmwareLocation.Unknown">
      <summary>An unknown firmware location</summary>
    </member>
    <member name="F:Triamec.TriaLink.FirmwareLocation.Factory">
      <summary>Factory firmware in a <see cref="F:Triamec.TriaLink.FirmwareLocation.Factory" />/<see cref="F:Triamec.TriaLink.FirmwareLocation.Alternative" /> infrastructure.</summary>
    </member>
    <member name="F:Triamec.TriaLink.FirmwareLocation.Base">
      <summary>
            Firmware designed to execute a replacement of the <see cref="F:Triamec.TriaLink.FirmwareLocation.Application" /> firmware in a
            <see cref="F:Triamec.TriaLink.FirmwareLocation.Base" />/<see cref="F:Triamec.TriaLink.FirmwareLocation.Application" /> infrastructure.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.FirmwareLocation.Alternative">
      <summary>
            Field reprogrammable firmware in a <see cref="F:Triamec.TriaLink.FirmwareLocation.Factory" />/<see cref="F:Triamec.TriaLink.FirmwareLocation.Alternative" /> infrastructure.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.FirmwareLocation.Application">
      <summary>Production firmware in a <see cref="F:Triamec.TriaLink.FirmwareLocation.Base" />/<see cref="F:Triamec.TriaLink.FirmwareLocation.Application" /> infrastructure.</summary>
    </member>
    <member name="T:Triamec.TriaLink.Float40">
      <summary>
            A Float40 represents a 40-bit float value
            that is stored by one 32-bit float value
            and 8 least significant mantissa bits,
            padded into a second 32-bit value.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Float40.#ctor(System.Byte[])">
      <summary>
            Constructor
            </summary>
      <param name="value">Up to 5 <see cref="T:System.Byte" /> values to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.Float40.#ctor(System.Double)">
      <summary>
            Constructor
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to cast and assign.</param>
      <exception cref="T:System.OverflowException">
            The <see cref="T:System.Double" /> value is too large
            to be represented by a <see cref="T:Triamec.TriaLink.Float40" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Float40.#ctor(System.Single)">
      <summary>
            Constructor
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.Float40.#ctor(Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Float40" /> class.
            </summary>
      <param name="word0">The first word.</param>
      <param name="word1">The second word.</param>
    </member>
    <member name="M:Triamec.TriaLink.Float40.#ctor(Triamec.TriaLink.TamValue32Pair)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Float40" /> class.
            </summary>
      <param name="pair">The <see cref="T:Triamec.TriaLink.TamValue32" /> pair.</param>
    </member>
    <member name="M:Triamec.TriaLink.Float40.CompareTo(Triamec.TriaLink.Float40)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:Triamec.TriaLink.Float40.ConvertToDouble(Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Converts a 40-bit floating-point number,
            represented by two <see cref="T:Triamec.TriaLink.TamValue32" /> words,
            into a <see cref="T:System.Double" />.
            </summary>
      <param name="word0">The first word of the 40-bit floating point number.</param>
      <param name="word1">The second word of the 40-bit floating point number.</param>
      <returns>Returns the <see cref="T:System.Double" /> cast value of the 40-bit floating-point number
            given by <paramref name="word0" /> and <paramref name="word1" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.ConvertToDouble(Triamec.TriaLink.TamValue32Pair)">
      <summary>
            Converts a 40-bit floating-point number, represented by two <see cref="T:Triamec.TriaLink.TamValue32" /> words, into a
            <see cref="T:System.Double" />.
            </summary>
      <param name="pair">The <see cref="T:Triamec.TriaLink.TamValue32" /> pair.</param>
      <returns>
            Returns the <see cref="T:System.Double" /> cast value of the 40-bit floating-point number
            given by <paramref name="pair" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.ConvertToTamValue32Pair(System.IConvertible)">
      <summary>
            Converts an <see cref="T:System.IConvertible" /> representing a <see cref="T:Triamec.TriaLink.Float40" /> value
            to a pair of <see cref="T:Triamec.TriaLink.TamValue32" /> values.
            </summary>
      <param name="value">A 40-bit floating-point number.</param>
      <returns>
        <para>
            A <see cref="T:Triamec.TriaLink.TamValue32" /> pair.
            </para>
        <para>
            The first element contains the most significant word,
            the second element the least significant word
            of the internal two-word representation of the value.
            </para>
        <para>
            The first element contains a valid <see cref="P:Triamec.TriaLink.TamValue32.AsSingle" /> value,
            which is equivalent to the downcast of <paramref name="value" /> to a <see cref="T:System.Single" />.
            </para>
        <para>
            The second element contains the 8 least significant mantissa bits of <paramref name="value" />.
            They are stored in the most significant byte of the <see cref="P:Triamec.TriaLink.TamValue32.AsUInt32" /> value.
            </para>
      </returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.ConvertToTamValue32Pair(Triamec.TriaLink.Float40)">
      <summary>
            Converts a <see cref="T:Triamec.TriaLink.Float40" /> value
            to a pair of <see cref="T:Triamec.TriaLink.TamValue32" /> values.
            </summary>
      <param name="value">A 40-bit floating-point number.</param>
      <returns>
        <para>
            A <see cref="T:Triamec.TriaLink.TamValue32" /> pair.
            </para>
        <para>
            The first element contains the most significant word,
            the second element the least significant word
            of the internal two-word representation of the value.
            </para>
        <para>
            The first element contains a valid <see cref="P:Triamec.TriaLink.TamValue32.AsSingle" /> value,
            which is equivalent to the downcast of <paramref name="value" /> to a <see cref="T:System.Single" />.
            </para>
        <para>
            The second element contains the 8 least significant mantissa bits of <paramref name="value" />.
            They are stored in the most significant byte of the <see cref="P:Triamec.TriaLink.TamValue32.AsUInt32" /> value.
            </para>
      </returns>
    </member>
    <member name="F:Triamec.TriaLink.Float40.Epsilon">
      <summary>
            Represents the smallest positive <see cref="T:Triamec.TriaLink.Float40" /> greater than zero.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Float40.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Float40" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.TriaLink.Float40" /> to compare with.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.Float40" /> structs have 
            the same internal bit representation of their values.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.FromDouble(System.Double)">
      <summary>
            Casts a <see cref="T:System.Double" /> to a <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Double" /> value as a <see cref="T:Triamec.TriaLink.Float40" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.FromSingle(System.Single)">
      <summary>
            Casts a <see cref="T:System.Single" /> to a <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Single" /> value as a <see cref="T:Triamec.TriaLink.Float40" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
      <returns>Returns the hash code of the internal bit representation of the <see cref="T:Triamec.TriaLink.Float40" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.IsInfinity(Triamec.TriaLink.Float40)">
      <summary>
            Determines whether the specified number evaluates to negative or positive infinity.
            </summary>
      <param name="value">A 40-bit float value.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> evaluates
            to <see cref="F:Triamec.TriaLink.Float40.PositiveInfinity" /> or <see cref="F:Triamec.TriaLink.Float40.NegativeInfinity" />; 
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.IsNaN(Triamec.TriaLink.Float40)">
      <summary>
            Returns a value indicating whether the specified number evaluates to not a number (<see cref="F:Triamec.TriaLink.Float40.NaN" />). 
            </summary>
      <param name="value">A 40-bit floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> evaluates to not a number (<b>NaN</b>);
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.IsNegativeInfinity(Triamec.TriaLink.Float40)">
      <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
      <param name="value">A 40-bit floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> evaluates to <see cref="F:Triamec.TriaLink.Float40.NegativeInfinity" />;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.IsPositiveInfinity(Triamec.TriaLink.Float40)">
      <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
      <param name="value">A 40-bit floating-point number.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> evaluates to <see cref="F:Triamec.TriaLink.Float40.PositiveInfinity" />;
            otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.Float40.Item(System.Int32)">
      <summary>
            Gets or sets a byte of the value as a byte array.
            </summary>
      <param name="index">The index of the byte to retrieve.
            The value must be between 0 and 4.</param>
    </member>
    <member name="F:Triamec.TriaLink.Float40.MaxValue">
      <summary>
            Represents the largest possible vlaue of <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Float40.MinValue">
      <summary>
            Represents the smallest possible vlaue of <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Float40.NaN">
      <summary>
            Represents not a number (<b>NaN</b>).
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Float40.NegativeInfinity">
      <summary>
            Represents negative infinity.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Float40.op_Equality(Triamec.TriaLink.Float40,Triamec.TriaLink.Float40)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Float40" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Float40" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Float40" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.Float40" /> structs have 
            the same internal bit representation of their values.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.op_Explicit(Triamec.TriaLink.Float40)~System.Single">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.Float40" /> to a <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Single" /> value of the <see cref="T:Triamec.TriaLink.Float40" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.op_GreaterThan(Triamec.TriaLink.Float40,Triamec.TriaLink.Float40)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.Float40" /> struct for being greater than another <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Float40" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Float40" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="M:Triamec.TriaLink.Float40.ToDouble(Triamec.TriaLink.Float40)" /> value
            of <paramref name="v1" /> is greater than that of <paramref name="v2" />.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.op_Implicit(System.Double)~Triamec.TriaLink.Float40">
      <summary>
            Casts a <see cref="T:System.Double" /> to a <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Double" /> value as a <see cref="T:Triamec.TriaLink.Float40" />.</returns>
      <exception cref="T:System.OverflowException">
            The <see cref="T:System.Double" /> value is too large
            to be represented by a <see cref="T:Triamec.TriaLink.Float40" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Float40.op_Implicit(System.Single)~Triamec.TriaLink.Float40">
      <summary>
            Casts a <see cref="T:System.Single" /> to a <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Single" /> value as a <see cref="T:Triamec.TriaLink.Float40" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.op_Implicit(Triamec.TriaLink.Float40)~System.Double">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.Float40" /> to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Double" /> value of the <see cref="T:Triamec.TriaLink.Float40" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.op_Inequality(Triamec.TriaLink.Float40,Triamec.TriaLink.Float40)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Float40" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Float40" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Float40" /> in the comparison.</param>
      <returns>Returns <see langword="false" /> if both <see cref="T:Triamec.TriaLink.Float40" /> structs have 
            the same internal bit representation of their values.
            Otherwise, returns <see langword="true" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.op_LessThan(Triamec.TriaLink.Float40,Triamec.TriaLink.Float40)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.Float40" /> struct for being smaller than another <see cref="T:Triamec.TriaLink.Float40" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Float40" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Float40" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="M:Triamec.TriaLink.Float40.ToDouble(Triamec.TriaLink.Float40)" /> value
            of <paramref name="v1" /> is smaller than that of <paramref name="v2" />.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.Parse(System.String)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format
            to its 40-bit floating-point number equivalent.
            </summary>
      <param name="text">A string representing a number to convert.</param>
      <returns>
            A 40-bit floating-point number equivalent to the numeric value or symbol specified in <paramref name="text" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="text" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="text" /> represents a number
            less than <see cref="F:Triamec.TriaLink.Float40.MinValue" /> or greater than <see cref="F:Triamec.TriaLink.Float40.MaxValue" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Float40.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format
            to its 40-bit floating-point number equivalent.
            </summary>
      <param name="text">A string representing a number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values
            that indicates the permitted format of <paramref name="text" />.
            A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" />
            combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <returns>
            A 40-bit floating-point number equivalent to the numeric value or symbol specified in <paramref name="text" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="text" /> is not a number in a valid format.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</para>
        <para>-or-</para>
        <para>
          <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</para>
      </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="text" /> represents a number
            less than <see cref="F:Triamec.TriaLink.Float40.MinValue" /> or greater than <see cref="F:Triamec.TriaLink.Float40.MaxValue" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Float40.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format
            to its 40-bit floating-point number equivalent.
            </summary>
      <param name="text">A string representing a number to convert.</param>
      <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values
            that indicates the permitted format of <paramref name="text" />.
            A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" />
            combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information
            about <paramref name="text" />.</param>
      <returns>
            A 40-bit floating-point number equivalent to the numeric value or symbol specified in <paramref name="text" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="text" /> is not a numeric value.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</para>
        <para>-or-</para>
        <para>
          <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</para>
      </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="text" /> represents a number
            less than <see cref="F:Triamec.TriaLink.Float40.MinValue" /> or greater than <see cref="F:Triamec.TriaLink.Float40.MaxValue" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Float40.Parse(System.String,System.IFormatProvider)">
      <summary>
            Converts the string representation of a number in a specified style and culture-specific format
            to its 40-bit floating-point number equivalent.
            </summary>
      <param name="text">A string representing a number to convert.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information
            about <paramref name="text" />.</param>
      <returns>
            A 40-bit floating-point number equivalent to the numeric value or symbol specified in <paramref name="text" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is a null reference.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="text" /> is not a number in a valid format.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="text" /> represents a number
            less than <see cref="F:Triamec.TriaLink.Float40.MinValue" /> or greater than <see cref="F:Triamec.TriaLink.Float40.MaxValue" />.
            </exception>
    </member>
    <member name="F:Triamec.TriaLink.Float40.PositiveInfinity">
      <summary>
            Represents positive infinity.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.ToDouble(Triamec.TriaLink.Float40)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.Float40" /> to a <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Double" /> value of the <see cref="T:Triamec.TriaLink.Float40" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float40.ToSingle(Triamec.TriaLink.Float40)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.Float40" /> to a <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Single" /> value of the <see cref="T:Triamec.TriaLink.Float40" />.</returns>
    </member>
    <member name="T:Triamec.TriaLink.Float64">
      <summary>
            Low level manipulation for <see langword="double" /> values.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Float64.ConvertToTamValue32Pair(System.Double)">
      <summary>
            Determines the 32bit integer parts of a specified double precision floating point value.
            </summary>
      <param name="value">The double precision floating point value.</param>
      <returns>
            A <see cref="T:Triamec.TriaLink.TamValue32Pair" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Float64.ConvertToTamValue32Pair(System.IConvertible)">
      <summary>
            Determines the 32bit integer parts of a specified convertible value.
            </summary>
      <param name="value">The convertible value.</param>
      <returns>
            A <see cref="T:Triamec.TriaLink.TamValue32Pair" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Float64.ToDouble(System.UInt32,System.UInt32)">
      <summary>
            Converts two integer values to a double precision floating point value.
            </summary>
      <param name="word0">The first word.</param>
      <param name="word1">The second word.</param>
      <returns>The merged value.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Float64.ToDouble(Triamec.TriaLink.TamValue32Pair)">
      <summary>
            Converts a pair of <see cref="T:Triamec.TriaLink.TamValue32" /> values to a double precision floating point value.
            </summary>
      <param name="pair">The <see cref="T:Triamec.TriaLink.TamValue32" /> pair.</param>
      <returns>The merged value.</returns>
    </member>
    <member name="T:Triamec.TriaLink.HardwareIdentification">
      <summary>
            Hardware identifications of Tria-Link hardware devices.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.HardwareIdentification.#ctor(System.UInt32)">
      <summary>
            Constructor
            </summary>
      <param name="hardwareId">The hardware id.</param>
    </member>
    <member name="M:Triamec.TriaLink.HardwareIdentification.GetStationType(System.String)">
      <summary>
            Gets the station type of the given product.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.HardwareIdentification.HasController">
      <summary>
            Indicates if the hardware has a controller.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.HardwareIdentification.Id">
      <summary>
            Gets the hardware identification.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.HardwareIdentification.LocalNodeNumber">
      <summary>
            Gets the index of the station within one piece of hardware.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.HardwareIdentification.Supports(Triamec.TriaLink.MotorBaseConfiguration)">
      <summary>
            Indicates whether a specified <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" /> is supported.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.HardwareIdentification.SupportsDoubles">
      <summary>
            Gets a value indicating whether the controller firmware supports <see langword="double" />s.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IAddressControlCommand">
      <summary>
            Interface for <see cref="F:Triamec.TriaLink.ServiceResponseCommand.AddressControl" /> messages.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IAddressControlCommand.Address">
      <summary>
            Gets the address for a station.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IAddressControlCommand.AddressControlCommand">
      <summary>
            Gets the address control command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IAddressControlCommand.Bus">
      <summary>
            Indicates on which bus the responding device is located.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IAddressControlCommand.UniqueDeviceId">
      <summary>
            Gets the unique device identifier of a station.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IAddressControlRequest">
      <summary>
            Interface for <see cref="F:Triamec.TriaLink.ServiceResponseCommand.AddressControl" /> message responses;
            for use in session callbacks.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IAddressControlRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.AddressControlCommand,System.UInt32,Triamec.TriaLink.UniqueDeviceId,System.Byte,Triamec.TriaLink.Groups.SubBus)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="addressControlCommand">The address control command.</param>
      <param name="hardwareId">The Hardware ID, a unique code per Vendor, Product, and Manufacturer.</param>
      <param name="uniqueDeviceId">The unique device identifier of a station.</param>
      <param name="address">The address for a station.</param>
      <param name="bus">The subordinate bus where the station is located.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IAddressControlResponse">
      <summary>
            Interface for <see cref="F:Triamec.TriaLink.ServiceResponseCommand.AddressControl" /> message responses;
            for use in session callbacks.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IAddressControlResponse.HardwareId">
      <summary>
            Gets the Hardware ID, a unique code per Vendor, Product, and Manufacturer.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IAxisCommand">
      <summary>
            Tria-Link message to request or acknowledge an axis command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IAxisCommand.AxisNumbers">
      <summary>
            Gets the axis numbers.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IAxisControlCommand">
      <summary>
            Tria-Link message to request or acknowledge axis error reset and axis enable/disable.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IAxisControlCommand.AxisControlCommands">
      <summary>
            Gets the axis control commands.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IAxisControlRequest">
      <summary>
            Tria-Link message to request axis error reset and axis enable/disable.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IAxisControlRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.AxisControlCommands,Triamec.TriaLink.Timestamp)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="axisNumbers">The axis numbers.</param>
      <param name="commands">The axis control commands.</param>
      <param name="acceptanceDate">The acceptance date.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IAxisControlResponse">
      <summary>
            Tria-Link message to acknowledge axis error reset and axis enable/disable.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IControlStatisticsResponse">
      <summary>
            Interface for <see cref="F:Triamec.TriaLink.ServiceResponseCommand.ControlStatistics" /> messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IControlStatisticsResponse.GetStatisticsCount(System.Int32)">
      <summary>
            Gets the counter with the given index.
            </summary>
      <param name="index">A value between <c>0</c> and <c>9</c>.</param>
      <returns>The current value of the counter.</returns>
    </member>
    <member name="P:Triamec.TriaLink.IControlStatisticsResponse.ResetStatistics">
      <summary>
            Gets a value indicating whether the counters are to be reset after returning the current values.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IControlStatisticsResponse.StatisticSelector">
      <summary>
            Gets the counter set selector.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IDriveControlCommand">
      <summary>
            Tria-Link message to request or acknowledge emergency stop, fault reset, motor base configuration change and
            bridge power switch.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IDriveControlCommand.BridgePowerSwitch">
      <summary>
            Gets the setting of the power section switch.
            Only applies when <see cref="P:Triamec.TriaLink.IDriveControlCommand.DriveControlCommands" />
            contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IDriveControlCommand.DriveControlCommands">
      <summary>
            Gets the drive control commands.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IDriveControlCommand.DriveStopCommand">
      <summary>
            Gets the emergency stop command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IDriveControlCommand.MotorBaseConfigurationCommand">
      <summary>
            Gets the motor base configuration command.
            Only applies when <see cref="P:Triamec.TriaLink.IDriveControlCommand.DriveControlCommands" />
            contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IDriveControlRequest">
      <summary>
            Tria-Link message to request emergency stop, fault reset, motor base configuration change and bridge power
            switch.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IDriveControlRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.DriveControlCommands,Triamec.TriaLink.DriveStopCommand,Triamec.TriaLink.MotorBaseConfiguration,Triamec.TriaLink.BridgePowerSwitch,Triamec.TriaLink.Timestamp)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="commands">The commands.</param>
      <param name="driveStopCommand">The emergency stop command.</param>
      <param name="motorBaseConfiguration">The motor base configuration.</param>
      <param name="powerSwitch">The setting of the power section switch.</param>
      <param name="acceptanceDate">The date when the request was executed or rejected.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IDriveControlResponse">
      <summary>
            Tria-Link message to acknowledge emergency stop, fault reset, motor base configuration change and bridge power
            switch.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IEnableSubscriptionCommand">
      <summary>
            Tria-Link message to request or acknowledge the activation or deactivation of subscriptions.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IEnableSubscriptionCommand.EnablingState">
      <summary>
            Gets the enabling state of the subscription.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IEnableSubscriptionCommand.TriggerDataType">
      <summary>
            Gets the data type of the subscription trigger.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IEnableSubscriptionCommand.TriggerLevel">
      <summary>
            Gets the trigger level contributing to the condition when packets are sent.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IEnableSubscriptionCommand.TriggerRegisterOffset">
      <summary>
            Gets the register address, or byte offset of the subscription trigger.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IEnableSubscriptionRequest">
      <summary>
            Tria-Link message to request the activation or deactivation of subscriptions.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IEnableSubscriptionRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Byte,Triamec.TriaLink.PublicationCommand,System.UInt32,Triamec.TriaLink.TriggerDataType,Triamec.TriaLink.TamValue32)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="subscriptionId">The subscription identifier.</param>
      <param name="publishCommand">The enabling state of the subscription.</param>
      <param name="triggerRegisterOffset">The register offset of the subscription trigger, in bytes.</param>
      <param name="triggerDataType">The data type of the subscription trigger.</param>
      <param name="triggerLevel">The trigger level of the subscription.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IEnableSubscriptionResponse">
      <summary>
            Tria-Link message to acknowledge the activation or deactivation of subscriptions.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IIdentificationRequest">
      <summary>
            Tria-Link message to request device identifiers.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IIdentificationRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="hardwareId">the hardware identifier, a unique code per vendor, product, and
            manufacturer.</param>
      <param name="hardwareRevision">The revision of the hardware type, which is identified by
            <paramref name="hardwareId" />.</param>
      <param name="hardwareSerialNumber">The hardware serial number, a unique number per
            <paramref name="hardwareId" />.</param>
      <param name="dspFirmwareId">The device firmware identifier.</param>
      <param name="registerLayoutId">The register layout identifier.</param>
      <param name="tamaVirtualMachineId">The Tama virtual machine identifier.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IIdentificationResponse">
      <summary>
            Tria-Link message to report device identifiers.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IIdentificationResponse.DspFirmwareId">
      <summary>
            Gets the device firmware identifier.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IIdentificationResponse.HardwareId">
      <summary>
            Gets the hardware identifier, a unique code per vendor, product, and manufacturer.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IIdentificationResponse.HardwareRevision">
      <summary>
            Gets the revision of the hardware type, which is identified by <see cref="P:Triamec.TriaLink.IIdentificationResponse.HardwareId" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IIdentificationResponse.HardwareSerialNumber">
      <summary>
            Gets the hardware serial number, a unique number per <see cref="P:Triamec.TriaLink.IIdentificationResponse.HardwareId" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IIdentificationResponse.RegisterLayoutId">
      <summary>
            Gets the register layout identifier.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IIdentificationResponse.TamaVirtualMachineId">
      <summary>
            Gets the Tama virtual machine identifier.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IMoveCommand">
      <summary>
            Tria-Link message to request or acknowledge a path planner change.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveCommand.LimitTorque">
      <summary>
            Gets a value indicating whether to limit the torque during the move.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveCommand.PathPlannerCommand">
      <summary>
            Gets the path planner command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveCommand.PathPlannerDirection">
      <summary>
            Gets the direction to force.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IMoveDoubleRequest">
      <summary>
            Tria-Link message to request a path planner change, supporting double precision floating point positions.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveDoubleRequest.Acceleration">
      <summary>
            Gets the dedicated acceleration to use, in meters per square second or radian per square second.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveDoubleRequest.PositionOrDistance">
      <summary>
            Gets the position or distance, in meters or radian.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveDoubleRequest.Velocity">
      <summary>
             Gets the dedicated velocity to use, in meters per second or radian per second.
             </summary>
    </member>
    <member name="T:Triamec.TriaLink.IMoveFloatRequest">
      <summary>
            Tria-Link message to request a path planner change, supporting single and 40bit precision floating point
            positions.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveFloatRequest.Acceleration">
      <summary>
            Gets the dedicated acceleration to use, in meters per square second or radian per square second.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IMoveFloatRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.PathPlannerCommand,Triamec.TriaLink.PathPlannerDirection,System.Boolean,Triamec.TriaLink.Timestamp)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="axisNumbers">The axis numbers.</param>
      <param name="command">The path planner command.</param>
      <param name="direction">The path planner direction.</param>
      <param name="limitTorque">Whether to limit the torque during the move.</param>
      <param name="acceptanceDate">The acceptance date.</param>
      <returns>
            The newly created response packet.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.IMoveFloatRequest.PositionOrDistance">
      <summary>
            Gets the position or distance, in meters or radian.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveFloatRequest.Torque">
      <summary>
            Gets the force to use, in newton (for a linear system),
            or the torque, in newton meters (for a rotative system).
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveFloatRequest.TorqueRamp">
      <summary>
            Gets the maximum time derivative of the force, in newton per second (for a linear system), or of the torque
            in newton meters per second (for a rotative system).
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IMoveFloatRequest.Velocity">
      <summary>
             Gets the dedicated velocity to use, in meters per second or radian per second.
             </summary>
    </member>
    <member name="T:Triamec.TriaLink.IMoveResponse">
      <summary>
            Tria-Link message to acknowledge a path planner change.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IPublishCommand">
      <summary>
            Tria-Link message to request or acknowledge the publication of registers.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IPublishCommand.DestinationEndpoint">
      <summary>
            Gets the destination endpoint.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IPublishCommand.Downsampling">
      <summary>
            Gets the subscription's downsampling.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPublishCommand.GetPublishRegisterOffsets">
      <summary>
            Gets an array of offsets
            for the registers to publish, in bytes.
            </summary>
      <returns>Returns the array of offsets for the registers to publish, in bytes.</returns>
    </member>
    <member name="P:Triamec.TriaLink.IPublishCommand.Speed">
      <summary>
            Indicates whether this is a highspeed subscription.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IPublishRequest">
      <summary>
            Tria-Link message to request the publication of registers.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPublishRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Byte,System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.TriaLinkEndpointType,Triamec.TriaLink.Subscriptions.SubscriptionSpeed,System.UInt16,System.UInt32[])">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="subscriptionId">The subscription identifier.</param>
      <param name="subscriptionDestinationAddress">The subscription destination.</param>
      <param name="subscriptionDestinationPort">The subscription destination port.</param>
      <param name="destinationEndpoint">The destination endpoint of the published packets.</param>
      <param name="speed">The subscription's <see cref="T:Triamec.TriaLink.Subscriptions.SubscriptionSpeed" />.</param>
      <param name="downsampling">The subscription's downsampling.</param>
      <param name="publishRegisterOffsets">An array of maximal
            <see cref="F:Triamec.TriaLink.Packets.ServicePacket.MAX_SUBSCRIPTION_REGISTERS" /> byte offsets for the registers to
            publish.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="P:Triamec.TriaLink.IPublishRequest.SubscriptionDestinationAddress">
      <summary>
            Gets the subscription destination.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IPublishRequest.SubscriptionDestinationPort">
      <summary>
            Gets the subscription destination port.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IPublishResponse">
      <summary>
            Tria-Link message to acknowledge the publication of registers.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPublishResponse.GetSubscriptionDestination(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the subscription destination.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IRegisterCommand">
      <summary>
            Tria-Link message to request or write register values, acknowledge written registers or report register values.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IRegisterCommand.GetRegisterOffsets">
      <summary>
            Gets an array of <c>4</c> offset values for <see cref="M:Triamec.TriaLink.IRegisterValueCommand.GetRegisterValues" />, in bytes.
            </summary>
      <returns>Returns the offset values, in bytes.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IRegisterRangeCommand">
      <summary>
            Tria-Link message to request or write a register range, report a range of register values or acknowledge a
            written register range.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IRegisterRangeCommand.RangeLength">
      <summary>
            Gets the length of the register range.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IRegisterRangeCommand.RegisterRangeOffset">
      <summary>
            Gets the start offset of <see cref="M:Triamec.TriaLink.IRegisterRangeValuesCommand.GetRegisterRange" />, in bytes.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IRegisterRangeRequest">
      <summary>
            Tria-Link message to request a register range.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IRegisterRangeRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Boolean,System.UInt32,Triamec.TriaLink.TamValue32[])">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="acknowledge">If set to <see langword="true" />, acknowledge a write request.
            Otherwise, report register values.</param>
      <param name="registerRangeOffset">The start offset of the range, in bytes.</param>
      <param name="registerRangeValues">The register value range.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IRegisterRangeResponse">
      <summary>
            Tria-Link message to report a range of register values or acknowledge a written register range.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IRegisterRangeValuesCommand">
      <summary>
            Tria-Link message to write a register range, report a range of register values or acknowledge a
            written register range.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IRegisterRangeValuesCommand.GetRegisterRange">
      <summary>
            Gets a register value range of Size <see cref="P:Triamec.TriaLink.IRegisterRangeCommand.RangeLength" />,
            starting at offset <see cref="P:Triamec.TriaLink.IRegisterRangeCommand.RegisterRangeOffset" />.
            </summary>
      <returns>Returns the register value range.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IRegisterRequest">
      <summary>
            Tria-Link message to read register values.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IRegisterRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Boolean,System.UInt16,System.UInt16,System.UInt16,System.UInt16,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="acknowledge">If set to <see langword="true" />, acknowledge a write request.
            Otherwise, report register values.</param>
      <param name="registerOffset0">The first register offset, in bytes.</param>
      <param name="registerOffset1">The second register offset, in bytes.</param>
      <param name="registerOffset2">The third register offset, in bytes.</param>
      <param name="registerOffset3">The fourth register offset, in bytes.</param>
      <param name="registerValue0">The register value0.</param>
      <param name="registerValue1">The register value1.</param>
      <param name="registerValue2">The register value2.</param>
      <param name="registerValue3">The register value3.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IRegisterResponse">
      <summary>
            Tria-Link message to report register values or acknowledge written registers.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IRegisterValueCommand">
      <summary>
            Tria-Link message to write registers, acknowledge written registers or report register values.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IRegisterValueCommand.GetRegisterValues">
      <summary>
            Gets an array of <c>4</c> register values 
            for the registers at offsets <see cref="M:Triamec.TriaLink.IRegisterCommand.GetRegisterOffsets" />.
            </summary>
      <returns>Returns the register values.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IResetSubscriptionsCommand">
      <summary>
            Tria-Link message to request or acknowledge a subscription reset.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IResetSubscriptionsCommand.OmitForeign">
      <summary>
            Indicates whether subscriptions and/or publications from other stations are NOT reset.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IResetSubscriptionsCommand.OmitOwn">
      <summary>
            Indicates whether own subscriptions and/or publications are NOT reset.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IResetSubscriptionsCommand.ResetPublications">
      <summary>
            Indicates whether publications are reset.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IResetSubscriptionsCommand.ResetSubscriptions">
      <summary>
            Indicates whether subscriptions are reset.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IResetSubscriptionsRequest">
      <summary>
            Tria-Link message to reset subscriptions.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IResetSubscriptionsRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="resetPublications">Whether publications are reset.</param>
      <param name="resetSubscriptions">Whether subscriptions are reset.</param>
      <param name="omitOwn">Whether own subscriptions and/or publications are NOT reset.</param>
      <param name="omitForeign">Whether subscriptions and/or publications from other stations are NOT
            reset.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IResetSubscriptionsResponse">
      <summary>
            Tria-Link message to acknowledge a subscription reset message.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IServiceRequest">
      <summary>
            Tria-Link request message.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IServiceRequest.RequestCommand">
      <summary>
            Gets the request command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IServiceRequest.Source">
      <summary>
            Gets the source Tria-Link address.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IServiceResponse">
      <summary>
            Base interface of service message responses;
            for use in session callbacks.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IServiceResponse.GetSession(Triamec.TriaLink.Sessions.SessionManager)">
      <summary>
            Gets the session for which this response is relevant.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IServiceResponse.ResponseCommand">
      <summary>
            Gets the response command.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IsochronousCommand">
      <summary>
            The isochronous commands.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.IsochronousCommand.None">
      <summary>No specific command.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IsochronousCommand.SendSubscriptionValues">
      <summary>
            Identifier for isochronous packets.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IStartupControlCommand">
      <summary>
        <see cref="F:Triamec.TriaLink.ServiceResponseCommand.ControlStartup" /> message.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStartupControlCommand.IsStartupActive">
      <summary>
            Indicates if the startup range is stored and activated.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStartupControlCommand.IsStartupRangeDeleted">
      <summary>
            Indicates if the startup range in the flash memory is deleted.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStartupControlCommand.IsStartupRangeLoaded">
      <summary>
            Indicates if the startup range is loaded.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IStartupControlRequest">
      <summary>
            Tria-Link message to control startup.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IStartupControlRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Boolean,System.Boolean,System.Boolean,Triamec.TriaLink.ResponseStartupSettings)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="isStartupRangeDeleted">Whether the startup range in the flash memory is deleted.</param>
      <param name="isStartupActive">Whether the startup range is stored and activated.</param>
      <param name="isStartupRangeLoaded">Whether the startup range is loaded.</param>
      <param name="startupSettings">The startup settings.</param>
      <returns>
            The newly created response packet.
            </returns>
    </member>
    <member name="T:Triamec.TriaLink.IStartupControlResponse">
      <summary>
        <see cref="F:Triamec.TriaLink.ServiceResponseCommand.ControlStartup" /> message response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStartupControlResponse.StartupSettings">
      <summary>
            Gets the startup settings from the response message.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IStatusResponse">
      <summary>
            Base interface of status message responses;
            for use in <see cref="T:Triamec.TriaLink.Sessions.ISession" /> callbacks.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStatusResponse.ChecksumErrorCount">
      <summary>
            Gets the checksum error count.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IStatusResponse.GetGroup1(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the first dynamic group <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IStatusResponse.GetGroup2(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the second dynamic group <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IStatusResponse.GetGroup3(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the third dynamic group <see cref="T:Triamec.TriaLink.Groups.Addressee" /></summary>
    </member>
    <member name="M:Triamec.TriaLink.IStatusResponse.GetSession(Triamec.TriaLink.Sessions.SessionManager)">
      <summary>
            The session for which this response is relevant.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IStatusResponse.GetStation(Triamec.TriaLink.Groups.IGroupManager)">
      <summary>
            Gets the individual <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            </summary>
      <returns>
            The station or <see langword="null" /> if <paramref name="groupManager" /> doesn't know of a
            <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> with <see cref="P:Triamec.TriaLink.IStatusResponse.StationAddress" />.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.IStatusResponse.PeripheryData">
      <summary>
            Gets the periphery data at <see cref="P:Triamec.TriaLink.IStatusResponse.PeripheryDeviceAddress" />/<see cref="P:Triamec.TriaLink.IStatusResponse.PeripheryRegisterAddress" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStatusResponse.PeripheryDeviceAddress">
      <summary>
            Gets the periphery device address that was read from/written to.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStatusResponse.PeripheryReadTimeout">
      <summary>
            Indicates a periphery read timeout.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStatusResponse.PeripheryRegisterAddress">
      <summary>
            Gets the periphery register address that was read from/written to.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStatusResponse.PeripheryWriteTimeout">
      <summary>
            Indicates a periphery write timeout.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStatusResponse.ReceiveOverflowCount">
      <summary>
            Gets the number of times an incoming packet was ignored becase the receive buffer was full.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IStatusResponse.StationAddress">
      <summary>
            Gets the address of the individual <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ISubscribeCommand">
      <summary>
            Tria-Link message to request or acknowledge the subscription of registers.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ISubscribeCommand.GetSubscribeRegisterOffsets">
      <summary>
            Gets an array of offsets for the registers to subscribe, in bytes.
            </summary>
      <returns>Returns the array of offsets for the reigsters to subscribe, in bytes.</returns>
    </member>
    <member name="P:Triamec.TriaLink.ISubscribeCommand.SubscribeTimestampRegisterOffset">
      <summary>
            Gets the offset of the timestamp register that is always part of a subscription, in bytes.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ISubscribeRequest">
      <summary>
            Tria-Link message to request the publication of registers.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ISubscribeRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Byte,System.UInt32,System.UInt32[])">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="subscriptionId">The subscription identifier.</param>
      <param name="timestampRegisterOffset">The offset of the timestamp register that is always part of a
            subscription, in bytes.</param>
      <param name="registerOffsets">An array of maximal
            <see cref="F:Triamec.TriaLink.Packets.ServicePacket.MAX_SUBSCRIPTION_REGISTERS" /> byte offsets for the registers to
            subscribe.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.ISubscribeResponse">
      <summary>
            Tria-Link message to acknowledge the subscription of registers.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ISubscriptionCommand">
      <summary>
            Tria-Link message to request or acknowledge subsription mutations.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ISubscriptionCommand.SubscriptionId">
      <summary>
            Gets the subscription ID.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ITamaControlCommand">
      <summary>
            Tria-Link message to request or acknowledge a change in one or all Tama virtual machines.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITamaControlCommand.AsynchronousTamaVMCommand">
      <summary>
            Gets the command for the asynchronous Tama VM.
            Only applies when <see cref="P:Triamec.TriaLink.ITamaControlCommand.TamaControlCommands" />
            contains <see cref="F:Triamec.TriaLink.TamaControlCommands.ControlAsynchronousTamaVM" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITamaControlCommand.IsochronousTamaVMCommand">
      <summary>
            Gets the command for the isochronous Tama VM.
            Only applies when <see cref="P:Triamec.TriaLink.ITamaControlCommand.TamaControlCommands" />
            contains <see cref="F:Triamec.TriaLink.TamaControlCommands.ControlIsochronousTamaVM" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITamaControlCommand.TamaCodeRangeLength">
      <summary>
            Gets the Tama code range length.
            Only applies when <see cref="P:Triamec.TriaLink.ITamaControlCommand.IsochronousTamaVMCommand" />
            or <see cref="P:Triamec.TriaLink.ITamaControlCommand.AsynchronousTamaVMCommand" />
            is <see cref="F:Triamec.TriaLink.TamaVMCommand.VerifyCode" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITamaControlCommand.TamaControlCommands">
      <summary>
            Gets the Tama control commands.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ITamaControlRequest">
      <summary>
            Tria-Link message to request change in one or all Tama virtual machines.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ITamaControlRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.TamaControlCommands,Triamec.TriaLink.TamaVMCommand,Triamec.TriaLink.TamaVMCommand,System.UInt16)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="commands">The TamaVM control commands to execute.</param>
      <param name="isochronousVMCommand">The control command for the isochronous TamaVM.</param>
      <param name="asynchronousVMCommand">The control command for the asynchronous TamaVM.</param>
      <param name="codeRangeLength">The Tama code range length.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.ITamaControlResponse">
      <summary>
            Tria-Link message to acknowledge a change in one or all Tama virtual machines.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ITamInt">
      <summary>
            Representation of a signed integer of up to 32 bit.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITamInt.AsInt32">
      <summary>
            Gets or sets the value of this <see cref="T:Triamec.TriaLink.ITamInt" />,
            transformed to/from an <see cref="T:System.Int32" /> value.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITamInt.BitData">
      <summary>
            Gets or sets the raw bit data of this <see cref="T:Triamec.TriaLink.ITamInt" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>The value to assign uses more bits than defined by the bit <see cref="P:Triamec.TriaLink.ITamInt.Width" />.</para>
        <para>The value to assign represents -0.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.ITamInt.Mask">
      <summary>
            Gets the bit mask with all used bits of the internal data.
            For example, gets <c>0x000000FFu</c> when <c><see cref="P:Triamec.TriaLink.ITamInt.Width" /> = 8</c>.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITamInt.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.TriaLink.ITamInt" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ITestSignalCommand">
      <summary>
            Tria-Link message to request or acknowledge test signal generation.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITestSignalCommand.Amplitude">
      <summary>
            Gets the amplitude of the test signal.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITestSignalCommand.FrameSize">
      <summary>
            Gets the number of samples of the test signal.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITestSignalCommand.Frequency">
      <summary>
            Gets the frequency of the test signal.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITestSignalCommand.TestSignalCommand">
      <summary>
            Gets the test signal command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITestSignalCommand.WaitSize">
      <summary>
            Gets the number of samples to use for the transition to the test signal.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ITestSignalRequest">
      <summary>
            Tria-Link message to request test signal generation.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ITestSignalRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.CurrentControllerTestSignalCommand,System.Single,System.Single,System.UInt16,System.UInt16)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="axisNumbers">The axis numbers.</param>
      <param name="testSignalCommand">The test signal command.</param>
      <param name="frequency">The frequency of the test signal.</param>
      <param name="amplitude">The amplitude of the test signal.</param>
      <param name="frameSize">The number of samples of the test signal, in periods of the current controller of
            the axis.</param>
      <param name="waitSize">The number of samples to use for the transition to the test signal, in periods of the
            current controller of the axis.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="T:Triamec.TriaLink.ITestSignalResponse">
      <summary>
            Tria-Link message to acknowledge test signal generation.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ITimedResponse">
      <summary>
            Tria-Link message containing information about when a request was executed.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITimedResponse.AcceptanceDate">
      <summary>
            Gets the date when the request was accepted.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ITrackingRequest">
      <summary>
            Tria-Link request requiring an <see cref="T:Triamec.TriaLink.ITimedResponse" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITrackingRequest.TamRequest">
      <summary>
            Gets the raw TAM request value.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ITriaLinkBootProtocol">
      <summary>
            Booting related part of the Tria-Link protocol.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITriaLinkBootProtocol.AdapterRole">
      <summary>
            Gets the role of the adapter station.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.ControlAddress(System.Object,Triamec.TriaLink.Sessions.IAddressControlResponseHandler,Triamec.TriaLink.Groups.IAddressee,System.Boolean,Triamec.TriaLink.AddressControlCommand,System.UInt32,Triamec.TriaLink.UniqueDeviceId,System.Byte,Triamec.TriaLink.Groups.SubBus)">
      <summary>
            Controls addresses.
            </summary>
      <param name="destination">The station or group receiving the packet.</param>
      <param name="expectResponse">Whether to expect a response.</param>
      <param name="command">The address control command.</param>
      <param name="hardwareId">The hardware identifier of the station to address.</param>
      <param name="uniqueDeviceId">The unique device identifier of the station to address.</param>
      <param name="address">The new address.</param>
      <param name="subordinateBus">The subordinate bus where the station is located.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>If <paramref name="expectResponse" /> is <see langword="true" />, a new session; otherwise,
            <see langword="null" />.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.ITriaLinkBootProtocol.DefaultTimeout">
      <summary>
            Gets the default time out, in milliseconds, for responses in this Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITriaLinkBootProtocol.GroupManager">
      <summary>
            Gets the group manager.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITriaLinkBootProtocol.Link">
      <summary>
            Gets the Tria-Link that this protocol works with.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.PingSelf">
      <summary>
            Sends a packet to ourselves via the bus.
            </summary>
      <returns>A new session for the ping request.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.ReadIdentifications(System.Object,Triamec.TriaLink.Sessions.IIdentificationResponseHandler,Triamec.TriaLink.Groups.IAddressee)">
      <summary>
            Reads the identifications of a station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IIdentificationSession" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.ReadPeripheryRegister(System.Object,Triamec.TriaLink.Sessions.IStatusResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation,System.Byte,System.UInt32)">
      <summary>
            Reads a periphery register of a Tria-Link station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.ReadStatus(System.Object,Triamec.TriaLink.Sessions.IStatusResponseHandler,Triamec.TriaLink.Groups.IAddressee)">
      <summary>
            Reads the status of a Tria-Link station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.ReadUris(Triamec.TriaLink.Groups.IAddressee,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Reads the values of up to <c>6</c> URIs from the specified destination.</summary>
      <param name="destination">The recipient which shall process the command.</param>
      <param name="index0">The index and subindex of URI 0 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index1">The index and subindex of URI 1 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index2">The index and subindex of URI 2 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index3">The index and subindex of URI 3 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index4">The index and subindex of URI 4 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index5">The index and subindex of URI 5 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.ResetEndpoints">
      <summary>
            Resets the <see cref="P:Triamec.TriaLink.Adapter.ITriaLink.Adapter" /> and (re-)attaches the endpoints.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>An endpoint could not be detached or attached.</para>
        <para>-or-</para>
        <para>The adapter could not be reset.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.RestartStations">
      <summary>
            Commands all stations to reset themselves to initial state.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITriaLinkBootProtocol.SessionManager">
      <summary>
            Gets the session manager.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITriaLinkBootProtocol.SubscriptionManager">
      <summary>
            Gets the subscription manager.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.UpdateTime(Triamec.TriaLink.EtherCatTime)">
      <summary>
            Synchronizes the global time on the device with the specified time.
            </summary>
      <param name="time">An EtherCAT distributed clock value.</param>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.WritePeripheryRegister(System.Object,Triamec.TriaLink.Sessions.IStatusResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation,System.Byte,System.UInt32,Triamec.TriaLink.TamValue32)">
      <summary>
            Writes a periphery register of a Tria-Link station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.</param>
      <param name="responseHandler">The callback for the response.</param>
      <param name="destination">The <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> where to read the periphery register.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to write.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to write,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <param name="peripheryData">The periphery data to write.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" /> for the status write request.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkBootProtocol.WriteStatus(System.Boolean,Triamec.TriaLink.Groups.IAddressee,Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks,Triamec.TriaLink.Groups.ITriaLinkStation)">
      <summary>
            Writes the status of a Tria-Link station.
            </summary>
      <param name="expectResponse">Whether a session should be created.</param>
      <param name="destination">The <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> who's status to write.</param>
      <param name="controlCommand">The control commands to execute.</param>
      <param name="stationAddressee">The station addressee.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" /> for the status write request, if <paramref name="expectResponse" /> was set
            to <see langword="true" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="T:Triamec.TriaLink.ITriaLinkResponse">
      <summary>
            Base interface for all Tria-Link response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkResponse.Enqueue(Triamec.TriaLink.Adapter.ITxFifo)">
      <summary>
            Enqueues the response into the specified transmit FIFO.
            </summary>
      <param name="txFifo">The transmit FIFO.</param>
    </member>
    <member name="M:Triamec.TriaLink.ITriaLinkResponse.GetSender(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the sender of the response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ITriaLinkResponse.SenderAddress">
      <summary>
            Gets the raw address of the sender.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IUriReadRequest">
      <summary>
            Tria-Link message to read register values.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IUriReadRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Nullable{Triamec.TriaLink.TamValue32}[])">
      <summary>Creates a Tria-Link response message.</summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="registerValues">The register values to return. Some elements may be <see langword="null" />.
            </param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.IUriReadRequest.TryGetIndex(System.Int32,System.UInt32@)">
      <summary>
            Gets the requested URI index at the specified position.
            </summary>
      <param name="registerIndex">The positional index.</param>
      <param name="index">The requested URI index.</param>
      <returns>Whether an URI is requested at the specified position.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IUriReadResponse">
      <summary>Tria-Link message to read register values.</summary>
    </member>
    <member name="M:Triamec.TriaLink.IUriReadResponse.TryGetValue(System.Int32,Triamec.TriaLink.TamValue32@)">
      <summary>Tries to get the read value.</summary>
      <param name="index">The index of the read register.</param>
      <param name="value">The read value, or <see cref="F:Triamec.TriaLink.TamValue32.Zero" />, if the result is
            <see langword="false" />.</param>
      <returns>Whether the specified register was successfully read.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is smaller than <c>0</c> or
            greater or equal to <see cref="F:Triamec.TriaLink.Packets.IsochronousPacket.MaxSubscriptionValues" />.</exception>
    </member>
    <member name="T:Triamec.TriaLink.IUriWriteCommand">
      <summary>
            Tria-Link message to write register values or acknowledge written registers.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IUriWriteCommand.Index0">
      <summary>Gets the 0th write index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.IUriWriteCommand.Index1">
      <summary>Gets the 1st write index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.IUriWriteCommand.Index2">
      <summary>Gets the 2nd write index.</summary>
    </member>
    <member name="T:Triamec.TriaLink.IUriWriteRequest">
      <summary>
            Tria-Link message to write register values.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IUriWriteRequest.CreateResponse(System.Byte,Triamec.TriaLink.Port,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Creates a Tria-Link response message.</summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="index0">The 0th index written to.</param>
      <param name="index1">The 1st index written to.</param>
      <param name="index2">The 2nd index written to.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="P:Triamec.TriaLink.IUriWriteRequest.Value0">
      <summary>Gets the value for the 0th index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.IUriWriteRequest.Value1">
      <summary>Gets the value for the 1st index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.IUriWriteRequest.Value2">
      <summary>Gets the value for the 2nd index.</summary>
    </member>
    <member name="T:Triamec.TriaLink.IUriWriteResponse">
      <summary>
            Tria-Link message to write register values.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IWriteRegisterRangeRequest">
      <summary>
            Tria-Link message to write a register range.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IWriteRegisterRequest">
      <summary>
            Tria-Link message to write register values.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.MotorBaseConfiguration">
      <summary>
            Characterization of the connected motor configuration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.Unknown">
      <summary>
            The unspecified configuration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.NoMotorOneAxis">
      <summary>
            No Motor, 1 axis - One axis without motor.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.OneDCMotor">
      <summary>
            1 DC Motor - One DC motor connected between lines A and B (h-bridge).
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.OneSynchronousACMotor">
      <summary>
            Synchronous Motor 3-Phase - One synchronous 3-phase motor connected at lines A, B, and C.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.TwoDCMotors">
      <summary>
            2 DC Motors - Two DC motors connected between lines AB and CB (multiple axes).
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.NoMotorTwoAxes">
      <summary>
            No Motor, 2 axes - Two axes without motor.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.OneSynchronousTwoPhaseACMotor">
      <summary>
            Synchronous Motor 2-Phase - One synchronous 2-phase motor connected at lines AB and CB.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.IOOnlyDevice">
      <summary>
            IO only - Device without motor or axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.OneAsynchronousACMotor">
      <summary>
            Asynchronous Motor 3-Phase - One asynchronous 3-phase motor connected at lines A, B, and C.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.MotorBaseConfiguration.OneAsynchronousTwoPhaseACMotor">
      <summary>
            Asynchronous Motor 2-Phase - One asynchronous 2-phase motor connected at lines AB and CB.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.PathPlannerCommand">
      <summary>
            Path planner command.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.NoCommand">
      <summary>
            No command.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.Init">
      <summary>
            Initialize the path planner.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute">
      <summary>
            Move absolute to the desired position.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_Vel">
      <summary>
            Move absolute to the desired position. Use dedicated velocity.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveAbsolute_VelAcc">
      <summary>
            Move absolute to the desired position. Use dedicated velocity and acceleration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative">
      <summary>
            Move a relative distance to the actual position.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_Vel">
      <summary>
            Move a relative distance to the actual position. Use dedicated velocity.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveRelative_VelAcc">
      <summary>
            Move a relative distance to the actual position. Use dedicated velocity and acceleration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive">
      <summary>
            Move a relative distance additional to the previous command position.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_Vel">
      <summary>
            Move a relative distance additional to the previous command position. Use dedicated velocity.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveAdditive_VelAcc">
      <summary>
            Move a relative distance additional to the previous command position. Use dedicated velocity and acceleration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveVelocity">
      <summary>
            Move continuously with constant velocity.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveVelocity_Acc">
      <summary>
            Move continuously with constant velocity. Use dedicated velocity and acceleration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveDirectCoupled">
      <summary>
            Move synchronously to another axis.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.MoveCoupled">
      <summary>
            Move coupled to another axis, calculating kinematic coupling with Tama.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.CoupleOut">
      <summary>
            Immediately disengages coupling and maintains velocity.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.Stop">
      <summary>
            Stop the current move.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.Stop_Acc">
      <summary>
            Stop the current move. Use dedicated acceleration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.EmergencyStop">
      <summary>
            Stop the current move with maximal move dynamic.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.SetPosition">
      <summary>
            Set the positions to a new absolute position.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.SetPositionRelative">
      <summary>
            Shift all the positions with a relative distance to a new position.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl">
      <summary>
            Exert a constant torque or force.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_Vel">
      <summary>
            Exert a constant torque or force. Use dedicated velocity.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.TorqueControl_VelAcc">
      <summary>
            Exert a constant torque or force. Use dedicated velocity and acceleration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerCommand.TorqueLimit">
      <summary>
            Set torque limit values used in torque limited moves.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.PathPlannerDirection">
      <summary>
            Direction property of move commands.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerDirection.Current">
      <summary>
            Moves in current direction.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerDirection.Positive">
      <summary>
            Moves always in positive direction.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerDirection.Shortest">
      <summary>
            Moves on the shortest path.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerDirection.Negative">
      <summary>
            Moves always in negative direction.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.PathPlannerExecutionOption">
      <summary>
            Execution option property of move commands.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerExecutionOption.Immediate">
      <summary>
            Execute move command immediate.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PathPlannerExecutionOption.Deferred">
      <summary>
            Execute move Command when axis is idle.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.PeripheryDeviceIdentification">
      <summary>
            Identification addresses of peripheral devices.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.None">
      <summary>
            No peripheral device.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Service">
      <summary>
            Device for FPGA service functions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.CurrentFilter">
      <summary>
            Device for the current filter data.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.PositionFilter">
      <summary>
            Device for the position filter data.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Encoder">
      <summary>
            Encoder function device.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.AnalogEncoder">
      <summary>
            Analog encoder registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Monitor">
      <summary>
            Device for monitoring voltages, temperatures etc.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.PhysicalLink">
      <summary>
            Ethernet PHY1 device.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Sdram">
      <summary>
            Device for the SDRAM.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Extension">
      <summary>
            Device of the external hardware module.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.DigitalInput">
      <summary>
            Device for the digital inputs configuration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.PacketFeeders">
      <summary>
            Device for the SDRAM packet feeders.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.SerialEncoder">
      <summary>
            Device for EnDat and other 3d party serial encoder interfaces.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Management">
      <summary>
            Device for the link management bus.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.EncoderDigitalInput">
      <summary>
            Device for the encoder digital inputs configuration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Pwm">
      <summary>
            Device for the PWM output device configuration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Spi">
      <summary>
            Serial peripheral interface device.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.PulseTrain">
      <summary>
            Device for the pulse train configuration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.DigitalOutput">
      <summary>
            Device for the Digital output configuration.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.AnalogOutput">
      <summary>
            Device for the configuration of analog outputs.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.AnalogInput">
      <summary>
            Device for the configuration of analog inputs.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.MonitorController">
      <summary>
            Device for the monitor controller input/ouput.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Ethercat">
      <summary>
            Device for EtherCAT specific functions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.Test">
      <summary>
            Device for testing.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.SecondaryFpgaAccessA">
      <summary>
            Peripheral device providing access information about the first of two possibly connected secondary FPGAs.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PeripheryDeviceIdentification.SecondaryFpgaAccessB">
      <summary>
            Peripheral device providing access information about the second of two possibly connected secondary FPGAs.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Port">
      <summary>
            A Tria-Link port specifies a location within a Tria-Link station. The header of a Tria-Link packet provides a port number each for the source and destination address and controls the correct routing of a request and response packet.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Port.Local">
      <summary>
            Port for local requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Port.StatusControl">
      <summary>
            Port for status/control requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Port.Dsp">
      <summary>
            Port for DSP requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Port.PciUsb">
      <summary>
            Port for PCI requests.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ProductType">
      <summary>
            Product identifier.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductType.AllowUpdateWhenOperational">
      <summary>
            Gets a value indicating whether the component may receive a firmware update when it is in operational state.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ProductType.Dependencies(System.String)">
      <summary>
            Gets an enumeration of <see cref="T:Triamec.TriaLink.ProductType" />s this <see cref="T:Triamec.TriaLink.ProductType" /> depends upon for correct
            functionality.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductType.Description">
      <summary>
            Gets a short product description.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ProductType.Equals(System.Object)">
      <summary>
            Gets whether the specified object is equal to this <see cref="T:Triamec.TriaLink.ProductType" />.
            </summary>
      <param name="obj">The object to compare with the current <see cref="T:Triamec.TriaLink.ProductType" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:Triamec.TriaLink.ProductType" /> with the same
            <see cref="P:Triamec.TriaLink.ProductType.Name" /> than this <see cref="T:Triamec.TriaLink.ProductType" />; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.ProductType.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Triamec.TriaLink.ProductType.GetProductTypeFromHardwareIdInternal(System.UInt32)">
      <summary>
            Gets the product type for a specified hardware identifier.
            </summary>
      <param name="hardwareId">The hardware id.</param>
      <returns>
            The product type for the given <paramref name="hardwareId" /> or <see cref="P:Triamec.TriaLink.ProductType.Unknown" /> if not known.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.ProductType.IsStoDependent(System.String)">
      <summary>
            Gets a value indicating whether the component depends on STO for correct functionality.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductType.Manufacturer">
      <summary>
            Gets the manufacturer of products of this <see cref="T:Triamec.TriaLink.ProductType" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductType.Name">
      <summary>
            Gets the unique name of this <see cref="T:Triamec.TriaLink.ProductType" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ProductType.Register(Triamec.TriaLink.ProductType)">
      <summary>
            Registers the specified <see cref="T:Triamec.TriaLink.ProductType" /> to the system.
            </summary>
      <param name="type">The product type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Triamec.TriaLink.ProductType.RegisteredTypes">
      <summary>
            Gets the list of <see cref="M:Triamec.TriaLink.ProductType.Register(Triamec.TriaLink.ProductType)" />ed <see cref="T:Triamec.TriaLink.ProductType" />s.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductType.StationType">
      <summary>
            Gets the fundamental type of the product.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ProductType.ToString">
      <summary>
            Returns <see cref="P:Triamec.TriaLink.ProductType.Name" />.
            </summary>
      <returns>The value of <see cref="P:Triamec.TriaLink.ProductType.Name" />.</returns>
    </member>
    <member name="P:Triamec.TriaLink.ProductType.Unknown">
      <summary>
            Gets the unknown <see cref="T:Triamec.TriaLink.ProductType" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductType.Value">
      <summary>
            Gets the unique value of this <see cref="T:Triamec.TriaLink.ProductType" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ProductTypeConfiguration">
      <summary>
            Mutable version of <see cref="T:Triamec.TriaLink.ProductType" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ProductTypeConfiguration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.TriaLink.ProductTypeConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.AllowUpdateWhenOperational">
      <summary>
            Gets or sets a value indicating whether the component may receive a firmware update when it is in
            operational state.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.BreakingChanges">
      <summary>
            Gets or sets the microcontroller firmware versions introducing breaking changes.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.CompliantProductTypes">
      <summary>
            Gets or sets the interchangeable product types.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.DependentUponProductTypes">
      <summary>
            Gets or sets the product types which the specified product type depends upon for correct functionality.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.DependsOnSto">
      <summary>
            Gets or sets a value indicating whether the component depends on STO for correct functionality.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.Description">
      <summary>
            Gets a short product description.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.HexValue">
      <summary>
            Gets or sets a hexadecimal string representation of <see cref="P:Triamec.TriaLink.ProductType.Value" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.Manufacturer">
      <summary>
            Gets the manufacturer of products of this <see cref="T:Triamec.TriaLink.ProductType" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.Name">
      <summary>
            Gets the unique name of this <see cref="T:Triamec.TriaLink.ProductType" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.StationType">
      <summary>
            Gets the fundamental type of the product.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.ProductTypeConfiguration.SupportedMotorBaseConfigurations">
      <summary>
            Gets or sets the supported <see cref="T:Triamec.TriaLink.MotorBaseConfiguration" />s.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.PublicationCommand">
      <summary>
            Activation and trigger condition of a publication.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.Off">
      <summary>
            Disable the publication.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.Unconditional">
      <summary>
            Enable the publication without condition.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.AboveLevel">
      <summary>
            Enable the publication whenever the trigger signal is above the trigger level.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.BelowLevel">
      <summary>
            Enable the publication whenever the trigger signal is below the trigger level.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.RaisingEdge">
      <summary>
            Enable the publication when the trigger signal crosses the trigger level with a raising edge.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.FallingEdge">
      <summary>
            Enable the publication when the trigger signal crosses the trigger level with a falling edge.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.AnyEdge">
      <summary>
            Enable the publication when the trigger signal changes by a value greater than the trigger epsilon.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.AnyEdgeEvent">
      <summary>
            Enable publication of one event when the trigger signal changes by a value greater than the trigger epsilon.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.PublicationCommand.Placeholder100kHz">
      <summary>
            Reserved to indicate a publisher slot used for the secondary packet of a 100kHz subscription. Don't use.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.RegisterRangeLength">
      <summary>
            The register range lengths.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.RegisterRangeLength.Length0">
      <summary>Length0</summary>
    </member>
    <member name="F:Triamec.TriaLink.RegisterRangeLength.Length1">
      <summary>Length1</summary>
    </member>
    <member name="F:Triamec.TriaLink.RegisterRangeLength.Length2">
      <summary>Length2</summary>
    </member>
    <member name="F:Triamec.TriaLink.RegisterRangeLength.Length3">
      <summary>Length3</summary>
    </member>
    <member name="F:Triamec.TriaLink.RegisterRangeLength.Length4">
      <summary>Length4</summary>
    </member>
    <member name="F:Triamec.TriaLink.RegisterRangeLength.Length5">
      <summary>Length5</summary>
    </member>
    <member name="T:Triamec.TriaLink.ResponseStartupSettings">
      <summary>
            Startup settings read using the <see cref="T:Triamec.TriaLink.TriaLinkProtocol" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.ResponseStartupSettings.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Triamec.TriaLink.ResponseStartupSettings</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Triamec.TriaLink.ResponseStartupSettings.GetMD5Checksum">
      <summary>
            Gets the MD5 checksum over the persisted parameter registers.
            </summary>
      <returns>
        <para>The MD5 checksum, if this instance is retrieved from a device supporting this feature and
            <see cref="P:Triamec.TriaLink.StartupSettings.StandAloneActive" /> is <see langword="true" />.</para>
        <para>An MD5 checksum having bitwise <c>0</c>, if this instance is retrieved from a device and
            <see cref="P:Triamec.TriaLink.StartupSettings.StandAloneActive" /> is <see langword="false" />, or if the device does not support
            this feature.
            </para>
        <para>Otherwise, <see langword="null" />.</para>
      </returns>
    </member>
    <member name="P:Triamec.TriaLink.ResponseStartupSettings.Inconsistencies">
      <summary>
            Gets inconsistencies while reading the <see cref="T:Triamec.TriaLink.StartupSettings" /> from a device.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.SchedulerCommand">
      <summary>
            Trigger for a scheduler to execute a specified schedule.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SchedulerCommand.None">
      <summary>
            No trigger.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SchedulerCommand.Start">
      <summary>
            Start sending messages from the beginning of a schedule.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SchedulerCommand.Stop">
      <summary>
            Stop sending messages.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ScheduleState">
      <summary>
            Execution state of a schedule.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ScheduleState.Stopped">
      <summary>
            Not executed.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ScheduleState.Started">
      <summary>
            Executed by a scheduler.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.SecondaryPeripheryDeviceIdentification">
      <summary>
            Identification addresses of peripheral devices.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SecondaryPeripheryDeviceIdentification.SecondaryFpgaInfo">
      <summary>
            Peripheral device providing general information about the secondary FPGA.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SecondaryPeripheryDeviceIdentification.AnalogInput">
      <summary>
            Peripheral device providing access to analog inputs.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SecondaryPeripheryDeviceIdentification.Fir">
      <summary>
            Access the FIR-filter of a TOA3.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SecondaryPeripheryDeviceIdentification.Utility">
      <summary>
            Access the Utility register of a TOA3.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SecondaryPeripheryDeviceIdentification.DacRegister">
      <summary>
            Access the DAC internal registers of a TOA3.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SecondaryPeripheryDeviceIdentification.Fft">
      <summary>
            Peripheral device allowing to control a fast fourier transformation executed in the FPGA.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ServiceRequestCommand">
      <summary>
            Commands for service requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.None">
      <summary>No specific request.</summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.UriRead">
      <summary>
            Identifier for reading values from individual registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.UriWrite">
      <summary>
            Identifier for writing values to individual registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.MoveDouble">
      <summary>
            Identifier for path planner requests with double precision floating point positions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.ResetSubscriptions">
      <summary>
            Identifier for resetting subscriptions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.Publish">
      <summary>
            Identifier for preparing the publication of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.Subscribe">
      <summary>
            Identifier for setting up retrieval of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.EnableSubscription">
      <summary>
            Identifier for enabling the delivery of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.DriveControl">
      <summary>
            Identifier for controlling drives.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.AxisControl">
      <summary>
            Identifier for preparing axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.TamaControl">
      <summary>
            Identifier for controlling the Tama virtual machine.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.MoveFloat">
      <summary>
            Identifier for commanding moves with float or Float40 typed positions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.TestSignal">
      <summary>
            Identifier for controlling the test signal generator.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.ReadRegister">
      <summary>
            Identifier for requests for reading individual registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.WriteRegister">
      <summary>
            Identifier for writing values to individual registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.ReadRegisterRange">
      <summary>
            Identifier for requests for reading a range of registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.WriteRegisterRange">
      <summary>
            Identifier for writing values to a range of registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.FirmwareControl">
      <summary>
            Identifier for controlling the firmware.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.ReadFirmwareRange">
      <summary>
            Identifier for requesting firmware binary code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.WriteFirmwareRange">
      <summary>
            Identifier for programming firmware binary code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.ReadIdentification">
      <summary>
            Identifier for requesting device identifications.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.TimeUpdate">
      <summary>
            Identifier for requesting device identifications.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.ControlStartup">
      <summary>
            Identifier for control startup requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.ControlStatistics">
      <summary>
            Identifier for control statistics requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceRequestCommand.AddressControl">
      <summary>
            Identifier for address control requests.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.ServiceResponseCommand">
      <summary>
            Commands for service responses.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.None">
      <summary>No specific response.</summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.UriRead">
      <summary>
            Identifier for acknowledging individually read registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.UriWrite">
      <summary>
            Identifier for acknowledging individually written registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.MoveDouble">
      <summary>
            Identifier for acknowledging path planner requests with double precision floating point positions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.ResetSubscriptions">
      <summary>
            Identifier for acknowledging reset subscriptions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.Publish">
      <summary>
            Identifier for acknowledging the preparation of publishing isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.Subscribe">
      <summary>
            Identifier for acknowledging the setup for retrieval of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.EnableSubscription">
      <summary>
            Identifier for acknowledging the enabled delivery of isochronous packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.DriveControl">
      <summary>
            Identifier for acknowledging drive control requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.AxisControl">
      <summary>
            Identifier for acknowledging the preparation of axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.TamaControl">
      <summary>
            Identifier for acknowledge Tama virtual machine control requests.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.MoveFloat">
      <summary>
            Identifier for acknowledging move commands with float or Float40 typed positions.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.TestSignal">
      <summary>
            Identifier for acknowledging requests to the test signal generator.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.ReadRegister">
      <summary>
            Identifier for delivering individual register values.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.WriteRegister">
      <summary>
            Identifier for acknowledging individually written registers.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.ReadRegisterRange">
      <summary>
            Identifier for delivering a range of register values.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.WriteRegisterRange">
      <summary>
            Identifier for acknowledging written register ranges.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.FirmwareStatus">
      <summary>
            Identifier for acknowledging requests for controlling the firmware.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.WriteFirmwareRange">
      <summary>
            Identifier for acknowledging the programming of firmware binary code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.ReadIdentification">
      <summary>
            Identifier for delivering device identifications.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.ControlStartup">
      <summary>
            Identifier for control startup responses.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.ControlStatistics">
      <summary>
            Identifier for control statistics responses.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.ServiceResponseCommand.AddressControl">
      <summary>
            Identifier for address control responses.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.SetPositionMode">
      <summary>
            Mode of the <see cref="F:Triamec.TriaLink.PathPlannerCommand.SetPosition" /> command.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SetPositionMode.Absolute">
      <summary>
            Set the position to the specified value.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.SetPositionMode.Relative">
      <summary>
            Interprete position argument as distance from actual position.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.StartupSettings">
      <summary>
            Representation of the settings used for stand-alone startup 
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.StartupSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.StartupSettings" /> class.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.StartupSettings.CreateDeactivatedSettings">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.StartupSettings" /> class,
            representing the deactivated stand-alone mode.
            </summary>
      <returns>Returns a new instance of the <see cref="T:Triamec.TriaLink.StartupSettings" /> class,
            representing the deactivated stand-alone mode.</returns>
    </member>
    <member name="M:Triamec.TriaLink.StartupSettings.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object. </param>
      <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
    </member>
    <member name="M:Triamec.TriaLink.StartupSettings.GetHashCode">
      <summary>Serves as the default hash function. </summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.Group1Address">
      <summary>
            Gets or sets the first dynamic group address used for stand-alone mode with static address.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>The value passed to the setter is smaller than <see cref="F:Triamec.TriaLink.Groups.Addressee.MinGroupAddress" />.</para>
        <para>The value passed to the setter is greater than <see cref="F:Triamec.TriaLink.Groups.Addressee.MaxGroupAddress" /> and not equal
            to the <see cref="F:Triamec.TriaLink.Groups.Addressee.UndefinedGroupAddress" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">The value passed to the setter is not the
              <see cref="F:Triamec.TriaLink.Groups.Addressee.UndefinedGroupAddress" /> and is equal to one of the other group addresses.
              </exception>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.Group2Address">
      <summary>
            Gets or sets the second dynamic group address used for stand-alone mode with static address.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>The value passed to the setter is smaller than <see cref="F:Triamec.TriaLink.Groups.Addressee.MinGroupAddress" />.</para>
        <para>The value passed to the setter is greater than <see cref="F:Triamec.TriaLink.Groups.Addressee.MaxGroupAddress" /> and not equal
            to the <see cref="F:Triamec.TriaLink.Groups.Addressee.UndefinedGroupAddress" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">The value passed to the setter is not the
              <see cref="F:Triamec.TriaLink.Groups.Addressee.UndefinedGroupAddress" /> and is equal to one of the other group addresses.
              </exception>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.Group3Address">
      <summary>
            Gets or sets the third dynamic group address used for stand-alone mode with static address.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>The value passed to the setter is smaller than <see cref="F:Triamec.TriaLink.Groups.Addressee.MinGroupAddress" />.</para>
        <para>The value passed to the setter is greater than <see cref="F:Triamec.TriaLink.Groups.Addressee.MaxGroupAddress" /> and not equal
            to the <see cref="F:Triamec.TriaLink.Groups.Addressee.UndefinedGroupAddress" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">The value passed to the setter is not the
              <see cref="F:Triamec.TriaLink.Groups.Addressee.UndefinedGroupAddress" /> and is equal to one of the other group addresses.
              </exception>
    </member>
    <member name="M:Triamec.TriaLink.StartupSettings.IsStationNameValid">
      <summary>
            Returns true if the station address is valid; flase otherwise
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.StandAloneActive">
      <summary>
            Gets or sets a value indicating whether stand-alone mode is active.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.StartAsynchronousTamaVM">
      <summary>
            Gets or sets a value indicating whether asynchronous tama VM will be started during stand-alone startup.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.StartIsochronousTamaVM">
      <summary>
            Gets or sets a value indicating whether isochronous tama VM will be started during stand-alone startup.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.StationAddress">
      <summary>
            Gets or sets the station address used for stand-alone mode with static address.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>The value passed to the setter is smaller than <see cref="F:Triamec.TriaLink.Groups.TriaLinkStation.MinAddress" />.</para>
        <para>The value passed to the setter is greater than <see cref="F:Triamec.TriaLink.Groups.TriaLinkStation.MinAddress" />.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.StationName">
      <summary>
            Gets or sets the name of the station used for stand-alone mode.
            </summary>
      <exception cref="T:System.ArgumentNullException">The value passed to the setter is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">The value passed to the setter exceeds the number of characters
            specified in <see cref="F:Triamec.TriaLink.StartupSettings.StationNameCapacity" />.
              </exception>
    </member>
    <member name="F:Triamec.TriaLink.StartupSettings.StationNameCapacity">
      <summary>
            Gets the number of characters <see cref="P:Triamec.TriaLink.StartupSettings.StationName" /> can hold.
            <para>The value is <c>16</c>.</para></summary>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.UseLocalClock">
      <summary>
            Gets or sets a value indicating whether local clock will be used for stand-alone mode.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.StartupSettings.UseStaticAddresses">
      <summary>
            Gets or sets a value indicating whether static addresses will be used for stand-alone device.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.StationType">
      <summary>
            Fundamental types of Tria-Link stations.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.StationType.Station">
      <summary>
            Status command processor.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.StationType.Device">
      <summary>
        <see cref="F:Triamec.TriaLink.StationType.Station" /> processing service commands.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.StationType.Drive">
      <summary>
        <see cref="F:Triamec.TriaLink.StationType.Device" /> supporting one or more real or virtual axes.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.StationType.DriveOnLocalNode1">
      <summary>
        <see cref="F:Triamec.TriaLink.StationType.Device" /> with <see cref="F:Triamec.TriaLink.StationType.Drive" /> on local node 1.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.StatisticSelector">
      <summary>
            The commands of the <see cref="F:Triamec.TriaLink.ServiceRequestCommand.ControlStatistics" /> request.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.StatisticSelector.StatusError">
      <summary>
            Asks a station to send an <see cref="T:Triamec.TriaLink.IControlStatisticsResponse" /> packet containing
            status and error counters.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.StatisticSelector.Internals">
      <summary>
            Asks a station to send an <see cref="T:Triamec.TriaLink.IControlStatisticsResponse" /> packet containing
            internal counters.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TamaControlCommands">
      <summary>
            Specifies Tama control commands
            for use in <see cref="M:Triamec.TriaLink.TriaLinkProtocol.ControlTama(System.Object,Triamec.TriaLink.Sessions.IDriveControlResponseHandler,Triamec.TriaLink.Groups.IAddressee,Triamec.TriaLink.TamaControlCommands,Triamec.TriaLink.TamaVMCommand,Triamec.TriaLink.TamaVMCommand,System.UInt16)" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaControlCommands.None">
      <summary>No command.</summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaControlCommands.ControlIsochronousTamaVM">
      <summary>Controls the isochronous Tama virtual machine.</summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaControlCommands.ControlAsynchronousTamaVM">
      <summary>Controls the asynchronous Tama virtual machine.</summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaControlCommands.All">
      <summary>Controls all Tama virtual machines.</summary>
    </member>
    <member name="T:Triamec.TriaLink.TamaVirtualMachineState">
      <summary>
            Tama Virtual Machine state.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVirtualMachineState.NoCode">
      <summary>
            No code is downloaded for the Tama virtual machines.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVirtualMachineState.NoStack">
      <summary>
            Stack of the Tama virtual machine is not initialized.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVirtualMachineState.Ready">
      <summary>
            The Tama virtual machine is initialized and ready.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVirtualMachineState.Operational">
      <summary>
            The Tama virtual machine is enabled and operational.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TamaVMCommand">
      <summary>
            Type of the Tama virtual machine control command.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVMCommand.DoNothing">
      <summary>
            No command for the Tama virtual machine.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVMCommand.VerifyCode">
      <summary>
            Verify the consistency of the Tama program code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVMCommand.DismissCode">
      <summary>
            Dismiss the Tama program code in preparation to load another program.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVMCommand.Initialize">
      <summary>
            Initializes the stack of the Tama virtual machine.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVMCommand.Enable">
      <summary>
            Sets the Tama virtual machine operational for executing code.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamaVMCommand.Disable">
      <summary>
            Stops the Tama virtual machine from executing code.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TamMInt">
      <summary>
            Representation of a signed integer of up to 32 bit,
            in signed-magnitude representation.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.#ctor(System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="width">The bit width of the <see cref="T:Triamec.TriaLink.TamMInt" />.</param>
    </member>
    <member name="P:Triamec.TriaLink.TamMInt.AsInt32">
      <summary>
            Gets or sets the value of this <see cref="T:Triamec.TriaLink.TamMInt" />,
            transformed to/from an <see cref="T:System.Int32" /> value.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TamMInt.BitData">
      <summary>
            Gets or sets the raw bit data of this <see cref="T:Triamec.TriaLink.TamMInt" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>The value to assign uses more bits than defined by the bit <see cref="P:Triamec.TriaLink.TamMInt.Width" />.</para>
        <para>The value to assign represents -0.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamMInt" />s for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.TriaLink.TamMInt" /> to compare with.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamMInt" /> 
            represent the same <see cref="P:Triamec.TriaLink.TamMInt.AsInt32" /> value.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.TriaLink.TamMInt" />.
            </summary>
      <returns>Returns the hash code of the <see cref="P:Triamec.TriaLink.TamMInt.AsInt32" /> representation of this <see cref="T:Triamec.TriaLink.TamMInt" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="P:Triamec.TriaLink.TamMInt.Mask">
      <summary>
            Gets the bit mask with all used bits of the internal data.
            For example, gets <c>0x000000FFu</c> when <c><see cref="P:Triamec.TriaLink.TamMInt.Width" /> = 8</c>.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamMInt.MAX_WIDTH">
      <summary>
            The maximum width of a <see cref="T:Triamec.TriaLink.TamMInt" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamMInt.MIN_WIDTH">
      <summary>
            The minimum width of a <see cref="T:Triamec.TriaLink.TamMInt" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.op_Equality(Triamec.TriaLink.TamMInt,Triamec.TriaLink.TamMInt)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamMInt" />s for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamMInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamMInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamMInt" />s 
            represent the same <see cref="P:Triamec.TriaLink.TamMInt.AsInt32" /> value.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.op_GreaterThan(Triamec.TriaLink.TamMInt,Triamec.TriaLink.TamMInt)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamMInt" /> struct for being greater than another <see cref="T:Triamec.TriaLink.TamMInt" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamMInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamMInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamMInt.AsInt32" /> value
            of <paramref name="v1" /> is greater than that of <paramref name="v2" />.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.op_Inequality(Triamec.TriaLink.TamMInt,Triamec.TriaLink.TamMInt)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamMInt" />s for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamMInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamMInt" /> in the comparison.</param>
      <returns>Returns <see langword="false" /> if both <see cref="T:Triamec.TriaLink.TamMInt" />s
            represent the same <see cref="P:Triamec.TriaLink.TamMInt.AsInt32" /> value.
            Otherwise, returns <see langword="true" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.op_LessThan(Triamec.TriaLink.TamMInt,Triamec.TriaLink.TamMInt)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamMInt" /> for being smaller than another <see cref="T:Triamec.TriaLink.TamMInt" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamMInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamMInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamMInt.AsInt32" /> value
            of <paramref name="v1" /> is smaller than that of <paramref name="v2" />.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamMInt.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified format.
            </summary>
      <param name="format">
        <para>The String specifying the format to use.</para>
        <para>-or-</para>
        <para>a null reference to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</para>
      </param>
      <param name="formatProvider">
        <para>The <see cref="T:System.IFormatProvider" /> to use to format the value.</para>
        <para>-or-</para>
        <para>a null reference to obtain the numeric format information from the current locale setting of the operating system.</para>
      </param>
      <returns></returns>
    </member>
    <member name="P:Triamec.TriaLink.TamMInt.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.TriaLink.TamMInt" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TamSInt">
      <summary>
            Representation of a signed integer of up to 32 bit,
            in two's-complement representation.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.#ctor(System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="width">The bit width of the <see cref="T:Triamec.TriaLink.TamSInt" />.</param>
    </member>
    <member name="P:Triamec.TriaLink.TamSInt.AsInt32">
      <summary>
            Gets or sets the value of this <see cref="T:Triamec.TriaLink.TamSInt" />,
            transformed to/from an <see cref="T:System.Int32" /> value.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TamSInt.BitData">
      <summary>
            Gets or sets the raw bit data of this <see cref="T:Triamec.TriaLink.TamSInt" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to assign uses more bits than defined by the bit <see cref="P:Triamec.TriaLink.TamSInt.Width" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamSInt" />s for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.TriaLink.TamSInt" /> to compare with.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamSInt" /> 
            represent the same <see cref="P:Triamec.TriaLink.TamSInt.AsInt32" /> value.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.TriaLink.TamSInt" />.
            </summary>
      <returns>Returns the hash code of the <see cref="P:Triamec.TriaLink.TamSInt.AsInt32" /> representation of this <see cref="T:Triamec.TriaLink.TamSInt" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="P:Triamec.TriaLink.TamSInt.Mask">
      <summary>
            Gets the bit mask with all used bits of the internal data.
            For example, gets <c>0x000000FFu</c> when <c><see cref="P:Triamec.TriaLink.TamSInt.Width" /> = 8</c>.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamSInt.MAX_WIDTH">
      <summary>
            The maximum width of a <see cref="T:Triamec.TriaLink.TamSInt" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamSInt.MIN_WIDTH">
      <summary>
            The minimum width of a <see cref="T:Triamec.TriaLink.TamSInt" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.op_Equality(Triamec.TriaLink.TamSInt,Triamec.TriaLink.TamSInt)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamSInt" />s for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamSInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamSInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamSInt" />s 
            represent the same <see cref="P:Triamec.TriaLink.TamSInt.AsInt32" /> value.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.op_GreaterThan(Triamec.TriaLink.TamSInt,Triamec.TriaLink.TamSInt)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamSInt" /> struct for being greater than another <see cref="T:Triamec.TriaLink.TamSInt" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamSInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamSInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamSInt.AsInt32" /> value
            of <paramref name="v1" /> is greater than that of <paramref name="v2" />.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.op_Inequality(Triamec.TriaLink.TamSInt,Triamec.TriaLink.TamSInt)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamSInt" />s for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamSInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamSInt" /> in the comparison.</param>
      <returns>Returns <see langword="false" /> if both <see cref="T:Triamec.TriaLink.TamSInt" />s
            represent the same <see cref="P:Triamec.TriaLink.TamSInt.AsInt32" /> value.
            Otherwise, returns <see langword="true" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.op_LessThan(Triamec.TriaLink.TamSInt,Triamec.TriaLink.TamSInt)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamSInt" /> for being smaller than another <see cref="T:Triamec.TriaLink.TamSInt" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamSInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamSInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamSInt.AsInt32" /> value
            of <paramref name="v1" /> is smaller than that of <paramref name="v2" />.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamSInt.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified format.
            </summary>
      <param name="format">
        <para>The String specifying the format to use.</para>
        <para>-or-</para>
        <para>a null reference to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</para>
      </param>
      <param name="formatProvider">
        <para>The <see cref="T:System.IFormatProvider" /> to use to format the value.</para>
        <para>-or-</para>
        <para>a null reference to obtain the numeric format information from the current locale setting of the operating system.</para>
      </param>
      <returns></returns>
    </member>
    <member name="P:Triamec.TriaLink.TamSInt.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.TriaLink.TamSInt" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TamUInt">
      <summary>
            Representation of an unsigned integer of up to 32 bit.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.#ctor(System.Byte)">
      <summary>
            Constructor
            </summary>
      <param name="width">The bit width of the <see cref="T:Triamec.TriaLink.TamUInt" />.</param>
    </member>
    <member name="P:Triamec.TriaLink.TamUInt.AsUInt32">
      <summary>
            Gets or sets the value of this <see cref="T:Triamec.TriaLink.TamUInt" />,
            transformed to/from an <see cref="T:System.UInt32" /> value.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TamUInt.BitData">
      <summary>
            Gets or sets the raw bit data of this <see cref="T:Triamec.TriaLink.TamUInt" />.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to assign uses more bits than defined by the bit <see cref="P:Triamec.TriaLink.TamUInt.Width" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.CompareTo(System.Object)">
      <summary>
            Compares the current instance with another object of the same type.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamUInt" />s for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.TriaLink.TamUInt" /> to compare with.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamUInt" /> 
            represent the same <see cref="P:Triamec.TriaLink.TamUInt.AsUInt32" /> value.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.TriaLink.TamUInt" />.
            </summary>
      <returns>Returns the hash code of the <see cref="P:Triamec.TriaLink.TamUInt.AsUInt32" /> representation of this <see cref="T:Triamec.TriaLink.TamUInt" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="P:Triamec.TriaLink.TamUInt.Mask">
      <summary>
            Gets the bit mask with all used bits of the internal data.
            For example, gets <c>0x000000FFu</c> when <c><see cref="P:Triamec.TriaLink.TamUInt.Width" /> = 8</c>.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamUInt.MAX_WIDTH">
      <summary>
            The maximum width of a <see cref="T:Triamec.TriaLink.TamUInt" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TamUInt.MIN_WIDTH">
      <summary>
            The minimum width of a <see cref="T:Triamec.TriaLink.TamUInt" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.op_Equality(Triamec.TriaLink.TamUInt,Triamec.TriaLink.TamUInt)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamUInt" />s for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamUInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamUInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamUInt" />s 
            represent the same <see cref="P:Triamec.TriaLink.TamUInt.AsUInt32" /> value.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.op_GreaterThan(Triamec.TriaLink.TamUInt,Triamec.TriaLink.TamUInt)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamUInt" /> struct for being greater than another <see cref="T:Triamec.TriaLink.TamUInt" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamUInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamUInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamUInt.AsUInt32" /> value
            of <paramref name="v1" /> is greater than that of <paramref name="v2" />.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.op_Inequality(Triamec.TriaLink.TamUInt,Triamec.TriaLink.TamUInt)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamUInt" />s for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamUInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamUInt" /> in the comparison.</param>
      <returns>Returns <see langword="false" /> if both <see cref="T:Triamec.TriaLink.TamUInt" />s
            represent the same <see cref="P:Triamec.TriaLink.TamUInt.AsUInt32" /> value.
            Otherwise, returns <see langword="true" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.op_LessThan(Triamec.TriaLink.TamUInt,Triamec.TriaLink.TamUInt)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamUInt" /> for being smaller than another <see cref="T:Triamec.TriaLink.TamUInt" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamUInt" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamUInt" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamUInt.AsUInt32" /> value
            of <paramref name="v1" /> is smaller than that of <paramref name="v2" />.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted. </param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information. </param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamUInt.ToString(System.String,System.IFormatProvider)">
      <summary>
            Formats the value of the current instance using the specified format.
            </summary>
      <param name="format">
        <para>The String specifying the format to use.</para>
        <para>-or-</para>
        <para>a null reference to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</para>
      </param>
      <param name="formatProvider">
        <para>The <see cref="T:System.IFormatProvider" /> to use to format the value.</para>
        <para>-or-</para>
        <para>a null reference to obtain the numeric format information from the current locale setting of the operating system.</para>
      </param>
      <returns></returns>
    </member>
    <member name="P:Triamec.TriaLink.TamUInt.Width">
      <summary>
            Gets the bit width of this <see cref="T:Triamec.TriaLink.TamUInt" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TamValue16">
      <summary>
            A TamValue16 is a 16-bit value
            that can be seen as 
            a <see cref="T:System.UInt16" /> or a <see cref="T:System.Int16" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.#ctor(System.Boolean)">
      <summary>
            Constructor
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.#ctor(System.IConvertible)">
      <summary>
            Constructor for values
            with underlying system type <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />,
            or <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value to assign.</param>
      <exception cref="T:System.InvalidCastException">
            The underlying system type of <paramref name="value" />
            is not <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />,
            or <see cref="T:System.Boolean" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.#ctor(System.Int16)">
      <summary>
            Constructor
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.#ctor(System.UInt16)">
      <summary>
            Constructor
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to assign.</param>
    </member>
    <member name="P:Triamec.TriaLink.TamValue16.AsBoolean">
      <summary>
            Gets or sets the value as a <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TamValue16.AsShort">
      <summary>
            Gets or sets the value as a <see cref="T:System.Int16" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TamValue16.AsUShort">
      <summary>
            Gets or sets the value as an <see cref="T:System.UInt16" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.CompareTo(Triamec.TriaLink.TamValue16)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamValue16" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.TriaLink.TamValue16" /> to compare with.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamValue16" /> structs have 
            the same internal bit representation of their values,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.FromBoolean(System.Boolean)">
      <summary>
            Casts a <see cref="T:System.Boolean" /> to a <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Boolean" /> value as a <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.FromShort(System.Int16)">
      <summary>
            Casts a <see cref="T:System.Int16" /> to a <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Int16" /> value as a <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.FromUShort(System.UInt16)">
      <summary>
            Casts an <see cref="T:System.UInt16" /> to a <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt16" /> value as a <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <returns>Returns the hash code of the internal bit representation of the <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_Equality(Triamec.TriaLink.TamValue16,Triamec.TriaLink.TamValue16)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamValue16" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamValue16" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamValue16" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamValue16" /> structs have 
            the same internal bit representation of their values,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_GreaterThan(Triamec.TriaLink.TamValue16,Triamec.TriaLink.TamValue16)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamValue16" /> struct for being greater than another <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamValue16" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamValue16" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamValue16.AsUShort" /> value
            of <paramref name="v1" /> is greater than that of <paramref name="v2" />,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_Implicit(System.Boolean)~Triamec.TriaLink.TamValue16">
      <summary>
            Casts a <see cref="T:System.Boolean" /> to a <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Boolean" /> value as a <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_Implicit(System.Int16)~Triamec.TriaLink.TamValue16">
      <summary>
            Casts a <see cref="T:System.Int16" /> to a <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Int16" /> value as a <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_Implicit(System.UInt16)~Triamec.TriaLink.TamValue16">
      <summary>
            Casts an <see cref="T:System.UInt16" /> to a <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt16" /> value as a <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_Implicit(Triamec.TriaLink.TamValue16)~System.Boolean">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue16" /> to a <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Boolean" /> value of the <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_Implicit(Triamec.TriaLink.TamValue16)~System.UInt16">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue16" /> to an <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt16" /> value of the <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_Implicit(Triamec.TriaLink.TamValue16)~System.Int16">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue16" /> to an <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Int16" /> value of the <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_Inequality(Triamec.TriaLink.TamValue16,Triamec.TriaLink.TamValue16)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamValue16" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamValue16" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamValue16" /> in the comparison.</param>
      <returns>Returns <see langword="false" /> if both <see cref="T:Triamec.TriaLink.TamValue16" /> structs have 
            the same internal bit representation of their values,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="true" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.op_LessThan(Triamec.TriaLink.TamValue16,Triamec.TriaLink.TamValue16)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamValue16" /> struct for being smaller than another <see cref="T:Triamec.TriaLink.TamValue16" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamValue16" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamValue16" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamValue16.AsUShort" /> value
            of <paramref name="v1" /> is smaller than that of <paramref name="v2" />,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.ToBoolean(Triamec.TriaLink.TamValue16)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue16" /> to a <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Boolean" /> value of the <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.ToShort(Triamec.TriaLink.TamValue16)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue16" /> to an <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Int16" /> value of the <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue16.ToUShort(Triamec.TriaLink.TamValue16)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue16" /> to an <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt16" /> value of the <see cref="T:Triamec.TriaLink.TamValue16" />.</returns>
    </member>
    <member name="T:Triamec.TriaLink.TamValue32">
      <summary>
            A TamValue32 is a 32-bit value
            that can be seen as 
            a <see cref="T:System.Boolean" />, <see cref="T:System.UInt32" />, 
            <see cref="T:System.Int32" />, or a <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.TamValue32" /> struct.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.TamValue32" /> struct.
            </summary>
      <param name="lsb">The least significant byte.</param>
      <param name="slsb">The second least significant byte.</param>
      <param name="smsb">The second most significant byte.</param>
      <param name="msb">The most significant byte.</param>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.TamValue32" /> struct.
            </summary>
      <param name="value">Up to 4 <see cref="T:System.Byte" /> values to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.#ctor(System.IConvertible)">
      <summary>
            Constructor for values
            with underlying system type <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />,
            <see cref="T:System.Boolean" />, or <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value to assign.</param>
      <exception cref="T:System.InvalidCastException">
            The underlying system type of <paramref name="value" />
            is not <see cref="T:System.UInt32" />, <see cref="T:System.Int32" />,
            <see cref="T:System.Boolean" />, or <see cref="T:System.Single" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.TamValue32" /> struct.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.TamValue32" /> struct.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.#ctor(System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.TamValue32" /> struct.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to assign.</param>
    </member>
    <member name="P:Triamec.TriaLink.TamValue32.AsBoolean">
      <summary>
            Gets or sets the value as a <see cref="T:System.Boolean" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TamValue32.AsInt32">
      <summary>
            Gets or sets the value as an <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TamValue32.AsSingle">
      <summary>
            Gets or sets the value as a <see cref="T:System.Single" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TamValue32.AsUInt32">
      <summary>
            Gets or sets the value as an <see cref="T:System.UInt32" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.CompareTo(Triamec.TriaLink.TamValue32)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamValue32" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.TriaLink.TamValue32" /> to compare with.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamValue32" /> structs have 
            the same internal bit representation of their values,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.FromBool(System.Boolean)">
      <summary>
            Casts a <see cref="T:System.Boolean" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Boolean" /> value as a <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.FromInt32(System.Int32)">
      <summary>
            Casts an <see cref="T:System.Int32" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Int32" /> value as a <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.FromSingle(System.Single)">
      <summary>
            Casts a <see cref="T:System.Single" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Single" /> value as a <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.FromUInt(System.UInt32)">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <returns>Returns the hash code of the internal bit representation of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="P:Triamec.TriaLink.TamValue32.Item(System.Int32)">
      <summary>
            Gets or sets a byte of the value as a byte array.
            </summary>
      <param name="index">The index of the byte to retrieve.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not between <c>0</c>
            and <c>3</c>.</exception>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Equality(Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamValue32" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamValue32" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamValue32" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if both <see cref="T:Triamec.TriaLink.TamValue32" /> structs have 
            the same internal bit representation of their values,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_GreaterThan(Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamValue32" /> struct for being greater than another <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamValue32" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamValue32" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamValue32.AsUInt32" /> value
            of <paramref name="v1" /> is greater than that of <paramref name="v2" />,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Implicit(System.Boolean)~Triamec.TriaLink.TamValue32">
      <summary>
            Casts a <see cref="T:System.Boolean" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Boolean" /> value as a <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Implicit(System.Int32)~Triamec.TriaLink.TamValue32">
      <summary>
            Casts an <see cref="T:System.Int32" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Int32" /> value as a <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Implicit(System.Single)~Triamec.TriaLink.TamValue32">
      <summary>
            Casts a <see cref="T:System.Single" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Single" /> value as a <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Implicit(System.UInt32)~Triamec.TriaLink.TamValue32">
      <summary>
            Casts an <see cref="T:System.UInt32" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Implicit(Triamec.TriaLink.TamValue32)~System.Boolean">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to a <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Boolean" /> value of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Implicit(Triamec.TriaLink.TamValue32)~System.UInt32">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Implicit(Triamec.TriaLink.TamValue32)~System.Int32">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to an <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Int32" /> value of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Implicit(Triamec.TriaLink.TamValue32)~System.Single">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to a <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Single" /> value of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_Inequality(Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.TamValue32" /> structs for inequality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamValue32" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamValue32" /> in the comparison.</param>
      <returns>Returns <see langword="false" /> if both <see cref="T:Triamec.TriaLink.TamValue32" /> structs have 
            the same internal bit representation of their values,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="true" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.op_LessThan(Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Compares a <see cref="T:Triamec.TriaLink.TamValue32" /> struct for being smaller than another <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.TamValue32" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.TamValue32" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if the <see cref="P:Triamec.TriaLink.TamValue32.AsUInt32" /> value
            of <paramref name="v1" /> is smaller than that of <paramref name="v2" />,
            independent from the type of the value they have been created with.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.ToBoolean(Triamec.TriaLink.TamValue32)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to a <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Boolean" /> value of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.ToInt32(Triamec.TriaLink.TamValue32)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to an <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Int32" /> value of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.ToSingle(Triamec.TriaLink.TamValue32)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to a <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.Single" /> value of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32.ToUInt(Triamec.TriaLink.TamValue32)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to an <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.TriaLink.TamValue32" />.</returns>
    </member>
    <member name="F:Triamec.TriaLink.TamValue32.Zero">
      <summary>
            The value <c>0</c>.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TamValue32Pair">
      <summary>
            Pair of two <see cref="T:Triamec.TriaLink.TamValue32" />s.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TamValue32Pair.#ctor(Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>Initializes a new instance of the <see cref="T:Triamec.TriaLink.TamValue32Pair" /> struct.</summary>
      <param name="value0">The first value.</param>
      <param name="value1">The second value.</param>
    </member>
    <member name="P:Triamec.TriaLink.TamValue32Pair.Value0">
      <summary>Gets the first value.</summary>
    </member>
    <member name="P:Triamec.TriaLink.TamValue32Pair.Value1">
      <summary>Gets the second value.</summary>
    </member>
    <member name="T:Triamec.TriaLink.Timestamp">
      <summary>
            A Tria-Link time information structure with wrap-around arithmetics.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.#ctor(Triamec.TriaLink.TamValue32)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.Timestamp" /> struct.
            </summary>
      <param name="value">The <see cref="P:Triamec.TriaLink.TamValue32.AsUInt32" /> value to assign.</param>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.Add(Triamec.TriaLink.Timestamp,System.Int32)">
      <summary>
            Adds a duration to a <see cref="T:Triamec.TriaLink.Timestamp" />.
            </summary>
      <param name="timestamp">The augend.</param>
      <param name="duration">The addend.</param>
      <returns>Returns a <see cref="T:Triamec.TriaLink.Timestamp" /> 
            that is the amount of <paramref name="duration" /> 
            later than <paramref name="timestamp" />,
            with respect to wrap around the value range of timestamps.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is not in the legal range.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.CompareTo(Triamec.TriaLink.Timestamp)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </summary>
      <param name="other">An object to compare with this instance. </param>
      <returns>
            Returns a 32-bit signed integer that indicates 
            the relative order of the comparands. 
            The return value has these meanings:
            <list type="bullet"><item><description>Less than zero: This instance is less than <paramref name="other" />.</description></item><item><description>Zero: This instance is equal to <paramref name="other" />.</description></item><item><description>Greater than zero: This instance is greater than <paramref name="other" />.
            </description></item></list><para>
            For timestamps, the arithmetic rule imposed by <see cref="T:System.IComparable" /><c>a &lt; b &lt; c =&gt; a &lt; c</c>
            holds only if <c>a</c> and <c>c</c> are not more than half of the value range (<c>0x8000'0000u</c>),
            for example 2.485 days for a <see cref="P:Triamec.Tam.TamLink.TickPeriod" /> of 1000, apart from each other.
            Consequently, <see cref="T:Triamec.TriaLink.Timestamp" />s may only be used as <see cref="T:System.IComparable" />s,
            for example in the sorting algorithm of <see cref="T:System.Collections.SortedList" />, 
            if all the values to compare are within half of the value range.
            Otherwise, sorting algorithms may produce false results or even fail to terminate.
            </para><para>
            For most practical use cases, it is a legal assumption that the wrap-around period is larger 
            than twice the longest duration in timestamp comparisons or arithmetics.
            </para></returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.Equals(System.Object)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Timestamp" /> structs for equality.
            </summary>
      <param name="obj">The <see cref="T:Triamec.TriaLink.Timestamp" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.TriaLink.Timestamp" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.Equals(Triamec.TriaLink.Timestamp)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Timestamp" /> structs for equality.
            </summary>
      <param name="other">The <see cref="T:Triamec.TriaLink.Timestamp" /> to compare with.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.TriaLink.Timestamp" />s have the same value.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.FromTamValue32(Triamec.TriaLink.TamValue32)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to a <see cref="T:Triamec.TriaLink.Timestamp" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value as a <see cref="T:Triamec.TriaLink.Timestamp" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.GetHashCode">
      <summary>
            Gets a hash code for this <see cref="T:Triamec.TriaLink.Timestamp" />.
            </summary>
      <returns>The hash code of the internal representation of the <see cref="T:Triamec.TriaLink.Timestamp" />.</returns>
    </member>
    <member name="F:Triamec.TriaLink.Timestamp.MaxValue">
      <summary>
            Represents the largest possible value of <see cref="T:Triamec.TriaLink.Timestamp" />. This field is constant. 
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Timestamp.MinValue">
      <summary>
            Represents the smallest possible value of <see cref="T:Triamec.TriaLink.Timestamp" />. This field is constant. 
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_Addition(Triamec.TriaLink.Timestamp,System.Int32)">
      <summary>
            Adds a duration to a <see cref="T:Triamec.TriaLink.Timestamp" />.
            </summary>
      <param name="timestamp">The augend.</param>
      <param name="duration">The addend.</param>
      <returns>Returns a <see cref="T:Triamec.TriaLink.Timestamp" /> 
            that is the amount of <paramref name="duration" /> 
            later than <paramref name="timestamp" />,
            with respect to wrap around the value range of timestamps.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is not in the legal range.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_Equality(Triamec.TriaLink.Timestamp,Triamec.TriaLink.Timestamp)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Timestamp" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if both <see cref="T:Triamec.TriaLink.Timestamp" /> structs have 
            the same values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_GreaterThan(Triamec.TriaLink.Timestamp,Triamec.TriaLink.Timestamp)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Timestamp" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if <paramref name="v1" /> is greater than <paramref name="v2" />
            with respect to wrapping.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_GreaterThanOrEqual(Triamec.TriaLink.Timestamp,Triamec.TriaLink.Timestamp)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Timestamp" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if <paramref name="v1" /> is greater or equal than <paramref name="v2" />
            with respect to wrapping.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_Implicit(Triamec.TriaLink.TamValue32)~Triamec.TriaLink.Timestamp">
      <summary>
            Implicitly casts a <see cref="T:Triamec.TriaLink.TamValue32" /> to a <see cref="T:Triamec.TriaLink.Timestamp" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:Triamec.TriaLink.TamValue32" /> value as a <see cref="T:Triamec.TriaLink.Timestamp" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_Implicit(Triamec.TriaLink.Timestamp)~Triamec.TriaLink.TamValue32">
      <summary>
            Implicitly casts a <see cref="T:Triamec.TriaLink.Timestamp" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:Triamec.TriaLink.TamValue32" /> value of the <see cref="T:Triamec.TriaLink.Timestamp" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_Inequality(Triamec.TriaLink.Timestamp,Triamec.TriaLink.Timestamp)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Timestamp" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <returns>
        <see langword="true" /> if the <see cref="T:Triamec.TriaLink.Timestamp" /> structs have 
            different values.
            Otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_LessThan(Triamec.TriaLink.Timestamp,Triamec.TriaLink.Timestamp)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Timestamp" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if <paramref name="v1" /> is less than <paramref name="v2" />
            with respect to wrapping.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_LessThanOrEqual(Triamec.TriaLink.Timestamp,Triamec.TriaLink.Timestamp)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.Timestamp" /> structs for equality.
            </summary>
      <param name="v1">The first <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <param name="v2">The second <see cref="T:Triamec.TriaLink.Timestamp" /> in the comparison.</param>
      <returns>Returns <see langword="true" /> if <paramref name="v1" /> is less or equal than <paramref name="v2" />
            with respect to wrapping.
            Otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_Subtraction(Triamec.TriaLink.Timestamp,System.Int32)">
      <summary>
            Subtracts a duration from a <see cref="T:Triamec.TriaLink.Timestamp" />.
            </summary>
      <param name="timestamp">The minuend.</param>
      <param name="duration">The subtrahend.</param>
      <returns>Returns a <see cref="T:Triamec.TriaLink.Timestamp" /> 
            that is the amount of <paramref name="duration" /> 
            earlier than <paramref name="timestamp" />,
            with respect to wrap around the value range of timestamps.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is not in the legal range.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.op_Subtraction(Triamec.TriaLink.Timestamp,Triamec.TriaLink.Timestamp)">
      <summary>
            Subtracts a <see cref="T:Triamec.TriaLink.Timestamp" /> from another one.
            </summary>
      <param name="timestamp1">The minuend.</param>
      <param name="timestamp2">The subtrahend.</param>
      <returns>The duration between <paramref name="timestamp1" /> and <paramref name="timestamp2" />
            with respect to wrapping.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.Subtract(Triamec.TriaLink.Timestamp,System.Int32)">
      <summary>
            Subtracts a duration from a <see cref="T:Triamec.TriaLink.Timestamp" />.
            </summary>
      <param name="timestamp">The minuend.</param>
      <param name="duration">The subtrahend.</param>
      <returns>Returns a <see cref="T:Triamec.TriaLink.Timestamp" /> 
            that is the amount of <paramref name="duration" /> 
            earlier than <paramref name="timestamp" />,
            with respect to wrap around the value range of timestamps.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is not in the legal range.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.Subtract(Triamec.TriaLink.Timestamp,Triamec.TriaLink.Timestamp)">
      <summary>
            Subtracts a <see cref="T:Triamec.TriaLink.Timestamp" /> from another one.
            </summary>
      <param name="timestamp1">The minuend.</param>
      <param name="timestamp2">The subtrahend.</param>
      <returns>The duration between <paramref name="timestamp1" /> and <paramref name="timestamp2" />
            in the range <c>[-(<see cref="F:Triamec.TriaLink.Timestamp.TimestampRange" /> - 1) / 2) - 1..(<see cref="F:Triamec.TriaLink.Timestamp.TimestampRange" /> - 1) / 2) ]</c>.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.System#IComparable#CompareTo(System.Object)">
      <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
      <param name="obj">An object to compare with this instance. </param>
      <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order. </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance. </exception>
    </member>
    <member name="F:Triamec.TriaLink.Timestamp.TimestampRange">
      <summary>
            The range of a timestamp.
            <para>The value is <c>0xFFFF'FF00</c>.</para></summary>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.ToString">
      <summary>
            Gets a <see langword="string" /> representation of the <see cref="T:Triamec.TriaLink.Timestamp" /> as an unsigned integer value.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Timestamp.ToTamValue32(Triamec.TriaLink.Timestamp)">
      <summary>
            Casts a <see cref="T:Triamec.TriaLink.Timestamp" /> to a <see cref="T:Triamec.TriaLink.TamValue32" />.
            </summary>
      <param name="value">The value to cast.</param>
      <returns>Returns the <see cref="T:System.UInt32" /> value of the <see cref="T:Triamec.TriaLink.Timestamp" />.</returns>
    </member>
    <member name="T:Triamec.TriaLink.TriaLinkBootMode">
      <summary>
            The type of startup, addressing and identification
            to apply in the Tria-Link boot procedure.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkBootMode.None">
      <summary>
            No booting at all.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkBootMode.Initialize">
      <summary>
            Identify stations allowing for recovery.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkBootMode.Identify">
      <summary>
            Identify stations unintrusively.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TriaLinkEndpointType">
      <summary>
            The types of endpoints that exist in a <see cref="T:Triamec.TriaLink.TriaLinkProtocol" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkEndpointType.One">
      <summary>
            The endpoint type used for
            status/control packets, service packets (both asynchronous, session-based),
            and for event packets (isochronous, session-less).
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkEndpointType.Two">
      <summary>
            The endpoint type used for
            data logging packets (isochronous, session-less).
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.TriaLinkException">
      <summary>
            Tria-Link Exception.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkException.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, 
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:Triamec.TriaLink.TriaLinkProtocol">
      <summary>
            The Tria-Link communication protocol.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ActivateStartupSettings(System.Object,Triamec.TriaLink.Sessions.IStartupControlResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation,Triamec.TriaLink.StartupSettings)">
      <summary>
            Activates the startup settings in a station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />,
            or <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response, or <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="startupSettings">The startup settings.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="destination" /> is <see langword="null" />.</para>
        <para>
          <paramref name="startupSettings" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Boot(Triamec.TriaLink.TriaLinkBootMode)">
      <summary>
            Resets the entire Tria-Link with its adapter,
            all stations, groups and sessions,
            and (re-)identifies all <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s.
            </summary>
      <param name="bootMode">The boot mode.
            (This parameter is ignored when applied to a simulated Tria-Link.)</param>
      <returns>
            The number of stations found in the boot process,
            not including <see cref="P:Triamec.TriaLink.Groups.GroupManager.AdapterStation" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
            Attempt to <see cref="F:Triamec.TriaLink.TriaLinkBootMode.Initialize" /> a Tria-Link from an
            <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Observer" />.</exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">The Tria-Link could not be booted.</exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ControlAxis(System.Object,Triamec.TriaLink.Sessions.IAxisControlResponseHandler,Triamec.TriaLink.Groups.IAddressee,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.AxisControlCommands)">
      <summary>
            Enables or disables one or more axes of a Tria-Link station. Also resets axis which are in an erroneous
            state.
            </summary>
      <param name="axisNumbers">One or more axis numbers.</param>
      <param name="control">Specifies a particular action for the axis.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IAxisControlSession" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been
            <see cref="M:Triamec.TriaLink.TriaLinkProtocol.Dispose">Disposed</see>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ControlDrive(System.Object,Triamec.TriaLink.Sessions.IDriveControlResponseHandler,Triamec.TriaLink.Groups.IAddressee,System.Boolean,Triamec.TriaLink.DriveControlCommands,Triamec.TriaLink.DriveStopCommand,Triamec.TriaLink.MotorBaseConfiguration,Triamec.TriaLink.BridgePowerSwitch)">
      <summary>
            Controls the state of a drive on a Tria-Link station.
            </summary>
      <param name="commands">A combination of <see cref="T:Triamec.TriaLink.DriveControlCommands" /> to execute.</param>
      <param name="driveStopCommand">The emergency stop command.
            Only applies when <paramref name="commands" /> contains
            <see cref="F:Triamec.TriaLink.DriveControlCommands.EmergencyStop" />.</param>
      <param name="expectResponse">Whether to expect a response.</param>
      <param name="motorBaseConfiguration">The motor base configuration.
            Only applies when <paramref name="commands" /> contains
            <see cref="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration" />.</param>
      <param name="powerSwitch">The setting of the power section switch.
            Only applies when <paramref name="commands" /> contains
            <see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" />.</param>
      <param name="axisNumbers">One or more axis numbers.</param>
      <param name="control">Specifies a particular action for the axis.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            If <paramref name="expectResponse" /> is <see langword="true" />, a new session; otherwise,
            <see langword="null" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been
            <see cref="M:Triamec.TriaLink.TriaLinkProtocol.Dispose">Disposed</see>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ControlStatistics(Triamec.TriaLink.Groups.IAddressee,System.Boolean,Triamec.TriaLink.StatisticSelector,System.Boolean,Triamec.TriaLink.Groups.SubBus)">
      <summary>
            Controls the station statistic counters.
            </summary>
      <param name="expectResponse">Whether to expect a response.</param>
      <param name="statisticSelector">The statistic selector.</param>
      <param name="resetStatistics">if set to <see langword="true" />,
            the counters are reset after returning the current values.</param>
      <param name="bus">Which bus to address for master, <see cref="F:Triamec.TriaLink.Groups.SubBus.Local" /> otherwise.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>The counter values.</returns>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ControlTama(System.Object,Triamec.TriaLink.Sessions.IDriveControlResponseHandler,Triamec.TriaLink.Groups.IAddressee,Triamec.TriaLink.TamaControlCommands,Triamec.TriaLink.TamaVMCommand,Triamec.TriaLink.TamaVMCommand,System.UInt16)">
      <summary>
            Controls the state of the Tama virtual machines on a Tria-Link station.
            </summary>
      <param name="commands">A combination of <see cref="T:Triamec.TriaLink.TamaControlCommands" /> to execute.</param>
      <param name="isochronousVMCommand">The control command for the isochronous Tama virtual machine.
            Only applies when <paramref name="commands" /> contains
            <see cref="F:Triamec.TriaLink.TamaControlCommands.ControlIsochronousTamaVM" />.</param>
      <param name="asynchronousVMCommand">The control command for the asynchronous Tama virtual machine.
            Only applies when <paramref name="commands" /> contains
            <see cref="F:Triamec.TriaLink.TamaControlCommands.ControlAsynchronousTamaVM" />.</param>
      <param name="codeRangeLength">The length of the Tama code range.
            Only applies when <paramref name="isochronousVMCommand" /> or <paramref name="asynchronousVMCommand" />
            contains <see cref="F:Triamec.TriaLink.TamaVMCommand.VerifyCode" />.</param>
      <param name="axisNumbers">One or more axis numbers.</param>
      <param name="control">Specifies a particular action for the axis.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.ITamaControlSession" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been
            <see cref="M:Triamec.TriaLink.TriaLinkProtocol.Dispose">Disposed</see>.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.DeactivateStartupSettings(System.Object,Triamec.TriaLink.Sessions.IStartupControlResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation)">
      <summary>
            Deactivates the startup settings in a station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />,
            or <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response, or <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="startupSettings">The startup settings.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="destination" /> is <see langword="null" />.</para>
        <para>
          <paramref name="startupSettings" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.TriaLinkProtocol.DefaultTimeout">
      <summary>
            Gets the default time out, in milliseconds, for responses in this Tria-Link.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkProtocol.FfidRegisterAddress">
      <summary>
            The register address of the reserved peripheral register on the Tria-Link peripheral device where to
            find the FPGA firmware ID.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.GetStations">
      <summary>
            Gets the regular <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s.
            </summary>
      <returns>
            The <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s, excluding boot addressee, <see cref="P:Triamec.TriaLink.Groups.GroupManager.AdapterStation" /> and stations
            only claimed by <see cref="T:Triamec.TriaLink.Groups.Addressee" />s.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.GetTriaLinkProtocol(Triamec.TriaLink.Adapter.ITriaLink)">
      <summary>
            Factory to create a singleton <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> per <paramref name="link" />.
            </summary>
      <param name="link">The instance representing the Tria-Link that this protocol instance will serve.</param>
      <returns>
            A singleton <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> per <paramref name="link" />.
            </returns>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
            The protocol could not be instantiated due to a timeout.
            </exception>
    </member>
    <member name="P:Triamec.TriaLink.TriaLinkProtocol.GroupManager">
      <summary>
            Gets the group manager.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkProtocol.HridRegisterAddress">
      <summary>
            The register address of the reserved peripheral register on the Tria-Link peripheral device where to find
            the hardware revision identification.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkProtocol.HwidRegisterAddress">
      <summary>
            The register address of the reserved peripheral register on the Tria-Link peripheral device where to find
            the hardware identification.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkProtocol.HwsnRegisterAddress">
      <summary>
            The register address of the reserved peripheral register on the Tria-Link peripheral device where to find
            the hardware serial number.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.LoadStartupParameters(System.Object,Triamec.TriaLink.Sessions.IStartupControlResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation)">
      <summary>
            Loads the persistent parameters of the specified destination station into volatile storage.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkProtocol.MaximumFirmwareRangeLength">
      <summary>
            The maximum firmware range length to read or write.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkProtocol.MinimumFirmwareRangeLength">
      <summary>
            The minimum firmware range length to read or write.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriaLinkProtocol.PlidRegisterAddress">
      <summary>
            The register address of the reserved peripheral register on the Tria-Link peripheral device where to
            find the peripheral register layout ID.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ReadPeripheryRegister(System.Object,Triamec.TriaLink.Sessions.IStatusResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation,System.Byte,System.UInt32)">
      <summary>
            Reads a periphery register of a Tria-Link station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ReadRegisterRange(System.Object,Triamec.TriaLink.Sessions.IRegisterRangeResponseHandler,Triamec.TriaLink.Groups.IAddressee,System.UInt32,Triamec.TriaLink.RegisterRangeLength)">
      <summary>
            Read the values of a register range of up to <c>5</c> registers.
            </summary>
      <param name="registerRangeOffset">The byte offset of the first register of the range.</param>
      <param name="rangeLength">The number of registers to read.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IRegisterRangeSession" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ReadRegisters(System.Object,Triamec.TriaLink.Sessions.IRegisterResponseHandler,Triamec.TriaLink.Groups.IAddressee,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
      <summary>
            Read the values of up to <c>4</c> Registers.
            </summary>
      <param name="registerValue0">The value of register 0.</param>
      <param name="registerValue1">The value of register 1.</param>
      <param name="registerValue2">The value of register 2.</param>
      <param name="registerValue3">The value of register 3.</param>
      <param name="registerOffset0">The byte offset of register 0.</param>
      <param name="registerOffset1">The byte offset of register 1.</param>
      <param name="registerOffset2">The byte offset of register 2.</param>
      <param name="registerOffset3">The byte offset of register 3.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IRegisterSession" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ReadStartupSettings(System.Object,Triamec.TriaLink.Sessions.IStartupControlResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation)">
      <summary>
            Reads the startup settings of a station, not including the <see cref="P:Triamec.TriaLink.StartupSettings.StationName" />.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />,
            or <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response, or <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="nameTransfer">Flag to control if station name should be returned or MD5 checksum.
            When set to <see langword="true" />, transfers the station name from or to devices.
            When set to <see langword="false" />, returns the checksum of the persistent range.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ReadStartupSettings(System.Object,Triamec.TriaLink.Sessions.IStartupControlResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation,System.Boolean)">
      <summary>
            Reads the startup settings of a station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />,
            or <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response, or <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="nameTransfer">Flag to control if station name should be returned or MD5 checksum.
            When set to <see langword="true" />, transfers the station name from or to devices.
            When set to <see langword="false" />, returns the checksum of the persistent range.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ReadStatus(System.Object,Triamec.TriaLink.Sessions.IStatusResponseHandler)">
      <summary>
            Read the status of the Tria-Link adapter station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ReadStatus(System.Object,Triamec.TriaLink.Sessions.IStatusResponseHandler,Triamec.TriaLink.Groups.IAddressee)">
      <summary>
            Reads the status of a Tria-Link station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.ResetTriaLink">
      <summary>
            Resets the Tria-Link.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Tria-Link communication timed out.</exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.</exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.SendTestSignalCommand(System.Object,Triamec.TriaLink.Sessions.IServiceResponseHandler,Triamec.TriaLink.Groups.IAddressee,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.CurrentControllerTestSignalCommand,System.Single,System.Single,System.UInt16,System.UInt16)">
      <summary>
            Send a test signal command to one ore more axes of a Tria-Link station.
            </summary>
      <param name="axisNumber">One or more axis numbers.</param>
      <param name="testSignalCommand">The test signal command to send.</param>
      <param name="frequency">The frequency of the test signal, in Hertz.</param>
      <param name="amplitude">The amplitude of the test signal, in Volt.</param>
      <param name="frameSize">The number of test samples,
            counted in periods of the current controller.</param>
      <param name="waitSize">The number of transient samples,
            counted in periods of the current controller.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.ITestSignalSession" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.TriaLinkProtocol.TickTime">
      <summary>
            Gets the time increment of the Tria-Link counter, in seconds.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#AdapterRole">
      <summary>
            Gets the role of the adapter station.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#ControlAddress(System.Object,Triamec.TriaLink.Sessions.IAddressControlResponseHandler,Triamec.TriaLink.Groups.IAddressee,System.Boolean,Triamec.TriaLink.AddressControlCommand,System.UInt32,Triamec.TriaLink.UniqueDeviceId,System.Byte,Triamec.TriaLink.Groups.SubBus)">
      <summary>
            Controls addresses.
            </summary>
      <param name="destination">The station or group receiving the packet.</param>
      <param name="expectResponse">Whether to expect a response.</param>
      <param name="command">The address control command.</param>
      <param name="hardwareId">The hardware identifier of the station to address.</param>
      <param name="uniqueDeviceId">The unique device identifier of the station to address.</param>
      <param name="address">The new address.</param>
      <param name="subordinateBus">The subordinate bus where the station is located.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>If <paramref name="expectResponse" /> is <see langword="true" />, a new session; otherwise,
            <see langword="null" />.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#GroupManager">
      <summary>
            Gets the group manager.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#Link">
      <summary>
            Gets the Tria-Link that this protocol works with.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#PingSelf">
      <summary>
            Sends a packet to ourselves via the bus.
            </summary>
      <returns>A new session for the ping request.</returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#ReadIdentifications(System.Object,Triamec.TriaLink.Sessions.IIdentificationResponseHandler,Triamec.TriaLink.Groups.IAddressee)">
      <summary>
            Reads the identifications of a station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IIdentificationSession" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#ReadUris(Triamec.TriaLink.Groups.IAddressee,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Reads the values of up to <c>6</c> URIs from the specified destination.</summary>
      <param name="destination">The recipient which shall process the command.</param>
      <param name="index0">The index and subindex of URI 0 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index1">The index and subindex of URI 1 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index2">The index and subindex of URI 2 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index3">The index and subindex of URI 3 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index4">The index and subindex of URI 4 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="index5">The index and subindex of URI 5 or <c>0</c> in order to not use that index for
            reading.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A session used to wait for and retrieve a response.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#ResetEndpoints">
      <summary>
            Resets the <see cref="P:Triamec.TriaLink.Adapter.ITriaLink.Adapter" /> and (re-)attaches the endpoints.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>An endpoint could not be detached or attached.</para>
        <para>-or-</para>
        <para>The adapter could not be reset.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#RestartStations">
      <summary>
            Commands all stations to reset themselves to initial state.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#SessionManager">
      <summary>
            Gets the session manager.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#SubscriptionManager">
      <summary>
            Gets the subscription manager.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#UpdateTime(Triamec.TriaLink.EtherCatTime)">
      <summary>
            Synchronizes the global time on the device with the specified time.
            </summary>
      <param name="time">An EtherCAT distributed clock value.</param>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.Triamec#TriaLink#ITriaLinkBootProtocol#WriteStatus(System.Boolean,Triamec.TriaLink.Groups.IAddressee,Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks,Triamec.TriaLink.Groups.ITriaLinkStation)">
      <summary>
            Writes the status of a Tria-Link station.
            </summary>
      <param name="expectResponse">Whether a session should be created.</param>
      <param name="destination">The <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> who's status to write.</param>
      <param name="controlCommand">The control commands to execute.</param>
      <param name="stationAddressee">The station addressee.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" /> for the status write request, if <paramref name="expectResponse" /> was set
            to <see langword="true" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.WritePeripheryRegister(System.Object,Triamec.TriaLink.Sessions.IStatusResponseHandler,Triamec.TriaLink.Groups.ITriaLinkStation,System.Byte,System.UInt32,Triamec.TriaLink.TamValue32)">
      <summary>
            Writes a periphery register of a Tria-Link station.
            </summary>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.</param>
      <param name="responseHandler">The callback for the response.</param>
      <param name="destination">The <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> where to read the periphery register.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to write.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to write,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <param name="peripheryData">The periphery data to write.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" /> for the status write request.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.WriteRegisterRange(System.Object,Triamec.TriaLink.Sessions.IRegisterRangeResponseHandler,Triamec.TriaLink.Groups.IAddressee,System.UInt32,Triamec.TriaLink.TamValue32[])">
      <summary>
            Write the values of up to <c>5</c> Registers.
            </summary>
      <param name="registerRangeOffset">The Offset of the first register of the range, in bytes.</param>
      <param name="registerRangeValues">The register range values.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IRegisterRangeSession" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="registerRangeValues" /> has more than
            <see cref="F:Triamec.TriaLink.RegisterRangeLength.Length5" /> elements.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.TriaLinkProtocol.WriteRegisters(System.Object,Triamec.TriaLink.Sessions.IRegisterResponseHandler,Triamec.TriaLink.Groups.IAddressee,System.UInt16,System.UInt16,System.UInt16,System.UInt16,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Write the values of up to <c>4</c> registers.
            </summary>
      <param name="registerValue0">The value of register 0.</param>
      <param name="registerValue1">The value of register 1.</param>
      <param name="registerValue2">The value of register 2.</param>
      <param name="registerValue3">The value of register 3.</param>
      <param name="registerOffset0">The byte offset of register 0.</param>
      <param name="registerOffset1">The byte offset of register 1.</param>
      <param name="registerOffset2">The byte offset of register 2.</param>
      <param name="registerOffset3">The byte offset of register 3.</param>
      <param name="clientData">A client object to be stored in the returned <see cref="T:Triamec.TriaLink.Sessions.IStatusSession" />.
            May be <see langword="null" />.</param>
      <param name="responseHandler">The callback for the response. May be <see langword="null" />.</param>
      <param name="destination">The receiver of the packet.</param>
      <param name="peripheryDeviceAddress">The periphery device address where to read.</param>
      <param name="peripheryRegisterAddress">The periphery register address where to read,
            relative to <paramref name="peripheryDeviceAddress" />.</param>
      <returns>
            A new <see cref="T:Triamec.TriaLink.Sessions.IRegisterSession" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">This <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> has been disposed.
              </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.
              </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> does not belong to this Tria-Link.
              </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="peripheryRegisterAddress" /> is above <see cref="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="T:Triamec.TriaLink.TriggerDataType">
      <summary>
            Possible data types in the register.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriggerDataType.Integer">
      <summary>
            integer data type.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriggerDataType.Boolean">
      <summary>
            boolean data type.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriggerDataType.Enum">
      <summary>
            enumeration data type.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriggerDataType.Float">
      <summary>
            float data type.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriggerDataType.Float40">
      <summary>
            float40 data type.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.TriggerDataType.Double">
      <summary>
            double data type.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.UniqueDeviceId">
      <summary>
            The 128-bit unique device identification used for TAM hardware serial numbers.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.UniqueDeviceId.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
        <see langword="true" /> if <paramref name="obj" /> and this instance 
            are the same type and represent the same value; otherwise, <see langword="false" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.UniqueDeviceId.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
    </member>
    <member name="F:Triamec.TriaLink.UniqueDeviceId.MaxValue">
      <summary>
            The maximal value of instances of this structure.
            <para>The value is <c>340282366920938463463374607431768211455</c>.</para></summary>
    </member>
    <member name="M:Triamec.TriaLink.UniqueDeviceId.op_Equality(Triamec.TriaLink.UniqueDeviceId,Triamec.TriaLink.UniqueDeviceId)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.UniqueDeviceId" />s for equality.
            </summary>
      <param name="id1">The first operand in the comparison.</param>
      <param name="id2">The second operand in the comparison.</param>
      <returns>Returns <see langword="true" /> if the two operands are equal;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.UniqueDeviceId.op_Inequality(Triamec.TriaLink.UniqueDeviceId,Triamec.TriaLink.UniqueDeviceId)">
      <summary>
            Compares two <see cref="T:Triamec.TriaLink.UniqueDeviceId" />s for inequality.
            </summary>
      <param name="id1">The first operand in the comparison.</param>
      <param name="id2">The second operand in the comparison.</param>
      <returns>Returns <see langword="true" /> if the two operands are not equal;
            otherwise, returns <see langword="false" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.UniqueDeviceId.Parse(System.String)">
      <summary>
            Parses the specified value.
            </summary>
      <param name="value">The value.</param>
      <returns>
            A unique device identifier represented by <paramref name="value" />.
            </returns>
      <exception cref="T:System.FormatException">
        <para>
          <paramref name="value" />
          <see cref="M:System.String.IsNullOrEmpty(System.String)" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="value" /> does contain non-decimal characters.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.UniqueDeviceId.ShrunkValue">
      <summary>
            Gets a value representing this unique identifier fitting with 32 bits.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.UniqueDeviceId.ToString">
      <summary>
            Returns the fully qualified type name of this instance.
            </summary>
      <returns>
            A <see langword="string" /> containing a character representation of this instance.
            </returns>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.DataLinkLayers">
      <summary>
            OSI layer 1+2 realization.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.Unspecified">
      <summary>Unspecified hardware layer.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.None">
      <summary>No hardware layer.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.TriaLink">
      <summary>Triamec devices over PCI.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.PalBus">
      <summary>TD proprietary bus.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.Simulation">
      <summary>Software simulation.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.TriaLinkUsbObserver">
      <summary>Triamec devices over USB observers.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.Network">
      <summary>Triamec devices over Ethernet.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.DeviceUsb">
      <summary>Triamec devices attached directly via USB.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.Pipe">
      <summary>Triamec devices accessed via another application using named pipes.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.TriaLinkUsb">
      <summary>Triamec devices over USB.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.TriaLinkLocal">
      <summary>Triamec devices without Ethernet.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.AllLocal">
      <summary>All devices without Ethernet.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.TriaLinkAll">
      <summary>All Triamec devices.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.DataLinkLayers.All">
      <summary>All devices.</summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.FifoException">
      <summary>
            Exception thrown by <see cref="T:Triamec.TriaLink.Adapter.IFifo" /> implementations.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.FifoException.#ctor">
      <summary>
            Creates a new instances of the <see cref="T:Triamec.TriaLink.Adapter.FifoException" /> class.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.FifoException.#ctor(System.String)">
      <summary>
            Creates a new instances of the <see cref="T:Triamec.TriaLink.Adapter.FifoException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.FifoException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instances of the <see cref="T:Triamec.TriaLink.Adapter.FifoException" /> class.
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, 
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.FifoException.#ctor(Triamec.TriaLink.Adapter.IFifo,Triamec.TriaLink.Adapter.FifoException.ErrorCode)">
      <summary>
            Creates a new instances of the <see cref="T:Triamec.TriaLink.Adapter.FifoException" /> class.
            </summary>
      <param name="fifo">The <see cref="T:Triamec.TriaLink.Adapter.IFifo" /> that throws the exception.</param>
      <param name="errorCode">The error code.</param>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.FifoException.Code">
      <summary>
            Gets the internal error code.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.FifoException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.FifoException.Owner">
      <summary>
            Gets the <see cref="T:Triamec.TriaLink.Adapter.IFifo" /> that threw this exception.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.FifoException.ErrorCode">
      <summary>
            Error codes of the <see cref="T:Triamec.TriaLink.Adapter.IFifo" />s.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.FifoException.ErrorCode.Ok">
      <summary>No Fifo error</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.FifoException.ErrorCode.UnknownError">
      <summary>Unknown Fifo error</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.FifoException.ErrorCode.FifoFull">
      <summary>Fifo is full.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.FifoException.ErrorCode.Timeout">
      <summary>Timeout occurred while waiting for the Fifo.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.FifoException.ErrorCode.DeviceRemoved">
      <summary>The device has been removed.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.FifoException.ErrorCode.MisalignedData">
      <summary>Received chunk length is not modulo the packet size.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.FifoException.ErrorCode.IllegalHead">
      <summary>The head controlled by the opposite side doesn't point into the FIFO memory.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.FifoException.ErrorCode.IllegalTail">
      <summary>The tail controlled by the opposite side doesn't point into the FIFO memory.</summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.IAdapterSite">
      <summary>
            Interface which may be implemented for instances returned by <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Site" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.IAdapterSite.Foundation">
      <summary>
            Gets the underlying instance the <see cref="T:Triamec.TriaLink.Adapter.ITriaLinkAdapter" /> is based upon.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.IFifo">
      <summary>
            Fifo base interface
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.IFifo.Count">
      <summary>
            Gets the number of enqueued Fifo packets.
            </summary>
      <returns>Returns the number of enqueued Fifo packets.</returns>
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">Failed to determine the count.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.IFifo.Dump">
      <summary>
            Creates a string representation of the internal contents of the FIFO for debugging.
            </summary>
      <returns>The text or <see cref="F:System.String.Empty" /> when not applicable or not implemented.</returns>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.IHotPlugObserver">
      <summary>
            Listener to hot plug events.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.IHotPlugObserver.Plug(Triamec.TriaLink.Adapter.ITriaLinkAdapter)">
      <summary>
            Called when the specified adapter was plugged in.
            </summary>
      <param name="adapter">The adapter.</param>
      <returns>
            Whether the event was handled.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.IHotPlugObserver.SuppressHotPlug">
      <summary>
            Gets a value indicating whether to suppress hot plug events to be generated.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.IRxFifo">
      <summary>
            Receiving FIFO interface.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.IRxFifo.Clear">
      <summary>
            Discards all current elements in the FIFO
            without reading them.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.IRxFifo.Dequeue">
      <summary>Removes and returns the head packet from the FIFO.</summary>
      <returns>
            Returns the head packet in the FIFO or <see langword="null" /> if the <see cref="T:Triamec.TriaLink.Adapter.IRxFifo" /> had its
            <see cref="P:Triamec.TriaLink.Adapter.IFifo.Count" /> property equal to <c>0</c>.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.IRxFifo.Flush">
      <summary>
            Removes and returns all packets from the FIFO.
            </summary>
      <returns>All packets in the FIFO.</returns>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.IRxFifo.NotificationSupported">
      <summary>
            Gets a value indicating whether packet receival notification through the <see cref="E:Triamec.TriaLink.Adapter.IRxFifo.PacketsReceived" /><see langword="event" /> is supported.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.IRxFifo.OrderingBias">
      <summary>
            Gets a value indicating how the sequence of isochronous packets is maintained.
            </summary>
    </member>
    <member name="E:Triamec.TriaLink.Adapter.IRxFifo.PacketsReceived">
      <summary>
            Occurs when new data is received and <see cref="P:Triamec.TriaLink.Adapter.IFifo.Count" /> is greater than <c>0</c>.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.ISdramTxFifo">
      <summary>
            Transmitting interface of an SDRAM
            (<b>S</b>ynchronous <b>D</b>ynamic <b>R</b>andom <b>A</b>ccess <b>M</b>emory)
            Fifo of a Tria-Link PCI adapter (<see cref="T:Triamec.TriaLink.Adapter.ITriaLinkAdapter" />).
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.ISdramTxFifo.Enqueue(System.UInt32,Triamec.TriaLink.TamValue32[])">
      <summary>
            Enqueues a packet with its address at the tail of the Fifo.
            </summary>
      <param name="packetAddress">The address in the SDRAM
            where to write the <paramref name="packet" />,
            in units of <see cref="T:Triamec.TriaLink.Packets.Packet" />s.</param>
      <param name="packet">The packet to enqueue.
            The packet must have <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" /> elements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packet" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packet" /> is of <see cref="P:System.Array.Length" />
            less than <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" />.</exception>
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">The Fifo is full and not dequeued by the opposite side.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.ISdramTxFifo.Enqueue(System.UInt32,Triamec.TriaLink.TamValue32[][])">
      <summary>
            Enqueues packets in order to copy them to a specified address.
            </summary>
      <param name="packetBaseAddress">The address in the SDRAM
            where to write the <paramref name="packets" />,
            in units of <see cref="T:Triamec.TriaLink.Packets.Packet" />s.</param>
      <param name="packets">The packets to enqueue.
            Each packet must have <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" /> elements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packets" /> or one of its elements is
            <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A <see cref="T:Triamec.TriaLink.Packets.Packet" /> is of
            <see cref="P:System.Array.Length" /> less than <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" />.</exception>
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">The Fifo is full and not dequeued by the opposite side.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ISdramTxFifo.IsFull">
      <summary>
            Indicated if the Fifo is full.
            </summary>
      <returns>
        <see langword="true" /> if the Fifo is full.</returns>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.ITriaLink">
      <summary>
            Tria-Link provider.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.Adapter">
      <summary>
            Gets the adapter providing this link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.AdapterIsStation">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.TriaLink.Adapter.ITriaLink.Adapter" /> must be treated as one of the stations within this
            <see cref="T:Triamec.TriaLink.Adapter.ITriaLink" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.ITriaLink.CreateBootManager(Triamec.TriaLink.ITriaLinkBootProtocol)">
      <summary>
            Creates a boot manager appropriate for setting up this <see cref="T:Triamec.TriaLink.Adapter.ITriaLink" /> instance.
            </summary>
      <param name="protocol">The owner protocol.</param>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.DataLinkLayer">
      <summary>
            Gets the data-link layer realized with this Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.DefaultTimeout">
      <summary>
            Gets the default time out, in milliseconds, for responses.
            </summary>
    </member>
    <member name="E:Triamec.TriaLink.Adapter.ITriaLink.Disposed">
      <summary>
            Occurs when the instance has been disposed.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.GlobalSessionThreshold">
      <summary>
            Gets the maximal allowed number of parallel active Tria-Link sessions per link for this type of
            adapters.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.IsochronousBasePeriod">
      <summary>
            Gets the period of sending isochronous packets from this <see cref="T:Triamec.TriaLink.Adapter.ITriaLinkAdapter" />,
            in units of Tria-Link <see cref="P:Triamec.TriaLink.Adapter.ITriaLink.TickTime" /> increments.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.IsSynchronized">
      <summary>
            Gets a value indicating whether all stations share a common time.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.LocalBusAccessIsCpuBound">
      <summary>
            Gets a value indicating whether access to the local-bus is dependent on the CPU.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.Name">
      <summary>
            Gets the name of the link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.RxAsyFifo">
      <summary>
            Gets the receive Fifo for the asynchronous port of a Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.RxIsoFifo">
      <summary>
            Gets the receive Fifo for the isochronous port of a Tria-Link or <see langword="null" /> if not available.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.SessionThreshold">
      <summary>
            Gets the maximal allowed number of parallel active Tria-Link sessions per station for this type of
            adapters.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.SessionThresholdWhenNoConflicts">
      <summary>
            Gets the maximal allowed number of parallel active Tria-Link sessions per link in a conflict prone link,
            when no conflicting communication is expected.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.SupportsAddressControl">
      <summary>
            Gets a value indicating whether the devices behind the adapter support the address control protocol.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.SupportsPeriphery">
      <summary>
            Gets a value indicating whether peripheral communication is supported.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.TickTime">
      <summary>
            Gets the time increment of the Tria-Link counter, in seconds.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.TimestampSourcePriority">
      <summary>
            Gets the desired way of reading the Tria-Link timestamp using this <see cref="T:Triamec.TriaLink.Adapter.ITriaLink" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.TxAsyFifo">
      <summary>
            Gets the transmit Fifo for the asynchronous port of a Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLink.TxIsoFifo">
      <summary>
            Gets the transmit Fifo for the isochronous port of a Tria-Link or <see langword="null" /> if not available.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.ITriaLinkAdapter">
      <summary>
            Tria-Link adapter hardware device.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CanChangeRole">
      <summary>
            Indicates whether this adapter supports changing its role using <see cref="M:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CurrentTime">
      <summary>
            Gets the current time, represented as a relative value.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.DefaultTimeout">
      <summary>
            Gets the default time out, in milliseconds, for responses.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Description">
      <summary>
            Gets the description of this adapter.
            </summary>
    </member>
    <member name="E:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Disposed">
      <summary>
            Occurs when the instance has been disposed.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.HasSdramFifo">
      <summary>
            Indicates whether the SDRAM FIFO physically exist on this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.IsHosted">
      <summary>Gets a value indicating whether this instance's lifetime is internally controlled.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Link">
      <summary>Gets the Tria-Link.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Links">
      <summary>
            Gets all the links provided by this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Name">
      <summary>
            Gets the name of this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.PhysicalLayer">
      <summary>
            Indicates the underlying technology used to communicate with remote stations.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Reset">
      <summary>
            Resets the device without modifying its <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Role" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter cannot be reset.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)">
      <summary>
            Resets the device as a Tria-Link master or observer.
            </summary>
      <param name="role">
            The role of the Tria-Link adapter. Set to <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> to leave the property
            untouched.
            </param>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter cannot be reset.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CanChangeRole" /> is <see langword="false" /> and <paramref name="role" /> is not
            <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> or <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Untouched" />.
            </exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Role">
      <summary>
            Gets the role of this Tria-Link adapter in the Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.SdramFifo">
      <summary>
            Gets the SDRAM FIFO.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Site">
      <summary>
            Indicates where this adapter is located.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.SlownessReason">
      <summary>
            Gets a reason why communication through this adapter is slower than usual.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.SupportsTime">
      <summary>
            Gets a value indicating whether this instance supports retrieving the <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CurrentTime" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.ITxFifo">
      <summary>
            Transmitting FIFO interface.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.ITxFifo.Enqueue(Triamec.TriaLink.TamValue32[])">
      <summary>
            Enqueues a packet at the tail of the FIFO.
            </summary>
      <param name="packet">
            The packet to enqueue.
            The packet must be of size <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packet" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packet" /> 
            is of <see cref="P:System.Array.Length" /> not equal to <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">The FIFO is full and not dequeued by the opposite side.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.ITxFifo.Enqueue(Triamec.TriaLink.TamValue32[][],System.Int32)">
      <summary>
            Enqueues the specified packets at the tail of the FIFO.
            </summary>
      <param name="packets">
            The packets to enqueue.
            All packets must be of size <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" />.
            </param>
      <param name="length">The number of packets in the buffer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packets" /> is <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            One of the <paramref name="packets" /> is of <see cref="P:System.Array.Length" /> not equal to
            <see cref="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">The FIFO is full and not dequeued by the opposite side.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.ITxFifo.IsFull">
      <summary>
            Indicated if the FIFO is full.
            </summary>
      <returns>
        <see langword="true" /> if the FIFO is full.</returns>
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">Failed to determine the property.</exception>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.NativeTriaLink">
      <summary>
            Tria-Link ring.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.NativeTriaLink.#ctor(Triamec.TriaLink.Adapter.ITriaLinkAdapter,Triamec.TriaLink.Adapter.IRxFifo,Triamec.TriaLink.Adapter.IRxFifo,Triamec.TriaLink.Adapter.ITxFifo,Triamec.TriaLink.Adapter.ITxFifo)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Adapter.NativeTriaLink" /> class.
            </summary>
      <param name="adapter">The adapter.</param>
      <param name="rxAsynchronousFifo">The receive FIFO for the asynchronous port of a Tria-Link.</param>
      <param name="rxIsochronousFifo">The receive FIFO for the isochronous port of a Tria-Link
            or <see langword="null" /> if not available.</param>
      <param name="txAsynchronousFifo">The transmit FIFO for the asynchronous port of a Tria-Link.</param>
      <param name="txIsochronousFifo">The transmit FIFO for the isochronous port of a Tria-Link
            or <see langword="null" /> if not available.</param>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.Adapter">
      <summary>
            Gets the adapter providing this link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.AdapterIsStation">
      <summary>
            Gets a value indicating whether the <see cref="P:Triamec.TriaLink.Adapter.ITriaLink.Adapter" /> must be treated as one of the stations within this
            <see cref="T:Triamec.TriaLink.Adapter.ITriaLink" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.NativeTriaLink.Create(Triamec.TriaLink.Adapter.ITriaLinkAdapter,Triamec.TriaLink.Adapter.TriaLinkFifos)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.Adapter.NativeTriaLink" /> class.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.NativeTriaLink.CreateBootManager(Triamec.TriaLink.ITriaLinkBootProtocol)">
      <summary>
            Creates a boot manager appropriate for setting up this <see cref="T:Triamec.TriaLink.Adapter.ITriaLink" /> instance.
            </summary>
      <param name="protocol">The owner protocol.</param>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.DataLinkLayer">
      <summary>
            Gets the data-link layer realized with this Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.DefaultTimeout">
      <summary>
            Gets the default time out, in milliseconds, for responses.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.NativeTriaLink.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="E:Triamec.TriaLink.Adapter.NativeTriaLink.Disposed">
      <summary>
            Occurs when the instance has been disposed.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.GlobalSessionThreshold">
      <summary>
            Gets the maximal allowed number of parallel active Tria-Link sessions per link for this type of
            adapters.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.NativeTriaLink.ISOCHRONOUS_BASE_PERIOD">
      <summary>
            The smallest period of sending isochronous packets,
            in units of Tria-Link <see cref="F:Triamec.TriaLink.Adapter.NativeTriaLink.TICK_TIME" /> increments.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.IsochronousBasePeriod">
      <summary>
            Gets the period of sending isochronous packets from this <see cref="T:Triamec.TriaLink.Adapter.ITriaLinkAdapter" />,
            in units of Tria-Link <see cref="P:Triamec.TriaLink.Adapter.ITriaLink.TickTime" /> increments.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.IsSynchronized">
      <summary>
            Gets a value indicating whether all stations share a common time.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.LocalBusAccessIsCpuBound">
      <summary>
            Gets a value indicating whether access to the local-bus is dependent on the CPU.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.SessionThreshold">
      <summary>
            Gets the maximal allowed number of parallel active Tria-Link sessions per station for this type of
            adapters.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.SessionThresholdWhenNoConflicts">
      <summary>
            Gets the maximal allowed number of parallel active Tria-Link sessions per link in a conflict prone link,
            when no conflicting communication is expected.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.SupportsAddressControl">
      <summary>
            Gets a value indicating whether the devices behind the adapter support the address control protocol.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.SupportsPeriphery">
      <summary>
            Gets a value indicating whether peripheral communication is supported.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.NativeTriaLink.TICK_TIME">
      <summary>
            The time increment of the Tria-Link counter, in seconds.
            <para>The value is <c>0.00001</c> seconds or <c>10</c> µs.</para></summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.TickTime">
      <summary>
            Gets the time increment of the Tria-Link counter, in seconds.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.TimestampSourcePriority">
      <summary>
            Gets the desired way of reading the Tria-Link timestamp using this <see cref="T:Triamec.TriaLink.Adapter.ITriaLink" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.NativeTriaLink.Triamec#TriaLink#Adapter#ITriaLink#Name">
      <summary>
            Gets the name of the link.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.TimestampSource">
      <summary>Describes ways of retrieving a Tria-Link timestamp.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TimestampSource.LocalBus">
      <summary>Get the Tria-Link timestamp from a local-bus device.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TimestampSource.Device">
      <summary>Get the Tria-Link timestamp from a device register.</summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">
      <summary>
            Exception thrown by Tria-Link adapters.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkAdapterException.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkAdapterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor 
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkAdapterException.#ctor(System.String)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkAdapterException.#ctor(System.String,System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference, 
            the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkAdapterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.TriaLinkAdapterFactory">
      <summary>
            Creates <see cref="T:Triamec.TriaLink.Adapter.ITriaLinkAdapter" />s.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.TriaLinkBootManager">
      <summary>
            Base class for <see cref="T:Triamec.TriaLink.BootManager" />s dealing with the Tria-Link ring.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.#ctor(Triamec.TriaLink.ITriaLinkBootProtocol)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Adapter.TriaLinkBootManager" /> class.
            </summary>
      <param name="protocol">The Tria-Link protocol implementation.</param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.CheckClosed">
      <summary>
            Checks whether the ring is intact.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.CheckForIllegalGroupAddresses(Triamec.TriaLink.Packets.StatusPacket)">
      <summary>
            Correct groups with address 0 originating from persistency defaults in FWID &lt; 1037.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.EscalateRingOpenFailure">
      <exception cref="T:Triamec.TriaLink.TriaLinkException" />
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.FindAdapterStation(System.Boolean,System.Boolean)">
      <summary>
            Finds the <see cref="P:Triamec.TriaLink.Groups.GroupManager.AdapterStation" />.
            </summary>
      <param name="acceptInvalidAddress">If set to <see langword="true" />,
            accepts the adapter station to have no address (<see cref="F:Triamec.TriaLink.Groups.Addressee.BootAddress" />).</param>
      <param name="reset">Whether to include additional reset logic prior find.</param>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Adapter station has no address.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.IdentifyGroups">
      <summary>
            Searches for existing groups.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.IdentifyStations">
      <summary>
            (Re-)attaches the <see cref="T:Triamec.TriaLink.Endpoint" />s
            and (re-)identifies all <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
            The Tria-Link identifying procedure failed.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.PingBroadcast">
      <summary>
            Request all stations in the Tria-Link to send a response.
            </summary>
      <returns>
            A list of responses.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.TriaLinkBootManager.Triamec#TriaLink#Sessions#ISessionClaimant#ExpectConflicts">
      <summary>
            Indicates whether the <see cref="T:Triamec.TriaLink.Sessions.SessionManager" /> should expect conflicting communication caused by this
            claimant, on a conflict prone link.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.Triamec#TriaLink#Sessions#ISessionClaimant#OnSessionTimeout(Triamec.TriaLink.Sessions.ISession)">
      <summary>
            Handles timed out <see cref="T:Triamec.TriaLink.Sessions.ISession" /> instance.
            </summary>
      <param name="session">
            The session which has this instance assigned to <see cref="P:Triamec.TriaLink.Sessions.ISession.Claimant" /> and which didn't receive
            a response in the default time used by <see cref="M:Triamec.TriaLink.Sessions.ISession.WaitResponse" />.
            </param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.Triamec#TriaLink#Sessions#IStatusResponseHandler#OnStatusResponse(Triamec.TriaLink.IStatusResponse)">
      <summary>
            The response callback for a status message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkBootManager.WaitOnce">
      <summary>
            Waits until a packet has circled the Tria-Link at least once.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.TriaLinkFifos">
      <summary>
            TriaLinkFifos is a bundle of <see cref="T:Triamec.TriaLink.Adapter.IFifo" />s.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.TriaLinkFifos.#ctor(Triamec.TriaLink.Adapter.IRxFifo,Triamec.TriaLink.Adapter.IRxFifo,Triamec.TriaLink.Adapter.ITxFifo,Triamec.TriaLink.Adapter.ITxFifo)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.Adapter.TriaLinkFifos" /> class.
            </summary>
      <param name="rxAsynchronousFifo">The receive FIFO for the asynchronous port of a Tria-Link.</param>
      <param name="rxIsochronousFifo">The receive FIFO for the isochronous port of a Tria-Link
            or <see langword="null" /> if not available.</param>
      <param name="txAsynchronousFifo">The transmit FIFO for the asynchronous port of a Tria-Link.</param>
      <param name="txIsochronousFifo">The transmit FIFO for the isochronous port of a Tria-Link
            or <see langword="null" /> if not available.</param>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.TriaLinkFifos.RxAsyFifo">
      <summary>
            Gets the receive FIFO for the asynchronous port of a Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.TriaLinkFifos.RxIsoFifo">
      <summary>
            Gets the receive FIFO for the isochronous port of a Tria-Link or <see langword="null" /> if not available.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.TriaLinkFifos.SlownessReason">
      <summary>
            Gets a reason why communication is slower than usual.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.TriaLinkFifos.TxAsyFifo">
      <summary>
            Gets the transmit FIFO for the asynchronous port of a Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.TriaLinkFifos.TxIsoFifo">
      <summary>
            Gets the transmit FIFO for the isochronous port of a Tria-Link or <see langword="null" /> if not available.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.TriaLinkOrderingBias">
      <summary>
            Specifies how the original sequence of isochoronous packets is maintained by the communication channel.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TriaLinkOrderingBias.None">
      <summary>No guarantees are given.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TriaLinkOrderingBias.BaseBin">
      <summary>
            The sequence is maintained with a resolution of the isochronous base period of the sender. Disordering may occur
            within a bin covering one such period, that is, when the resolution of the sequence is above that period.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TriaLinkOrderingBias.Monotonic">
      <summary>The sequence is maintained.</summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.TriaLinkRole">
      <summary>
            The role of an <see cref="T:Triamec.TriaLink.Adapter.ITriaLinkAdapter" /> in the Tria-Link.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown">
      <summary>Unknown Tria-Link role</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TriaLinkRole.Master">
      <summary>Tria-Link master</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TriaLinkRole.Observer">
      <summary>Tria-Link observer</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TriaLinkRole.Untouched">
      <summary>Untouched Tria-Link role</summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unspecified">
      <summary>Unspecified Tria-Link role</summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.Net.NetworkChannel">
      <summary>
            Two-way communication through a <see cref="F:Triamec.TriaLink.Adapter.Net.NetworkChannel._socket" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.Dispose(System.Boolean)">
      <summary>
            Disposes of this instance.
            </summary>
      <param name="disposing">Whether managed resources are to be disposed.</param>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.EnsureStarted">
      <summary>
            Starts the channel if not yet started.
            </summary>
      <exception cref="T:System.Net.Sockets.SocketException" />
      <exception cref="T:System.Exception">Whatever exception the <see cref="E:Triamec.TriaLink.Adapter.Net.NetworkChannel.Restarted" /> handlers might throw.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.EnsureStarted(System.Net.IPEndPoint)">
      <summary>
            Starts the channel if not yet started.
            </summary>
      <param name="localEndPoint">
            The local end point to use or <see langword="null" /> to not change the currently used end point.
            </param>
      <exception cref="T:System.Net.Sockets.SocketException" />
      <exception cref="T:System.Exception">Whatever exception the <see cref="E:Triamec.TriaLink.Adapter.Net.NetworkChannel.Restarted" /> handlers might throw.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.EnsureStartedCore(System.Net.IPEndPoint)">
      <param name="localEndPoint">
            The local end point to use or <see langword="null" /> to not change the currently used end point.
            </param>
      <exception cref="T:System.Net.Sockets.SocketException" />
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.IsSupportedInterface(System.Net.NetworkInformation.NetworkInterface)">
      <summary>
            Indicates whether the specified network interface card is supported by this class.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.OnBeforeCloseSocket(System.Net.Sockets.Socket)">
      <summary>
            When overridden, executes any tasks to do before the specified socket is getting closed.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.NetworkChannel.OutOfOrderDelivery">
      <summary>
            Gets a value indicating the possibility of out-of-order delivery of data.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.ReceiveAsync(System.Byte[],Triamec.TriaLink.Adapter.Net.NetworkChannel.ReceivedCallback)">
      <summary>
            Asynchronously listens on the specified remote endpoint.
            </summary>
      <param name="buffer">The sink for received data.</param>
      <param name="callback">The method to call when the data has finished being received.</param>
      <exception cref="T:System.Net.Sockets.SocketException" />
      <exception cref="T:System.ObjectDisposedException" />
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.NetworkChannel.RemoteEndPoint">
      <summary>
            The <see cref="T:System.Net.EndPoint" /> this <see cref="T:Triamec.TriaLink.Adapter.Net.NetworkChannel" /> communicates with.
            </summary>
    </member>
    <member name="E:Triamec.TriaLink.Adapter.Net.NetworkChannel.Restarted">
      <summary>
            Occurs when <see cref="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.Restart(System.Net.IPEndPoint)" /> finished successfully.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.Send(System.Byte[])">
      <summary>
            Synchronously sends data to the remote peer.
            </summary>
      <param name="data">The content to send.</param>
      <exception cref="T:System.Net.Sockets.SocketException" />
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">The <see cref="T:Triamec.TriaLink.Adapter.Net.NetworkChannel" /> has been disposed.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.Send(System.Byte[],System.Int32)">
      <summary>
            Synchronously sends data to the remote peer.
            </summary>
      <param name="data">The content to send.</param>
      <param name="size">The number of bytes to send from the start of <paramref name="data" />.</param>
      <exception cref="T:System.Net.Sockets.SocketException" />
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">The <see cref="T:Triamec.TriaLink.Adapter.Net.NetworkChannel" /> has been disposed.</exception>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.Net.NetworkChannel.ReceivedCallback">
      <summary>
            The callback where data received using <see cref="M:Triamec.TriaLink.Adapter.Net.NetworkChannel.ReceiveAsync(System.Byte[],Triamec.TriaLink.Adapter.Net.NetworkChannel.ReceivedCallback)" /> is reported.
            </summary>
      <param name="byteCount">The number of bytes received.</param>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter">
      <summary>
            Tria-Link adapter communicating over the network.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.#ctor(System.String,System.Net.IPAddress,System.Int32,System.Int32,System.Int32,System.Func{Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter,Triamec.TriaLink.Adapter.TriaLinkFifos,Triamec.TriaLink.Adapter.ITriaLink})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter" /> class.
            </summary>
      <param name="hostName">The name of the remote system.</param>
      <param name="remoteAddress">The address of the remote system.</param>
      <param name="asyRemotePort">The port where the remote host accepts and sends asynchronous packets.</param>
      <param name="isoRemotePort">The port where the remote host sends isochronous packets.</param>
      <param name="roundtripTimeMs">The measured round trip time when communicating with the remote address,
            in milliseconds or <c>0</c> if no measurement is available.</param>
      <param name="linkFactory">Reference to factory method creating links.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" />, <paramref name="remoteAddress" /> or <paramref name="linkFactory" /> is
              <see langword="null" />.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="remoteAddress" /> is <see cref="F:System.Net.IPAddress.Broadcast" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="asyRemotePort" /> or <paramref name="isoRemotePort" /> is less than
            <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.
            </exception>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter could not be initialized.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.CanChangeRole">
      <summary>
            Indicates whether this adapter supports changing its role using <see cref="M:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Create``1(System.String,System.Int32,System.Action{Triamec.TriaLink.Adapter.Net.NetworkChannel,System.Action{System.String}},System.Int32,System.Func{System.String,System.Net.IPAddress,System.Int32,``0})">
      <returns>The instance or <see langword="null" /> if the host couldn't be accessed.</returns>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException" />
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.CurrentTime">
      <summary>
            Gets the current time, represented as a relative value.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.DefaultTimeout">
      <summary>
            Gets the default time out, in milliseconds, for responses.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Discover``1(System.Action{Triamec.TriaLink.Adapter.Net.NetworkChannel,System.Action{System.String}},System.Collections.Concurrent.IProducerConsumerCollection{Triamec.TriaLink.Adapter.TriaLinkAdapterException},System.Net.NetworkInformation.NetworkInterface,System.Collections.Generic.IEnumerable{Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter},System.Int32,System.Int32,System.Func{System.String,System.Net.IPAddress,System.Int32,``0})">
      <summary>
            Discovers available adapters.
            </summary>
      <param name="startCallback">
            Sends a discovery datagram over the provided channel, reporting responses to the specified callback.
            </param>
      <param name="exceptions">Store to add any exception during discovery.</param>
      <param name="nic">The local network interface card (NIC) to use for discovery, or <see langword="null" />
            to use all NICs.</param>
      <param name="knownHosts">Hosts to ignore during discovery.</param>
      <param name="remoteDiscoveryPort">The port of the remote host used for discovery.</param>
      <param name="timeout">The maximal possible round-trip time, in milliseconds.</param>
      <param name="factory">
            Creates <see cref="T:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter" /> instances from a remote host name, a remote address and a
            round-trip time in milliseconds.
            </param>
      <typeparam name="TResult">
            The type of the instance generated by <paramref name="factory" />.
            </typeparam>
      <returns>
            A sequence of discovered hosts as 4-tuples with the remote address, the local address, the response and the
            round trip time.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="E:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Disposed">
      <summary>
            Occurs when the instance has been disposed.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.ExamineSocketFailure(Triamec.TriaLink.Adapter.Net.NetworkChannel,System.Net.Sockets.SocketException)">
      <summary>
            Analyses the specified failure.
            </summary>
      <returns>An exception nesting <paramref name="ex" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.HasSdramFifo">
      <summary>
            Indicates whether the SDRAM FIFO physically exist on this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.HostName">
      <summary>
            Gets the host name of the remote system.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.IsHosted">
      <summary>Gets a value indicating whether this instance's lifetime is internally controlled.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Link">
      <summary>Gets the Tria-Link.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Links">
      <summary>
            Gets all the links provided by this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.PhysicalLayer">
      <summary>
            Indicates the underlying technology used to communicate with remote stations.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.PingAsync">
      <summary>
            Determines whether the adapter responds.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Reset">
      <summary>
            Resets the device without modifying its <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Role" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter cannot be reset.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)">
      <summary>
            Resets the device as a Tria-Link master or observer.
            </summary>
      <param name="role">
            The role of the Tria-Link adapter. Set to <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> to leave the property
            untouched.
            </param>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter cannot be reset.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CanChangeRole" /> is <see langword="false" /> and <paramref name="role" /> is not
            <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> or <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Untouched" />.
            </exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Role">
      <summary>
            Gets the role of this Tria-Link adapter in the Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.SdramFifo">
      <summary>
            Gets the SDRAM FIFO.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.SlownessReason">
      <summary>
            Gets a reason why communication through this adapter is slower than usual.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.SupportsTime">
      <summary>
            Gets a value indicating whether this instance supports retrieving the <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CurrentTime" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Triamec#TriaLink#Adapter#ITriaLinkAdapter#Description">
      <summary>
            Gets the description of this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Triamec#TriaLink#Adapter#ITriaLinkAdapter#Name">
      <summary>
            Gets the name of this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Net.TriaLinkNetAdapter.Triamec#TriaLink#Adapter#ITriaLinkAdapter#Site">
      <summary>
            Indicates where this adapter is located.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.Pipes.PipeClient">
      <summary>
            Provides access to an already claimed Tria-Link adapter using pipes provided by another application.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.CanChangeRole">
      <summary>
            Indicates whether this adapter supports changing its role using <see cref="M:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Pipes.PipeClient.ClaimAdapters">
      <summary>
            Claims all open Tria-Link pipes.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.CurrentTime"></member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.DefaultTimeout">
      <summary>
            Gets the default time out, in milliseconds, for responses.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Pipes.PipeClient.Dispose">
      <summary>
            Disposes this instance.
            </summary>
    </member>
    <member name="E:Triamec.TriaLink.Adapter.Pipes.PipeClient.Disposed">
      <summary>
            Occurs when the instance has been disposed.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.HasSdramFifo"></member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.IsHosted">
      <summary>Gets a value indicating whether this instance's lifetime is internally controlled.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.Link">
      <summary>Gets the Tria-Link.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.Links">
      <summary>
            Gets all the links provided by this adapter.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Pipes.PipeClient.Reset">
      <summary>
            Resets the device without modifying its <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Role" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter cannot be reset.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Pipes.PipeClient.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)">
      <summary>
            Resets the device as a Tria-Link master or observer.
            </summary>
      <param name="role">
            The role of the Tria-Link adapter. Set to <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> to leave the property
            untouched.
            </param>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter cannot be reset.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CanChangeRole" /> is <see langword="false" /> and <paramref name="role" /> is not
            <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> or <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Untouched" />.
            </exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.Role">
      <summary>
            Gets the role of this Tria-Link adapter in the Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.SdramFifo"></member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.Site">
      <summary>
            Indicates where this adapter is located.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.SlownessReason">
      <summary>
            Gets a reason why communication through this adapter is slower than usual.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.SupportsTime"></member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.Triamec#TriaLink#Adapter#ITriaLinkAdapter#Description">
      <summary>
            Gets the description of this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.Triamec#TriaLink#Adapter#ITriaLinkAdapter#Name">
      <summary>
            Gets the name of this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Pipes.PipeClient.Triamec#TriaLink#Adapter#ITriaLinkAdapter#PhysicalLayer">
      <summary>
            Indicates the underlying technology used to communicate with remote stations.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter">
      <summary>
            A Tria-Link adapter communicating via a <see cref="T:System.IO.Ports.SerialPort" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.#ctor(System.IO.Ports.SerialPort,System.IO.Ports.SerialPort,Triamec.IO.Endianness,System.Func{Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter,Triamec.TriaLink.Adapter.TriaLinkFifos,Triamec.TriaLink.Adapter.ITriaLink})">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter" /> class.
            </summary>
      <param name="asynchronousSerialPort">The asynchronous serial port.</param>
      <param name="isochronousSerialPort">The isochronous serial port
            or <see langword="null" /> if not available.</param>
      <param name="endianness">The endianness.</param>
      <param name="linkFactory">Reference to factory method creating links.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asynchronousSerialPort" /> or
              <paramref name="linkFactory" /> is <see langword="null" />.
              </exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.AccessSerialPort(System.String)">
      <summary>
            Accesses the serial port defined by the specified port name.
            </summary>
      <param name="portName">Name of the serial port.</param>
      <returns>
            The port or <see langword="null" /> if <paramref name="portName" /><see cref="M:System.String.IsNullOrEmpty(System.String)" />.
            </returns>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">
        <para>The specified port does not exist.</para>
        <para>-or-</para>
        <para>The port cannot be used.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.CanChangeRole">
      <summary>
            Indicates whether this adapter supports changing its role using <see cref="M:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.CurrentTime">
      <summary>
            Gets the current time, represented as a relative value.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.DEFAULT_TIMEOUT">
      <summary>
            The default timeout for responses and response handlers, in milliseconds.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.DefaultTimeout">
      <summary>
            Gets the default time out, in milliseconds, for responses.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="E:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Disposed">
      <summary>
            Occurs when the instance has been disposed.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.FindBusUsingWmi(System.ComponentModel.IContainer,System.String,System.String,System.Func{System.String,System.String,Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter},System.Collections.Generic.IList{Triamec.TriaLink.Adapter.TriaLinkAdapterException})">
      <summary>Autodetect adapters via WMI.</summary>
      <param name="host">The instance which will host hot-plug functionality.</param>
      <param name="descriptionPart">A string that must be contained in the inf file provided description of the
            asynchronous serial port.</param>
      <param name="isochronousDescriptionPart">A string that must be contained in the bus reported description of
            the isochronous serial port.</param>
      <param name="factory">The factory to create new adapters, taking as first argument the full name of the
            asynchronous serial port, and as second argument the full name of the isochronous serial port or
            <see langword="null" /> if the isochronous serial port doesn't exist.
            The factory may throw a <see cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException" />.</param>
      <param name="failures">A list to add any failures when creating adapters.</param>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">Failure during WMI query.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.HasSdramFifo">
      <summary>
            Indicates whether the SDRAM Fifo physically exist on this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.IsHosted">
      <summary>Gets a value indicating whether this instance's lifetime is internally controlled.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Link">
      <summary>Gets the Tria-Link.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Links">
      <summary>
            Gets all the links provided by this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.PhysicalLayer">
      <summary>
            Indicates the underlying technology used to communicate with remote stations.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Reset">
      <summary>
            Resets the device without modifying its <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.Role" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter cannot be reset.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Reset(Triamec.TriaLink.Adapter.TriaLinkRole)">
      <summary>
            Resets the device as a Tria-Link master or observer.
            </summary>
      <param name="role">
            The role of the Tria-Link adapter. Set to <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> to leave the property
            untouched.
            </param>
      <exception cref="T:Triamec.TriaLink.Adapter.TriaLinkAdapterException">The adapter cannot be reset.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CanChangeRole" /> is <see langword="false" /> and <paramref name="role" /> is not
            <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Unknown" /> or <see cref="F:Triamec.TriaLink.Adapter.TriaLinkRole.Untouched" />.
            </exception>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Role">
      <summary>
            Gets the role of this Tria-Link adapter in the Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.SdramFifo">
      <summary>
            Gets the SDRAM Fifo.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Site">
      <summary>
            Indicates where this adapter is located.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.SlownessReason">
      <summary>
            Gets a reason why communication through this adapter is slower than usual.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.SupportsTime">
      <summary>
            Gets a value indicating whether this instance supports retrieving the <see cref="P:Triamec.TriaLink.Adapter.ITriaLinkAdapter.CurrentTime" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Triamec#TriaLink#Adapter#ITriaLinkAdapter#Description">
      <summary>
            Gets the description of this adapter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.Triamec#TriaLink#Adapter#ITriaLinkAdapter#Name">
      <summary>
            Gets the name of this adapter.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.WMI_VIR_COM_CLASS">
      <summary>
            Specifier for the WMI Virtual COM class.
            <para>The value is <c>"Win32_SerialPort"</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.WMI_VIR_COM_COM_SPEC">
      <summary>
            The name of the WMI property holding the name of the communication port.
            <para>The value is <c>"DeviceID"</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Adapter.Serial.TriaLinkSerialPortAdapter.WMI_VIR_COM_DESC_SPEC">
      <summary>
            The name of the WMI property holding the device specifier.
            <para>The value is <c>"Description"</c>.</para></summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.Addressee">
      <summary>
            An addressee is an entity in the Tria-Link that can send and receive packets.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.BootAddress">
      <summary>
            The address that a station listens to after power on reset or soft reset.
            <para>The value is <c>0x00</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.BroadcastAddress">
      <summary>
            The address that all stations, including the master, listen to.
            <para>The value is <c>0xFF</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.Capacity">
      <summary>
            The maximum number of addresses.
            <para>The value is <c>256</c>.</para></summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.Addressee.Count">
      <summary>
            Gets the number of members covered by this <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.Addressee.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Triamec.TriaLink.Groups.Addressee.GroupManager">
      <summary>
            Gets the <see cref="P:Triamec.TriaLink.Groups.Addressee.GroupManager" /> that manages this object.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.Addressee.Item(System.Int32)">
      <summary>
            Gets one of the members of this <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">The broadcast and boot addressee groups cannot be indexed.</exception>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.MasterAddress">
      <summary>
            The address of the Tria-Link master.
            <para>The value is <c>0xFE</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.MaxGroupAddress">
      <summary>
            The largest valid group address of a <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            <para>The value is <c>240</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.MinGroupAddress">
      <summary>
            The smallest valid group address of a <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            <para>The value is <c>129</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.Observer0Address">
      <summary>
            The address of the primary Tria-Link observer.
            <para>The value is <c>0xFD</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.Observer1Address">
      <summary>
            The address of the secondary Tria-Link observer.
            <para>The value is <c>0xFC</c>.</para></summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.Observer2Address">
      <summary>
            The address of the ternary Tria-Link observer.
            <para>The value is <c>0xFB</c>.</para></summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.Addressee.ReleaseClaim(System.Object)">
      <summary>
            Release a claim on this instance.
            </summary>
      <param name="claimant">The handle specified when
            <see cref="M:Triamec.TriaLink.Groups.GroupManager.ClaimGroup(System.Object,Triamec.TriaLink.Groups.Addressee[])" /> was called.</param>
      <exception cref="T:System.ArgumentException">There is no claim for <paramref name="claimant" />.</exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
            This instance is a group and its group address could not be removed 
            from one or more <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> in the group.
            When thrown, the claim is not removed from the group and it is possible to call this method again
            to try to remove the group address from the failing <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance(s).
            Note that after this exception has been thrown,
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> yields <see langword="null" /> values for
            <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" />s that have been removed from the group successfully.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.Addressee.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Groups.Addressee.ToString">
      <summary>
            Gets a textual representation for this <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.Addressee.Triamec#TriaLink#Groups#IAddressee#Address">
      <summary>
            Gets the unique address of this instance within the Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.Addressee.Triamec#TriaLink#Groups#IAddressee#GroupManager">
      <summary>
            Gets the instance that manages this instance.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.Addressee.Triamec#TriaLink#Groups#IAddressee#SourcePort">
      <summary>
            Gets the source port to use in the header of Tria-Link <see cref="T:Triamec.TriaLink.Packets.Packet" />s when this instance is
            used as destination.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.Addressee.UndefinedGroupAddress">
      <summary>
            The group address used when a group is not defined.
            <para>The value is <see cref="F:Triamec.TriaLink.Groups.Addressee.BroadcastAddress" />.</para></summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.AddressMapEntry">
      <summary>
            Group association in a station.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.AddressMapEntry.GroupIndex">
      <summary>
            Gets the group index of this <see cref="T:Triamec.TriaLink.Groups.AddressMapEntry" /> within the station specified by
            <see cref="P:Triamec.TriaLink.Groups.AddressMapEntry.StationAddress" />, where <c>1</c> refers to the first group entry.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.AddressMapEntry.StationAddress">
      <summary>
            Gets the station address.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.GroupManager">
      <summary>
            The Tria-Link group manager.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.AdapterStation">
      <summary>
            Gets the <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> of the Tria-Link adapter which is <see cref="F:Triamec.TriaLink.Port.Local" />,
            i.e. representing the Tria-Link access point for this software.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.BroadcastGroup">
      <summary>
            Gets the group representing all stations.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.GroupManager.ClaimGroup(System.Object,Triamec.TriaLink.Groups.Addressee[])">
      <summary>
            Tries to get the existing group or to create a new group
            with given group members,
            and adds a claim on that group.
            </summary>
      <param name="claimant">The client handle for the claim.</param>
      <param name="groupMembers">The individual <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s
            or groups of stations (<see cref="T:Triamec.TriaLink.Groups.Addressee" />s, that is) to include in the group.</param>
      <returns>
            Returns the group with the union of all individual <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s
            in <paramref name="groupMembers" /> and groups therein.
            I.e. the returned group contains individual <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s only and no groups.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="groupMembers" /> is <see langword="null" />.</para>
        <para>One element in <paramref name="groupMembers" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="groupMembers" /> includes the boot addressee.</para>
        <para>
          <paramref name="groupMembers" /> includes <see cref="P:Triamec.TriaLink.Groups.GroupManager.BroadcastGroup" />.</para>
        <para>
          <paramref name="groupMembers" /> is empty.</para>
        <para>One of the <paramref name="groupMembers" /> does not belong to this <see cref="T:Triamec.TriaLink.Groups.GroupManager" />.</para>
        <para>One of the <paramref name="groupMembers" /> is already in too many groups.</para>
      </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The group could not be established.
            Reasons for failure of group creation are:
            <list type="bullet"><item><description>There is no free address any more, all are in use.</description></item><item><description>One or more of the <paramref name="groupMembers" /> is already in too many
            other groups.</description></item><item><description>The group address could not be written to one of the
            <paramref name="groupMembers" />.</description></item></list></para>
        <para>When an exception is thrown, no claim is added
            and <see cref="M:Triamec.TriaLink.Groups.Addressee.ReleaseClaim(System.Object)" /> does not have to be called.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.Count">
      <summary>
            Gets the number of known <see cref="T:Triamec.TriaLink.Groups.Addressee" />s,
            i.e. individual <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s,
            and both <see cref="F:Triamec.TriaLink.Groups.GroupOwnership.Owned" /> and <see cref="F:Triamec.TriaLink.Groups.GroupOwnership.Observed" />
            group <see cref="T:Triamec.TriaLink.Groups.Addressee" />s,
            but excluding the pre-defined addressees.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.GroupManager.GetTriaLinkStations">
      <summary>
            Gets the regular <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s.
            </summary>
      <returns>
            The <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s, excluding boot addressee, <see cref="P:Triamec.TriaLink.Groups.GroupManager.AdapterStation" /> and stations
            only claimed by <see cref="T:Triamec.TriaLink.Groups.Addressee" />s.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.Master">
      <summary>
            Gets the <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> with the Tria-Link master functionality.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.TriaLink">
      <summary>
            Gets the Tria-Link served by this group manager.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#AdapterStation">
      <summary>
            Gets the <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> of the Tria-Link adapter which is <see cref="F:Triamec.TriaLink.Port.Local" />,
            i.e. representing the Tria-Link access point for this software.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#BootAddressee">
      <summary>
            Gets the boot addressee.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#BroadcastGroup">
      <summary>
            Gets the group representing all stations.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#ClaimStation(System.Object,System.Byte,Triamec.TriaLink.Port)">
      <summary>
            Creates a Tria-Link station if not existing yet,
            and adds a claim on it.
            </summary>
      <param name="claimant">The claimant claiming the station.</param>
      <param name="stationAddress">The station address.</param>
      <param name="sourcePort">The source port to use in the header of Tria-Link <see cref="T:Triamec.TriaLink.Packets.Packet" />s
            when this <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> is used as destination.</param>
      <param name="subordinateBus">The subordinate bus where the station is located.</param>
      <returns>
            Returns the claimed <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance.
            </returns>
      <exception cref="T:System.ArgumentException">An addressee with the specified address exists already.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#ClaimStation(System.Object,System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.Groups.SubBus)">
      <summary>
            Creates a Tria-Link station if not existing yet,
            and adds a claim on it.
            </summary>
      <param name="claimant">The claimant claiming the station.</param>
      <param name="stationAddress">The station address.</param>
      <param name="sourcePort">The source port to use in the header of Tria-Link <see cref="T:Triamec.TriaLink.Packets.Packet" />s
            when this <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> is used as destination.</param>
      <param name="subordinateBus">The subordinate bus where the station is located.</param>
      <returns>
            Returns the claimed <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance.
            </returns>
      <exception cref="T:System.ArgumentException">An addressee with the specified address exists already.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#CreateGroup(System.Object,System.Byte,Triamec.TriaLink.Groups.GroupOwnership,Triamec.TriaLink.Port,Triamec.TriaLink.Groups.AddressMapEntry[])">
      <summary>
            Creates a group and adds a claim on it.
            </summary>
      <param name="claimant">The claimant claiming the group.</param>
      <param name="groupAddress">The group address.</param>
      <param name="ownership">The group ownership on the group.</param>
      <param name="sourcePort">The source port to use in the header of Tria-Link <see cref="T:Triamec.TriaLink.Packets.Packet" />s
            when this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> is used as destination.</param>
      <param name="memberEntries">A possibly empty list of map entries
            specifying the members of the group.</param>
      <returns>
            Returns the claimed group <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="memberEntries" /> or one of its elements is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>An element of the <paramref name="memberEntries" /> does not belong to this instance.</para>
        <para>An element of the <paramref name="memberEntries" /> does not specify the given
              <paramref name="groupAddress" />.</para>
        <para>The <see cref="P:Triamec.TriaLink.Groups.AddressMapEntry.StationAddress" /> of an element of the
              <paramref name="memberEntries" /> equals the given <paramref name="groupAddress" />, which would create an
            illegal observer group.</para>
        <para>An element of the <paramref name="memberEntries" /> does not specify a known
              <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.</para>
        <para>The <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s specified by the <paramref name="memberEntries" /> are not
            distinct.</para>
        <para>The group with the specified <paramref name="groupAddress" />, <paramref name="ownership" />,
            and <paramref name="memberEntries" /> exists already.</para>
      </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>One of the group members is already in too many groups.</para>
        <para>
          <paramref name="ownership" /> is <see cref="F:Triamec.TriaLink.Groups.GroupOwnership.Owned" /> and one of the
              <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s specified by the <paramref name="memberEntries" /> failed to add the group
            membership.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#GetStation(System.Byte)">
      <summary>
            Gets a <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance with a given address.
            </summary>
      <param name="address">The address of the station to get.</param>
      <returns>
            The <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance with the specified <paramref name="address" /> if it exists;
            otherwise <see langword="null" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#Reset">
      <summary>
            Immediately forces to unregister all <see cref="T:Triamec.TriaLink.Groups.Addressee" />s,
            then re-creates the pre-defined <see cref="P:Triamec.TriaLink.Groups.IGroupManager.BroadcastGroup" /> and <see cref="P:Triamec.TriaLink.Groups.IGroupManager.BootAddressee" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Tria-Link communication timed out.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupManager.Triamec#TriaLink#Groups#IGroupManager#StationCount">
      <summary>
            Gets the number of <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instances,
            excluding <see cref="P:Triamec.TriaLink.Groups.IGroupManager.BootAddressee" /> and <see cref="P:Triamec.TriaLink.Groups.IGroupManager.AdapterStation" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.GroupMembership">
      <summary>
            Association class between a <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />
            and one of its group <see cref="T:Triamec.TriaLink.Groups.Addressee" />s
            that specifies the type of <see cref="T:Triamec.TriaLink.Groups.GroupOwnership" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupMembership.Group">
      <summary>
            Gets the group <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupMembership.GroupIndex">
      <summary>
            Gets the index of this <see cref="T:Triamec.TriaLink.Groups.GroupMembership" /> in its <see cref="P:Triamec.TriaLink.Groups.GroupMembership.Station" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupMembership.Ownership">
      <summary>
            Gets the type of ownership of the <see cref="P:Triamec.TriaLink.Groups.GroupMembership.Station" />
            on the <see cref="P:Triamec.TriaLink.Groups.GroupMembership.Group" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.GroupMembership.Station">
      <summary>
            Gets the station where this <see cref="T:Triamec.TriaLink.Groups.GroupMembership" /> belongs to.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.GroupOwnership">
      <summary>
            The ownership of a <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> on a <see cref="T:Triamec.TriaLink.Groups.GroupMembership" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.GroupOwnership.Observed">
      <summary>
            The <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> observes the <see cref="T:Triamec.TriaLink.Groups.GroupMembership" /> only.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.GroupOwnership.Owned">
      <summary>
            The <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> ownes the <see cref="T:Triamec.TriaLink.Groups.GroupMembership" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.IAddressee">
      <summary>
            Entity in the Tria-Link that can send and receive packets.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.IAddressee.Address">
      <summary>
            Gets the unique address of this instance within the Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.IAddressee.GroupManager">
      <summary>
            Gets the instance that manages this instance.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.IAddressee.ReleaseClaim(System.Object)">
      <summary>
            Release a claim on this instance.
            </summary>
      <param name="claimant">The handle specified when
            <see cref="M:Triamec.TriaLink.Groups.GroupManager.ClaimGroup(System.Object,Triamec.TriaLink.Groups.Addressee[])" /> was called.</param>
      <exception cref="T:System.ArgumentException">There is no claim for <paramref name="claimant" />.</exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
            This instance is a group and its group address could not be removed 
            from one or more <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> in the group.
            When thrown, the claim is not removed from the group and it is possible to call this method again
            to try to remove the group address from the failing <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance(s).
            Note that after this exception has been thrown,
            <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> yields <see langword="null" /> values for
            <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" />s that have been removed from the group successfully.
            </exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.IAddressee.SourcePort">
      <summary>
            Gets the source port to use in the header of Tria-Link <see cref="T:Triamec.TriaLink.Packets.Packet" />s when this instance is
            used as destination.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.IGroupManager">
      <summary>
            Instance in a Tria-Link responsible for tracking the <see cref="P:Triamec.TriaLink.Groups.IAddressee.Address" />es of all
            <see cref="T:Triamec.TriaLink.Groups.IAddressee" />s.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.IGroupManager.AdapterStation">
      <summary>
            Gets the <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> of the Tria-Link adapter which is <see cref="F:Triamec.TriaLink.Port.Local" />,
            i.e. representing the Tria-Link access point for this software.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.IGroupManager.BootAddressee">
      <summary>
            Gets the boot addressee.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.IGroupManager.BroadcastGroup">
      <summary>
            Gets the group representing all stations.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.IGroupManager.ClaimStation(System.Object,System.Byte,Triamec.TriaLink.Port)">
      <summary>
            Creates a Tria-Link station if not existing yet,
            and adds a claim on it.
            </summary>
      <param name="claimant">The claimant claiming the station.</param>
      <param name="stationAddress">The station address.</param>
      <param name="sourcePort">The source port to use in the header of Tria-Link <see cref="T:Triamec.TriaLink.Packets.Packet" />s
            when this <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> is used as destination.</param>
      <param name="subordinateBus">The subordinate bus where the station is located.</param>
      <returns>
            Returns the claimed <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance.
            </returns>
      <exception cref="T:System.ArgumentException">An addressee with the specified address exists already.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.IGroupManager.ClaimStation(System.Object,System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.Groups.SubBus)">
      <summary>
            Creates a Tria-Link station if not existing yet,
            and adds a claim on it.
            </summary>
      <param name="claimant">The claimant claiming the station.</param>
      <param name="stationAddress">The station address.</param>
      <param name="sourcePort">The source port to use in the header of Tria-Link <see cref="T:Triamec.TriaLink.Packets.Packet" />s
            when this <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> is used as destination.</param>
      <param name="subordinateBus">The subordinate bus where the station is located.</param>
      <returns>
            Returns the claimed <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance.
            </returns>
      <exception cref="T:System.ArgumentException">An addressee with the specified address exists already.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.IGroupManager.CreateGroup(System.Object,System.Byte,Triamec.TriaLink.Groups.GroupOwnership,Triamec.TriaLink.Port,Triamec.TriaLink.Groups.AddressMapEntry[])">
      <summary>
            Creates a group and adds a claim on it.
            </summary>
      <param name="claimant">The claimant claiming the group.</param>
      <param name="groupAddress">The group address.</param>
      <param name="ownership">The group ownership on the group.</param>
      <param name="sourcePort">The source port to use in the header of Tria-Link <see cref="T:Triamec.TriaLink.Packets.Packet" />s
            when this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> is used as destination.</param>
      <param name="memberEntries">A possibly empty list of map entries
            specifying the members of the group.</param>
      <returns>
            Returns the claimed group <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="memberEntries" /> or one of its elements is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>An element of the <paramref name="memberEntries" /> does not belong to this instance.</para>
        <para>An element of the <paramref name="memberEntries" /> does not specify the given
              <paramref name="groupAddress" />.</para>
        <para>The <see cref="P:Triamec.TriaLink.Groups.AddressMapEntry.StationAddress" /> of an element of the
              <paramref name="memberEntries" /> equals the given <paramref name="groupAddress" />, which would create an
            illegal observer group.</para>
        <para>An element of the <paramref name="memberEntries" /> does not specify a known
              <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.</para>
        <para>The <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s specified by the <paramref name="memberEntries" /> are not
            distinct.</para>
        <para>The group with the specified <paramref name="groupAddress" />, <paramref name="ownership" />,
            and <paramref name="memberEntries" /> exists already.</para>
      </exception>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>One of the group members is already in too many groups.</para>
        <para>
          <paramref name="ownership" /> is <see cref="F:Triamec.TriaLink.Groups.GroupOwnership.Owned" /> and one of the
              <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />s specified by the <paramref name="memberEntries" /> failed to add the group
            membership.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.IGroupManager.GetStation(System.Byte)">
      <summary>
            Gets a <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance with a given address.
            </summary>
      <param name="address">The address of the station to get.</param>
      <returns>
            The <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instance with the specified <paramref name="address" /> if it exists;
            otherwise <see langword="null" />.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Groups.IGroupManager.Reset">
      <summary>
            Immediately forces to unregister all <see cref="T:Triamec.TriaLink.Groups.Addressee" />s,
            then re-creates the pre-defined <see cref="P:Triamec.TriaLink.Groups.IGroupManager.BroadcastGroup" /> and <see cref="P:Triamec.TriaLink.Groups.IGroupManager.BootAddressee" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Tria-Link communication timed out.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.IGroupManager.StationCount">
      <summary>
            Gets the number of <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> instances,
            excluding <see cref="P:Triamec.TriaLink.Groups.IGroupManager.BootAddressee" /> and <see cref="P:Triamec.TriaLink.Groups.IGroupManager.AdapterStation" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.ITriaLinkStation">
      <summary>
            Representation of an individual station in a Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.ITriaLinkStation.CongestionControl">
      <summary>
            Gets the session counting instance or <see langword="null" /> if tracking is disabled.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.ITriaLinkStation.GetUniqueDeviceId">
      <summary>
            Gets the unique device id of the specified station.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.ITriaLinkStation.Ping">
      <summary>
            Tests whether this station responses.
            </summary>
      <returns>
        <see langword="true" /> if communication succeeded.</returns>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="T:Triamec.TriaLink.Groups.SubBus">
      <summary>
            Enumeration of subordinate buses in the TD bus infrastructure.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.SubBus.Local">
      <summary>The device-local bus.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.SubBus.Left">
      <summary>The left bus.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.SubBus.Right">
      <summary>The right bus.</summary>
    </member>
    <member name="T:Triamec.TriaLink.Groups.TriaLinkStation">
      <summary>
            Representation of an individual station in a Tria-Link.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.ChecksumErrorCount">
      <summary>
            Gets the number of cyclic redundancy check transmission errors.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.DspFirmwareId">
      <summary>
            Gets the controller firmware Id or <c>0</c> if no controller is present.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Could not read the DSP firmware Id.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.FpgaFirmwareId">
      <summary>
            Gets the FPGA firmware Id.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.TriaLinkStation.GetGroupMemberships">
      <summary>
            Gets the dynamic group memberships of this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />,
            excluding its individual group (this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> itself),
            and excluding the <see cref="P:Triamec.TriaLink.Groups.GroupManager.BroadcastGroup" />.
            </summary>
      <returns>
            Returns the groups that this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> is a member of.
            </returns>
    </member>
    <member name="F:Triamec.TriaLink.Groups.TriaLinkStation.GroupAddressCount">
      <summary>
            The maximum number of group addresses
            that can be assigned dynamically.
            <para>The value is <c>3</c>.</para></summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.HardwareId">
      <summary>
            Gets the hardware Id,
            a unique code per Vendor, Product, and Manufacturer.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Could not read the hardware Id.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.HardwareIdDetails">
      <summary>
            Gets the hardware identification details.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Could not read the hardware identification details.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.HardwareRevision">
      <summary>
            Gets the revision of the hardware type,
            which is identified by <see cref="P:Triamec.TriaLink.Groups.TriaLinkStation.HardwareId" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Could not read the hardware revision.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.HardwareSerialNumber">
      <summary>
            Gets the hardware serial number,
            a unique number per <see cref="P:Triamec.TriaLink.Groups.TriaLinkStation.HardwareId" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Could not read the hardware serial number.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.TriaLinkStation.IndexOf(Triamec.TriaLink.Groups.Addressee)">
      <summary>
            Searches the group index of a given <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
      <param name="group">The <see cref="T:Triamec.TriaLink.Groups.Addressee" /> to search for.</param>
      <returns>Returns the index of <paramref name="group" />,
            or -1 if not found.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Groups.TriaLinkStation.IsMemberOf(Triamec.TriaLink.Groups.Addressee)">
      <summary>
            Indicates if this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />
            belongs to a certain <paramref name="group" />.
            </summary>
      <param name="group">The group to test for membership.</param>
      <returns>
            Returns <see langword="true" /> if <paramref name="group" />
            is this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> 
            or one of the groups it belongs to;
            otherwise, return <see langword="false" />.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.Link">
      <summary>
            Gets the owner of this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.TriaLinkStation.MaxAddress">
      <summary>
            The largest valid address of a <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            The value is <c>64</c>.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.TriaLinkStation.MaxAddressCount">
      <summary>
            The maximum number of addresses
            that a <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> can be a member of.
            The value is <c>5</c>.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Groups.TriaLinkStation.MinAddress">
      <summary>
            The smallest valid address of a <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            The value is <c>1</c>.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.PeripheryLayoutId">
      <summary>
            Gets the peripheral register layout Id.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">A communication timeout occurred.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.TriaLinkStation.Ping">
      <summary>
            Tests whether this station responses.
            </summary>
      <returns>
        <see langword="true" /> if communication succeeded.</returns>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.ReceiveOverflowCount">
      <summary>
            Gets the number of times an incoming packet was ignored becase the receive buffer was full.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.RegisterLayoutId">
      <summary>
            Gets the register layout Id or <c>0</c> if no controller is present.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Could not read the register layout Id.</exception>
    </member>
    <member name="F:Triamec.TriaLink.Groups.TriaLinkStation.ReservedAddressCount">
      <summary>
            The number of pre-defined, immutable addresses
            of a <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            The value is <c>2</c></summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.SubordinateBus">
      <summary>
            Gets the subordinate bus where this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" /> is located.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.Tag">
      <summary>
            User context associated with this station
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.TamaVirtualMachineId">
      <summary>
            Gets the Tama virtual machine Id or <c>0</c> if no controller is present.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">Could not read the Tama virtual machine Id.</exception>
    </member>
    <member name="M:Triamec.TriaLink.Groups.TriaLinkStation.ToString">
      <summary>
            Gets a textual representation for this <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Groups.TriaLinkStation.Triamec#TriaLink#Groups#ITriaLinkStation#CongestionControl">
      <summary>
            Gets the session counting instance or <see langword="null" /> if tracking is disabled.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Groups.TriaLinkStation.Triamec#TriaLink#Groups#ITriaLinkStation#GetUniqueDeviceId">
      <summary>
            Gets the unique device id of the specified station.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">
        <para>The number of alive sessions would exceed <see cref="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount" />.
              </para>
        <para>-or-</para>
        <para>Could not send the message.</para>
      </exception>
    </member>
    <member name="T:Triamec.TriaLink.IPTunnel.IPTunnelConnection">
      <summary>
        <see cref="T:Triamec.TriaLink.IPTunnel.IPTunneling" /> protocol connection to one <see cref="T:Triamec.TriaLink.IPTunnel.IPTunnelHost" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.IPTunnelConnection.Abort">
      <summary>
            Closes this <see cref="T:Triamec.TriaLink.IPTunnel.IPTunnelConnection" />, including freeing up resources in the <see cref="T:Triamec.TriaLink.IPTunnel.IPTunnelHost" />.
            </summary>
    </member>
    <member name="E:Triamec.TriaLink.IPTunnel.IPTunnelConnection.Disposed">
      <summary>
            Called when the connection is disposed.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.IPTunnelConnection.RedirectAsync">
      <summary>
            Sends data read from the <see cref="T:System.IO.Stream" /> passed at initialization through the IP tunnel, and
            simultaneously writes received data to the same <see cref="T:System.IO.Stream" />.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">The IP tunneling operation failed.</exception>
      <exception cref="T:System.IO.IOException">Dealing with the <see cref="T:System.IO.Stream" /> failed.</exception>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.IPTunnelConnection.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:Triamec.TriaLink.IPTunnel.IPTunnelConnectionEventArgs">
      <summary>
            Arguments for the <see cref="E:Triamec.TriaLink.IPTunnel.IPTunneling.Connect" /> event.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.IPTunnelConnectionEventArgs.Accept(System.IO.Stream)">
      <summary>
            Constructs a new <see cref="T:Triamec.TriaLink.IPTunnel.IPTunnelConnection" /> with the specified client stream.
            </summary>
      <param name="stream">The stream all traffic is redirected to and from.</param>
      <returns>
            The new connection satisfying the connection request represented by this
            <see cref="T:Triamec.TriaLink.IPTunnel.IPTunnelConnectionEventArgs" /> instance.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.IPTunnel.IPTunnelConnectionEventArgs.Server">
      <summary>
            Gets the IP end point to serve.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IPTunnel.IPTunneling">
      <summary>
            Handles IP tunneling within one Tria-Link bus.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.IPTunneling.#ctor(Triamec.TriaLink.Adapter.ITxFifo,System.Byte,Triamec.TriaLink.Port,System.TimeSpan)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.IPTunnel.IPTunneling" /> class.
            </summary>
      <param name="txFifo">The FIFO for IP tunneling packet departure.</param>
      <param name="localAddress">The Tria-Link address of the local Tria-Link station.</param>
      <param name="localPort">The Tria-Link port of the local Tria-Link station.</param>
      <param name="timeout">
            The upper limit for the expected communication round-trip. This isn't a worst-case value since the protocol
            incorporates retries. This doesn't affect pinging stations, where the "Station boot response timeout"
            advanced preference is used.
            </param>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.IPTunneling.ChangeLocalEndPoint(System.Byte,Triamec.TriaLink.Port)">
      <summary>
            Alter the source address of sent packets.
            </summary>
      <param name="address">The new Tria-Link address.</param>
      <param name="port">The new port. If not specified, uses the current port.</param>
    </member>
    <member name="E:Triamec.TriaLink.IPTunnel.IPTunneling.Connect">
      <summary>
            Fired when a connection is requested by a remote Tria-Link station.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.IPTunneling.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelError">
      <summary>
            Errors detected in the IP tunneling protocol.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelError.None">
      <summary>Success.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelError.General">
      <summary>Not further specified error.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelError.Connection">
      <summary>Connection issue.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelError.FrameSize">
      <summary>Illegal frame size.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelError.FrameIncomplete">
      <summary>Not all fragments were received.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelError.Tampered">
      <summary>A frame was modified during transmission.</summary>
    </member>
    <member name="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket">
      <summary>
            Packet used to transfer IP frames.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.#ctor(Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket,Triamec.TriaLink.Packets.TriaLinkEndPoint,System.Nullable{System.Byte},System.Nullable{Triamec.TriaLink.IPTunnel.Packets.IPTunnelError},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
      <summary>
            Creates a copy of the specified new instance of the <see cref="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket" /> class.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.#ctor(Triamec.TriaLink.Packets.TriaLinkEndPoint,Triamec.TriaLink.Packets.TriaLinkEndPoint,Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPTunnelDirective)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket" /> class.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.#ctor(Triamec.TriaLink.Packets.TriaLinkEndPoint,Triamec.TriaLink.Packets.TriaLinkEndPoint,Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPTunnelDirective,Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command,System.Byte,System.Byte,System.Byte,System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket" /> class.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.#ctor(Triamec.TriaLink.Packets.TriaLinkEndPoint,Triamec.TriaLink.Packets.TriaLinkEndPoint,Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPTunnelDirective,Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command,System.Byte,Triamec.TriaLink.IPTunnel.Packets.IPTunnelError,System.Byte,System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket" /> class.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.#ctor(Triamec.TriaLink.TamValue32[])">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket" /> class from raw data.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Create(Triamec.TriaLink.TamValue32[])">
      <summary>
            Creates the correct <see cref="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket" /> instance based on raw data.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.CreateDirective(System.Boolean)">
      <summary>
            Creates the directive based on the specified boolean value.
            </summary>
      <returns>Never <see cref="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPTunnelDirective.Command" />.</returns>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.DecodeAddress(System.UInt32)">
      <summary>
            Computes an <see cref="T:System.Net.IPAddress" /> instance from its bit representation.
            </summary>
      <param name="address"></param>
      <returns></returns>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.EncodeAddress(System.Net.IPAddress)">
      <summary>
            Computes the bit representation of the specified <see cref="T:System.Net.IPAddress" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPCommand">
      <summary>
            Gets the IP tunnel protocol command.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Process(Triamec.TriaLink.IPTunnel.IPTunneling)">
      <summary>
            Dispatches this packet to the specified protocol.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command">
      <summary>
            Identifier for different kinds of <see cref="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket" />s.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command.Ping">
      <summary>Request information about available resources related to IP tunneling.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command.Connect">
      <summary>Establishes a connection.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command.More">
      <summary>Send a fragment of an IP frame.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command.End">
      <summary>Send the last fragment of an IP frame.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command.Close">
      <summary>Close the connection.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.Command.KeepAlive">
      <summary>Notify the server to not close the connection in absence of traffic.</summary>
    </member>
    <member name="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPTunnelDirective">
      <summary>
            Specifies the command for an <see cref="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPTunnelDirective.Request">
      <summary>
            A request with desired response.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPTunnelDirective.Response">
      <summary>
            A response for a request.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.IPTunnelDirective.Command">
      <summary>
            A request without desiring a response.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.PayloadIndex">
      <summary>
            The word index of the payload words.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.PayloadIndex.Data0">
      <summary>Index of the first payload word.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.PayloadIndex.Data1">
      <summary>Index of the second payload word.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.PayloadIndex.Data2">
      <summary>Index of the third payload word.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.PayloadIndex.Data3">
      <summary>Index of the fourth payload word.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.PayloadIndex.Data4">
      <summary>Index of the fifth payload word.</summary>
    </member>
    <member name="F:Triamec.TriaLink.IPTunnel.Packets.IPTunnelPacket.PayloadIndex.Data5">
      <summary>Index of the sixth payload word.</summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.IPacketSender">
      <summary>
            A provider of <see cref="T:Triamec.TriaLink.Packets.Packet" />s.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IPacketSender.AvailableCount">
      <summary>
            Gets the number of packet slots
            available for dequeuing.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue">
      <summary>
            Dequeues as many packets as available.
            </summary>
      <returns>Returns an array of packets not being <see langword="null" />, 
            sorted by their <see cref="P:Triamec.TriaLink.Packets.IsochronousPacket.Timestamp" />,
            possibly with gaps in the <see cref="P:Triamec.TriaLink.Packets.IsochronousPacket.Timestamp" />s.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue(System.Int32)">
      <summary>
            Dequeues up to the specified number of available packets.
            </summary>
      <param name="maxCount">The maximum number of packets to return.</param>
      <returns>Returns an array of non-<see langword="null" /> packets, 
            sorted by their <see cref="P:Triamec.TriaLink.Packets.IsochronousPacket.Timestamp" />,
            possibly with gaps in the <see cref="P:Triamec.TriaLink.Packets.IsochronousPacket.Timestamp" />s.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <c>
          <paramref name="maxCount" /> &lt; 0</c>.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize">
      <summary>
            Gets the minimum number of packets that must be available for <see cref="M:Triamec.TriaLink.Packets.IPacketSender.Dequeue(System.Int32)" />ing
            before a <see cref="E:Triamec.TriaLink.Packets.IPacketSender.PacketsAvailable" /> event is raised.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.IPacketSender.DequeueSingle">
      <summary>
            Dequeues one packet.
            </summary>
      <returns>The packet or <see langword="null" /> if none available.</returns>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IPacketSender.EnqueueEnabled">
      <summary>
            Gets or sets the flag to enable enqueuing of new packets.
            When set to <see langword="false" />, new packets are rejected.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IPacketSender.HasTimeout">
      <summary>
                Gets a value indicating whether a packet delivery timeout occurred.
            </summary>
    </member>
    <member name="E:Triamec.TriaLink.Packets.IPacketSender.PacketsAvailable">
      <summary>
            Event raised whenever enough (<see cref="P:Triamec.TriaLink.Packets.IPacketSender.DequeueChunkSize" />) new packets 
            that were not yet subject of an earlier event
            are available for dequeuing.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IPacketSender.Peek">
      <summary>
            Tries to return the oldest value of the buffer.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.IPacketSender.Skip(System.Int32)">
      <summary>
            Removes the specified number of packets from the buffer.
            </summary>
      <param name="count">The number of packets to remove.</param>
      <returns>The actual number of removed packets.</returns>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IPacketSender.Timeout">
      <summary>
            Gets the duration between the last enqueue operation 
            and a <see cref="E:Triamec.TriaLink.Packets.IPacketSender.PacketsAvailable" /> event indicating packet delivery timeout.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IPacketSender.TimeoutEnabled">
      <summary>
            Indicates or sets whether packet delivery timeout should be noticed.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.IsochronousPacket">
      <summary>
            Isochronous packet.
            A representation for packets
            of isochronous Tria-Link messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.IsochronousPacket.#ctor(System.Byte,System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.TriaLinkEndpointType,System.Byte,System.Int32,Triamec.TriaLink.Timestamp,Triamec.TriaLink.TamValue32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Packets.IsochronousPacket" /> class.
            </summary>
      <param name="sourceAddress">The source address.</param>
      <param name="destinationAddress">The destination address.</param>
      <param name="destinationPort">The destination port.</param>
      <param name="endpointType">Type of the endpoint.</param>
      <param name="ownerAddress">The owner address.</param>
      <param name="subscriptionId">The subscription id.</param>
      <param name="timestamp">The timestamp.</param>
      <param name="values">The values.</param>
    </member>
    <member name="M:Triamec.TriaLink.Packets.IsochronousPacket.#ctor(Triamec.TriaLink.TamValue32[])">
      <summary>
            Constructor
            </summary>
      <param name="packetData">The raw packet.</param>
    </member>
    <member name="M:Triamec.TriaLink.Packets.IsochronousPacket.GetValue(System.Int32)">
      <summary>
            Gets the subscription value at the specified index.
            </summary>
      <param name="index">The value index.</param>
      <returns>The sample.</returns>
    </member>
    <member name="F:Triamec.TriaLink.Packets.IsochronousPacket.MaxSubscriptionValues">
      <summary>
            The maximum number of subscription words per packet 
            within one subscription.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IsochronousPacket.OwnerAddress">
      <summary>
            Gets the Tria-Link address of the subscription owner.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IsochronousPacket.SubscriptionId">
      <summary>
            Gets the subscription identifier.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.IsochronousPacket.Timestamp">
      <summary>
            Gets the <see cref="P:Triamec.TriaLink.Packets.IsochronousPacket.Timestamp" /> of this <see cref="T:Triamec.TriaLink.Packets.Packet" />.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.Packet">
      <summary>
            Isochronous packet.
            A representation for request and response packets
            of isochronous Tria-Link messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.Packet.#ctor">
      <summary>
            Default protected constructor.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.Packet.#ctor(Triamec.TriaLink.Packets.Packet,System.Byte,Triamec.TriaLink.Port)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Packets.Packet" /> class as response for a specified request.
            </summary>
      <param name="request">The request to be responded.</param>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
    </member>
    <member name="M:Triamec.TriaLink.Packets.Packet.#ctor(Triamec.TriaLink.Packets.TriaLinkEndPoint,Triamec.TriaLink.Packets.TriaLinkEndPoint,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Packets.Packet" /> class.
            </summary>
      <param name="source">The source end point.</param>
      <param name="destination">The destination end point.</param>
      <param name="expectResponse">Whether a response is expected.</param>
    </member>
    <member name="M:Triamec.TriaLink.Packets.Packet.#ctor(Triamec.TriaLink.TamValue32[])">
      <summary>
            Constructor
            </summary>
      <param name="packetData">The raw packet.</param>
    </member>
    <member name="F:Triamec.TriaLink.Packets.Packet.BYTES_PER_WORD">
      <summary>
            The number of bytes per Memory word.
            <para>The value is <c>4u</c>.</para></summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.Destination">
      <summary>
            Gets the destination address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.DestinationEndPoint">
      <summary>
            Gets the destination end-point of this <see cref="T:Triamec.TriaLink.Packets.Packet" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.DestinationPort">
      <summary>
            Gets the destination's <see cref="T:Triamec.TriaLink.Port" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.EndpointType">
      <summary>
            Gets the endpoint type.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.Packet.Enqueue(Triamec.TriaLink.Adapter.ITxFifo)">
      <summary>
            Enqueues the response into the specified transmit FIFO.
            </summary>
      <param name="txFifo">The transmit FIFO.</param>
      <exception cref="T:Triamec.TriaLink.Adapter.FifoException">
        <paramref name="txFifo" /> is full and not dequeued by the opposite side.
            </exception>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.ExpectResponse">
      <summary>
            Gets the "expect response" flag.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.Packet.GetSender(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the sender of the response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.Item(System.Int32)">
      <summary>
            Gets or sets a raw value of this packet at the specified index.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.Source">
      <summary>
            Gets the source address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.SourceEndPoint">
      <summary>
            Gets the source end-point of this <see cref="T:Triamec.TriaLink.Packets.Packet" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.SourcePort">
      <summary>
            Gets the source's <see cref="T:Triamec.TriaLink.Port" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.Packet.Triamec#TriaLink#ITriaLinkResponse#SenderAddress">
      <summary>
            Gets the raw address of the sender.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.Packet.WORDS_PER_PACKET">
      <summary>
            The number of words in a packet.
            <para>
            The value is <c>8</c>.
            </para></summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.PacketExtensions">
      <summary>
            Packet extensions for <see cref="T:Triamec.TriaLink.TamValue32" /> arrays representing packets.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.PacketExtensions.Timestamp(Triamec.TriaLink.TamValue32[])">
      <summary>
            Gets the <see cref="M:Triamec.TriaLink.Packets.PacketExtensions.Timestamp(Triamec.TriaLink.TamValue32[])" /> of this packet.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.ServicePacket">
      <summary>
            A representation for request and response packets
            of Tria-Link service messages.
            Implements numerous specializations of <see cref="T:Triamec.TriaLink.IServiceResponse" />
            which allow typed readouts from the raw packet data.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.#ctor(Triamec.TriaLink.TamValue32[])">
      <summary>
            Constructor of a service message response packet
            </summary>
      <param name="packetData">The raw packet data to create the packet from.</param>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Acceleration">
      <summary>
            Gets the dedicated acceleration to use, in meters per square second or radian per square second.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.AcceptanceDate">
      <summary>
            Gets the date when the request was accepted.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Address">
      <summary>
            Gets the address for a station.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.AddressControlCommand">
      <summary>
            Gets the address control command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Amplitude">
      <summary>
            Gets the amplitude of the test signal.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.AsynchronousTamaVMCommand">
      <summary>
            Gets the command for the asynchronous Tama VM.
            Only applies when <see cref="P:Triamec.TriaLink.ITamaControlCommand.TamaControlCommands" />
            contains <see cref="F:Triamec.TriaLink.TamaControlCommands.ControlAsynchronousTamaVM" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.AxisControlCommands">
      <summary>
            Gets the axis control commands.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.AxisNumbers">
      <summary>
            Gets the axis numbers.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.BridgePowerSwitch">
      <summary>
            Gets the setting of the power section switch.
            Only applies when <see cref="P:Triamec.TriaLink.IDriveControlCommand.DriveControlCommands" />
            contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SwitchBridgePower" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.DeleteFirmware">
      <summary>
            Gets a value indicating whether to delete the firmware.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.DestinationEndpoint">
      <summary>
            Gets the destination endpoint.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Downsampling">
      <summary>
            Gets the subscription's downsampling.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.DriveControlCommands">
      <summary>
            Gets the drive control commands.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.DriveStopCommand">
      <summary>
            Gets the emergency stop command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.DspFirmwareId">
      <summary>
            Gets the device firmware identifier.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.EnableFirmware">
      <summary>
            Gets a value indicating whether to enable the firmware.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.EnablingState">
      <summary>
            Gets the enabling state of the subscription.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.FirmwareRangeLength">
      <summary>
            Gets the length of the firmware code range that was read, in bytes.
            Values are between <c>0x00</c> and <c>0x14</c>.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.FirmwareRangeOffset">
      <summary>
            Gets the offset in the firmware code range where to reading started, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.FrameSize">
      <summary>
            Gets the number of samples of the test signal.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Frequency">
      <summary>
            Gets the frequency of the test signal.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.GetFirmwareRange">
      <summary>
            Gets a firmware code range
            of size <see cref="P:Triamec.TriaLink.Packets.ServicePacket.FirmwareRangeLength" />, in bytes,
            and starting at offset <see cref="P:Triamec.TriaLink.Packets.ServicePacket.FirmwareRangeOffset" />, in bytes.
            </summary>
      <returns>Returns the firmware code range.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.GetPublishRegisterOffsets">
      <summary>
            Gets an array of offsets
            for the registers to publish, in bytes.
            </summary>
      <returns>Returns the array of offsets for the registers to publish, in bytes.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.GetRegisterOffsets">
      <summary>
            Gets an array of <c>4</c> offset values for <see cref="M:Triamec.TriaLink.IRegisterValueCommand.GetRegisterValues" />, in bytes.
            </summary>
      <returns>Returns the offset values, in bytes.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.GetRegisterRange">
      <summary>
            Gets a register value range of Size <see cref="P:Triamec.TriaLink.IRegisterRangeCommand.RangeLength" />,
            starting at offset <see cref="P:Triamec.TriaLink.IRegisterRangeCommand.RegisterRangeOffset" />.
            </summary>
      <returns>Returns the register value range.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.GetRegisterValues">
      <summary>
            Gets an array of <c>4</c> register values 
            for the registers at offsets <see cref="M:Triamec.TriaLink.IRegisterCommand.GetRegisterOffsets" />.
            </summary>
      <returns>Returns the register values.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.GetStatisticsCount(System.Int32)">
      <summary>
            Gets the counter with the given index.
            </summary>
      <param name="index">A value between <c>0</c> and <c>9</c>.</param>
      <returns>The current value of the counter.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.GetSubscribeRegisterOffsets">
      <summary>
            Gets an array of offsets for the registers to subscribe, in bytes.
            </summary>
      <returns>Returns the array of offsets for the reigsters to subscribe, in bytes.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.GetSubscriptionDestination(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the subscription destination.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.HardwareId">
      <summary>
            Gets the hardware identifier, a unique code per vendor, product, and manufacturer.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.HardwareRevision">
      <summary>
            Gets the revision of the hardware type, which is identified by <see cref="P:Triamec.TriaLink.IIdentificationResponse.HardwareId" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.HardwareSerialNumber">
      <summary>
            Gets the hardware serial number, a unique number per <see cref="P:Triamec.TriaLink.IIdentificationResponse.HardwareId" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.ImageByteSize">
      <summary>Gets the byte size of the area to delete.</summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.IsEsiAddress(System.UInt32)">
      <summary>
            Gets a value indicating whether the specified address represents an EtherCAT slave information object
            index.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.IsIPTunnelPacket(Triamec.TriaLink.TamValue32[])">
      <summary>
            Gets a value indicating whether the specified packet is used for IP tunneling. 
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.IsochronousTamaVMCommand">
      <summary>
            Gets the command for the isochronous Tama VM.
            Only applies when <see cref="P:Triamec.TriaLink.ITamaControlCommand.TamaControlCommands" />
            contains <see cref="F:Triamec.TriaLink.TamaControlCommands.ControlIsochronousTamaVM" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.IsStartupActive">
      <summary>
            Indicates if the startup range is stored and activated.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.IsStartupRangeDeleted">
      <summary>
            Indicates if the startup range in the flash memory is deleted.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.IsStartupRangeLoaded">
      <summary>
            Indicates if the startup range is loaded.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.LimitTorque">
      <summary>
            Gets a value indicating whether to limit the torque during the move.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.ServicePacket.MAX_FIRMWARE_RANGE_LENGTH">
      <summary>
            The maximum firmware range length [bytes] to read or write.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.ServicePacket.MAX_SUBSCRIPTION_REGISTERS">
      <summary>
            The maximum number of registers
            to include in one subscription.
            The value is <c>5</c>.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.ServicePacket.MIN_FIRMWARE_RANGE_LENGTH">
      <summary>
            The minimum firmware range length to read or write.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.MotorBaseConfigurationCommand">
      <summary>
            Gets the motor base configuration command.
            Only applies when <see cref="P:Triamec.TriaLink.IDriveControlCommand.DriveControlCommands" />
            contains <see cref="F:Triamec.TriaLink.DriveControlCommands.SetMotorBaseConfiguration" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.OmitForeign">
      <summary>
            Indicates whether subscriptions and/or publications from other stations are NOT reset.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.OmitOwn">
      <summary>
            Indicates whether own subscriptions and/or publications are NOT reset.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.PathPlannerCommand">
      <summary>
            Gets the path planner command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.PathPlannerDirection">
      <summary>
            Gets the direction to force.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.PositionOrDistance">
      <summary>
            Gets the position or distance, in meters or radian.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.RangeLength">
      <summary>
            Gets the length of the register range.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.RegisterLayoutId">
      <summary>
            Gets the register layout identifier.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.RegisterRangeOffset">
      <summary>
            Gets the start offset of <see cref="M:Triamec.TriaLink.IRegisterRangeValuesCommand.GetRegisterRange" />, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.RequestCommand">
      <summary>
            Gets the request command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.ResetPublications">
      <summary>
            Indicates whether publications are reset.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.ResetStatistics">
      <summary>
            Gets a value indicating whether the counters are to be reset after returning the current values.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.ResetSubscriptions">
      <summary>
            Indicates whether subscriptions are reset.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.ResponseCommand">
      <summary>
            Gets the response command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Speed">
      <summary>
            Indicates whether this is a highspeed subscription.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.StartupSettings">
      <summary>
            Gets the startup settings from the response message.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.StatisticSelector">
      <summary>
            Gets the counter set selector.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.SubscribeTimestampRegisterOffset">
      <summary>
            Gets the offset of the timestamp register that is always part of a subscription, in bytes.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.SubscriptionDestinationAddress">
      <summary>
            Gets the subscription destination.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.SubscriptionDestinationPort">
      <summary>
            Gets the subscription destination port.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.SubscriptionId">
      <summary>
            Gets the subscription ID.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TamaCodeRangeLength">
      <summary>
            Gets the Tama code range length.
            Only applies when <see cref="P:Triamec.TriaLink.ITamaControlCommand.IsochronousTamaVMCommand" />
            or <see cref="P:Triamec.TriaLink.ITamaControlCommand.AsynchronousTamaVMCommand" />
            is <see cref="F:Triamec.TriaLink.TamaVMCommand.VerifyCode" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TamaControlCommands">
      <summary>
            Gets the Tama control commands.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TamaVirtualMachineId">
      <summary>
            Gets the Tama virtual machine identifier.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TamRequest">
      <summary>
            Gets the raw TAM request value.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TestSignalCommand">
      <summary>
            Gets the test signal command.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Torque">
      <summary>
            Gets the force to use, in newton (for a linear system),
            or the torque, in newton meters (for a rotative system).
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TorqueRamp">
      <summary>
            Gets the maximum time derivative of the force, in newton per second (for a linear system), or of the torque
            in newton meters per second (for a rotative system).
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IAddressControlCommand#Bus">
      <summary>
            Indicates on which bus the responding device is located.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IAddressControlRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.AddressControlCommand,System.UInt32,Triamec.TriaLink.UniqueDeviceId,System.Byte,Triamec.TriaLink.Groups.SubBus)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="addressControlCommand">The address control command.</param>
      <param name="hardwareId">The Hardware ID, a unique code per Vendor, Product, and Manufacturer.</param>
      <param name="uniqueDeviceId">The unique device identifier of a station.</param>
      <param name="address">The address for a station.</param>
      <param name="bus">The subordinate bus where the station is located.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IAxisControlRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.AxisControlCommands,Triamec.TriaLink.Timestamp)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="axisNumbers">The axis numbers.</param>
      <param name="commands">The axis control commands.</param>
      <param name="acceptanceDate">The acceptance date.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IDriveControlRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.DriveControlCommands,Triamec.TriaLink.DriveStopCommand,Triamec.TriaLink.MotorBaseConfiguration,Triamec.TriaLink.BridgePowerSwitch,Triamec.TriaLink.Timestamp)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="commands">The commands.</param>
      <param name="driveStopCommand">The emergency stop command.</param>
      <param name="motorBaseConfiguration">The motor base configuration.</param>
      <param name="powerSwitch">The setting of the power section switch.</param>
      <param name="acceptanceDate">The date when the request was executed or rejected.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IEnableSubscriptionRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Byte,Triamec.TriaLink.PublicationCommand,System.UInt32,Triamec.TriaLink.TriggerDataType,Triamec.TriaLink.TamValue32)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="subscriptionId">The subscription identifier.</param>
      <param name="publishCommand">The enabling state of the subscription.</param>
      <param name="triggerRegisterOffset">The register offset of the subscription trigger, in bytes.</param>
      <param name="triggerDataType">The data type of the subscription trigger.</param>
      <param name="triggerLevel">The trigger level of the subscription.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IIdentificationRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="hardwareId">the hardware identifier, a unique code per vendor, product, and
            manufacturer.</param>
      <param name="hardwareRevision">The revision of the hardware type, which is identified by
            <paramref name="hardwareId" />.</param>
      <param name="hardwareSerialNumber">The hardware serial number, a unique number per
            <paramref name="hardwareId" />.</param>
      <param name="dspFirmwareId">The device firmware identifier.</param>
      <param name="registerLayoutId">The register layout identifier.</param>
      <param name="tamaVirtualMachineId">The Tama virtual machine identifier.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IMoveDoubleRequest#PositionOrDistance">
      <summary>
            Gets the position or distance, in meters or radian.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IMoveDoubleRequest#Velocity">
      <summary>
             Gets the dedicated velocity to use, in meters per second or radian per second.
             </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IMoveFloatRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.PathPlannerCommand,Triamec.TriaLink.PathPlannerDirection,System.Boolean,Triamec.TriaLink.Timestamp)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="axisNumbers">The axis numbers.</param>
      <param name="command">The path planner command.</param>
      <param name="direction">The path planner direction.</param>
      <param name="limitTorque">Whether to limit the torque during the move.</param>
      <param name="acceptanceDate">The acceptance date.</param>
      <returns>
            The newly created response packet.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IPublishRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Byte,System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.TriaLinkEndpointType,Triamec.TriaLink.Subscriptions.SubscriptionSpeed,System.UInt16,System.UInt32[])">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="subscriptionId">The subscription identifier.</param>
      <param name="subscriptionDestinationAddress">The subscription destination.</param>
      <param name="subscriptionDestinationPort">The subscription destination port.</param>
      <param name="destinationEndpoint">The destination endpoint of the published packets.</param>
      <param name="speed">The subscription's <see cref="T:Triamec.TriaLink.Subscriptions.SubscriptionSpeed" />.</param>
      <param name="downsampling">The subscription's downsampling.</param>
      <param name="publishRegisterOffsets">An array of maximal
            <see cref="F:Triamec.TriaLink.Packets.ServicePacket.MAX_SUBSCRIPTION_REGISTERS" /> byte offsets for the registers to
            publish.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IRegisterRangeRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Boolean,System.UInt32,Triamec.TriaLink.TamValue32[])">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="acknowledge">If set to <see langword="true" />, acknowledge a write request.
            Otherwise, report register values.</param>
      <param name="registerRangeOffset">The start offset of the range, in bytes.</param>
      <param name="registerRangeValues">The register value range.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IRegisterRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Boolean,System.UInt16,System.UInt16,System.UInt16,System.UInt16,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32,Triamec.TriaLink.TamValue32)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="acknowledge">If set to <see langword="true" />, acknowledge a write request.
            Otherwise, report register values.</param>
      <param name="registerOffset0">The first register offset, in bytes.</param>
      <param name="registerOffset1">The second register offset, in bytes.</param>
      <param name="registerOffset2">The third register offset, in bytes.</param>
      <param name="registerOffset3">The fourth register offset, in bytes.</param>
      <param name="registerValue0">The register value0.</param>
      <param name="registerValue1">The register value1.</param>
      <param name="registerValue2">The register value2.</param>
      <param name="registerValue3">The register value3.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IResetSubscriptionsRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="resetPublications">Whether publications are reset.</param>
      <param name="resetSubscriptions">Whether subscriptions are reset.</param>
      <param name="omitOwn">Whether own subscriptions and/or publications are NOT reset.</param>
      <param name="omitForeign">Whether subscriptions and/or publications from other stations are NOT
            reset.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IServiceResponse#GetSession(Triamec.TriaLink.Sessions.SessionManager)">
      <summary>
            Gets the session for which this response is relevant.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IStartupControlRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Boolean,System.Boolean,System.Boolean,Triamec.TriaLink.ResponseStartupSettings)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="isStartupRangeDeleted">Whether the startup range in the flash memory is deleted.</param>
      <param name="isStartupActive">Whether the startup range is stored and activated.</param>
      <param name="isStartupRangeLoaded">Whether the startup range is loaded.</param>
      <param name="startupSettings">The startup settings.</param>
      <returns>
            The newly created response packet.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#ISubscribeRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Byte,System.UInt32,System.UInt32[])">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="subscriptionId">The subscription identifier.</param>
      <param name="timestampRegisterOffset">The offset of the timestamp register that is always part of a
            subscription, in bytes.</param>
      <param name="registerOffsets">An array of maximal
            <see cref="F:Triamec.TriaLink.Packets.ServicePacket.MAX_SUBSCRIPTION_REGISTERS" /> byte offsets for the registers to
            subscribe.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#ITamaControlRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.TamaControlCommands,Triamec.TriaLink.TamaVMCommand,Triamec.TriaLink.TamaVMCommand,System.UInt16)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="commands">The TamaVM control commands to execute.</param>
      <param name="isochronousVMCommand">The control command for the isochronous TamaVM.</param>
      <param name="asynchronousVMCommand">The control command for the asynchronous TamaVM.</param>
      <param name="codeRangeLength">The Tama code range length.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#ITestSignalRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.AxisNumbers,Triamec.TriaLink.CurrentControllerTestSignalCommand,System.Single,System.Single,System.UInt16,System.UInt16)">
      <summary>
            Creates a Tria-Link response message.
            </summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="axisNumbers">The axis numbers.</param>
      <param name="testSignalCommand">The test signal command.</param>
      <param name="frequency">The frequency of the test signal.</param>
      <param name="amplitude">The amplitude of the test signal.</param>
      <param name="frameSize">The number of samples of the test signal, in periods of the current controller of
            the axis.</param>
      <param name="waitSize">The number of samples to use for the transition to the test signal, in periods of the
            current controller of the axis.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriReadRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.Nullable{Triamec.TriaLink.TamValue32}[])">
      <summary>Creates a Tria-Link response message.</summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="registerValues">The register values to return. Some elements may be <see langword="null" />.
            </param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriReadRequest#TryGetIndex(System.Int32,System.UInt32@)">
      <summary>
            Gets the requested URI index at the specified position.
            </summary>
      <param name="registerIndex">The positional index.</param>
      <param name="index">The requested URI index.</param>
      <returns>Whether an URI is requested at the specified position.</returns>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriReadResponse#TryGetValue(System.Int32,Triamec.TriaLink.TamValue32@)">
      <summary>Tries to get the read value.</summary>
      <param name="index">The index of the read register.</param>
      <param name="value">The read value, or <see cref="F:Triamec.TriaLink.TamValue32.Zero" />, if the result is
            <see langword="false" />.</param>
      <returns>Whether the specified register was successfully read.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is smaller than <c>0</c> or
            greater or equal to <see cref="F:Triamec.TriaLink.Packets.IsochronousPacket.MaxSubscriptionValues" />.</exception>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriWriteCommand#Index0">
      <summary>Gets the 0th write index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriWriteCommand#Index1">
      <summary>Gets the 1st write index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriWriteCommand#Index2">
      <summary>Gets the 2nd write index.</summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriWriteRequest#CreateResponse(System.Byte,Triamec.TriaLink.Port,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Creates a Tria-Link response message.</summary>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
      <param name="index0">The 0th index written to.</param>
      <param name="index1">The 1st index written to.</param>
      <param name="index2">The 2nd index written to.</param>
      <returns>The newly created response packet.</returns>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriWriteRequest#Value0">
      <summary>Gets the value for the 0th index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriWriteRequest#Value1">
      <summary>Gets the value for the 1st index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Triamec#TriaLink#IUriWriteRequest#Value2">
      <summary>Gets the value for the 2nd index.</summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TriggerDataType">
      <summary>
            Gets the data type of the subscription trigger.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TriggerLevel">
      <summary>
            Gets the trigger level contributing to the condition when packets are sent.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.TriggerRegisterOffset">
      <summary>
            Gets the register address, or byte offset of the subscription trigger.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.UniqueDeviceId">
      <summary>
            Gets the unique device identifier of a station.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.Velocity">
      <summary>
             Gets the dedicated velocity to use, in meters per second or radian per second.
             </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.VerifyFirmware">
      <summary>
            Gets a value indicating whether the firmware checksum is verified.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.ServicePacket.WaitSize">
      <summary>
            Gets the number of samples to use for the transition to the test signal.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.SessionPacket">
      <summary>
            Base class for Tria-Link Service packets.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.SessionPacket.#ctor(Triamec.TriaLink.Packets.SessionPacket,System.Byte,Triamec.TriaLink.Port)">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Packets.SessionPacket" /> class as response for a specified request.
            </summary>
      <param name="request">The request to be responded.</param>
      <param name="sourceAddress">The address of the responding Tria-Link station.</param>
      <param name="sourcePort">The responding port.</param>
    </member>
    <member name="M:Triamec.TriaLink.Packets.SessionPacket.#ctor(Triamec.TriaLink.TamValue32[])">
      <summary>
            Base Constructor when analyzing a received packet.
            </summary>
      <param name="packetData">The raw packet data to create the packet from.</param>
    </member>
    <member name="M:Triamec.TriaLink.Packets.SessionPacket.SetResponseHeaderFromRequest(Triamec.TriaLink.Packets.SessionPacket,System.Byte)">
      <summary>
            Sets the header of this response from the given request.
            </summary>
      <param name="request">The request.</param>
      <param name="sourceAddress">
            The source address to set in the header despite of the <paramref name="request" />.
            </param>
    </member>
    <member name="T:Triamec.TriaLink.Packets.StatusPacket">
      <summary>
            Status/control Tria-Link packet.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.StatusPacket.#ctor(Triamec.TriaLink.TamValue32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Triamec.TriaLink.Packets.StatusPacket" /> class.
            </summary>
      <param name="packetData">The raw packet data to create the packet from.</param>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ChecksumErrorCount">
      <summary>
            Gets the checksum error count.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ClearAll">
      <summary>
            Indicates whether to clear all control fields.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ClearCrcErrorCounter">
      <summary>
            Gets a value indicating whether to clear the cyclic redundancy check error counter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ClearGroup1Address">
      <summary>
            Indicates whether to clear the group 1 address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ClearGroup2Address">
      <summary>
            Indicates whether to clear the group 2 address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ClearGroup3Address">
      <summary>
            Indicates whether to clear the group 3 address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ClearReceiveOverflowCount">
      <summary>
            Gets a value indicating whether to clear the FIFO full error counter.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ClearStationAddress">
      <summary>
            Indicates whether to clear the station address.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.StatusPacket.GetGroup1(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the first dynamic group <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.StatusPacket.GetGroup2(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the second dynamic group <see cref="T:Triamec.TriaLink.Groups.Addressee" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.StatusPacket.GetGroup3(Triamec.TriaLink.Groups.GroupManager)">
      <summary>
            Gets the third dynamic group <see cref="T:Triamec.TriaLink.Groups.Addressee" /></summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.StatusPacket.GetStation(Triamec.TriaLink.Groups.IGroupManager)">
      <summary>
            Gets the individual <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            </summary>
      <returns>
            The station or <see langword="null" /> if <paramref name="groupManager" /> doesn't know of a
            <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" /> with <see cref="P:Triamec.TriaLink.IStatusResponse.StationAddress" />.
            </returns>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.PeripheryData">
      <summary>
            Gets the periphery data at <see cref="P:Triamec.TriaLink.IStatusResponse.PeripheryDeviceAddress" />/<see cref="P:Triamec.TriaLink.IStatusResponse.PeripheryRegisterAddress" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.PeripheryDeviceAddress">
      <summary>
            Gets the periphery device address that was read from/written to.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.PeripheryMaxAddress">
      <summary>
            The maximum possible value for <see cref="P:Triamec.TriaLink.Packets.StatusPacket.PeripheryRegisterAddress" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.PeripheryReadTimeout">
      <summary>
            Indicates a periphery read timeout.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.PeripheryRegisterAddress">
      <summary>
            Gets the periphery register address that was read from/written to.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.PeripheryWriteTimeout">
      <summary>
            Indicates a periphery write timeout.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.ReceiveOverflowCount">
      <summary>
            Gets the number of times an incoming packet was ignored becase the receive buffer was full.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.SetAll">
      <summary>
            Indicates whether to set all control fields.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.SetGroup1Address">
      <summary>
            Indicates whether to set the group 1 address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.SetGroup2Address">
      <summary>
            Indicates whether to set the group 2 address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.SetGroup3Address">
      <summary>
            Indicates whether to set the group 3 address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.SetStationAddress">
      <summary>
            Indicates whether to set the station address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.StatusPacket.StationAddress">
      <summary>
            Gets the address of the individual <see cref="T:Triamec.TriaLink.Groups.TriaLinkStation" />.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.StatusPacket.Triamec#TriaLink#IStatusResponse#GetSession(Triamec.TriaLink.Sessions.SessionManager)">
      <summary>
            The session for which this response is relevant.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.StatusPacket.RxWord6Masks">
      <summary>
            The bit masks in word 6 of the receive (Rx, Control) packet.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.RxWord6Masks.None">
      <summary>None</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.RxWord6Masks.PeripheryDeviceAddress">
      <summary>PeripheryDeviceAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.RxWord6Masks.PeripheryReadTimeout">
      <summary>PeripheryReadTimeout</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.RxWord6Masks.PeripheryRegisterLsbAddress">
      <summary>PeripheryRegisterLsbAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.RxWord6Masks.PeripheryRegisterMsbAddress">
      <summary>PeripheryRegisterMsbAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.RxWord6Masks.PeripheryWriteTimeout">
      <summary>PeripheryWriteTimeout</summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks">
      <summary>
            The bits in word 2 of the send (Tx, Control) packet.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.None">
      <summary>None</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.SetStationAddress">
      <summary>SetStationAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.ClearStationAddress">
      <summary>ClearStationAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.SetGroupAddress1">
      <summary>SetGroupAddress1</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.ClearGroupAddress1">
      <summary>ClearGroupAddress1</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.SetGroupAddress2">
      <summary>SetGroupAddress2</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.ClearGroupAddress2">
      <summary>ClearGroupAddress2</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.SetGroupAddress3">
      <summary>SetGroupAddress3</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.ClearGroupAddress3">
      <summary>ClearGroupAddress3</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.ClearCrcError">
      <summary>ClearCrcError</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.ClearReceiveOverflowCount">
      <summary>ClearReceiveOverflowCount</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.SetAll">
      <summary>SetAll</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord2Masks.ClearAll">
      <summary>ClearAll</summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.StatusPacket.TxWord6Masks">
      <summary>
            The bit masks in word 6 of the send (Tx, Control) packet.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Masks.None">
      <summary>None</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Masks.PeripheryDeviceAddress">
      <summary>PeripheryDeviceAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Masks.PeripheryRead">
      <summary>PeripheryRead</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Masks.PeripheryRegisterLsbAddress">
      <summary>PeripheryRegisterLsbAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Masks.PeripheryRegisterMsbAddress">
      <summary>PeripheryRegisterMsbAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Masks.PeripheryWrite">
      <summary>PeripheryWrite</summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.StatusPacket.TxWord6Offset">
      <summary>
            The bit offsets in word 6 of the send (Tx, Control) packet.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Offset.PeripheryDeviceAddress">
      <summary>PeripheryDeviceAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Offset.PeripheryRead">
      <summary>PeripheryRead</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Offset.PeripheryRegisterLsbAddress">
      <summary>PeripheryRegisterLsbAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Offset.PeripheryRegisterMsbAddress">
      <summary>PeripheryRegisterMsbAddress</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.TxWord6Offset.PeripheryWrite">
      <summary>PeripheryWrite</summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.StatusPacket.Word3Masks">
      <summary>
            The bit masks in word 3 of the packet.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Masks.GroupAddress1">
      <summary>GroupAddress1</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Masks.GroupAddress2">
      <summary>GroupAddress2</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Masks.GroupAddress3">
      <summary>GroupAddress3</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Masks.None">
      <summary>None</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Masks.StationAddress">
      <summary>StartupSettingsStationAddress</summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.StatusPacket.Word3Offset">
      <summary>
            The bit offsets in word 3 of the packet.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Offset.GroupAddress1">
      <summary>GroupAddress1</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Offset.GroupAddress2">
      <summary>GroupAddress2</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Offset.GroupAddress3">
      <summary>GroupAddress3</summary>
    </member>
    <member name="F:Triamec.TriaLink.Packets.StatusPacket.Word3Offset.StationAddress">
      <summary>StartupSettingsStationAddress</summary>
    </member>
    <member name="T:Triamec.TriaLink.Packets.TriaLinkEndPoint">
      <summary>
            Represents the end point in the Tria-Link protocol.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Packets.TriaLinkEndPoint.#ctor(System.Byte,Triamec.TriaLink.Port,Triamec.TriaLink.TriaLinkEndpointType)">
      <summary>
            Creates a new instance of the <see cref="T:Triamec.TriaLink.Packets.TriaLinkEndPoint" /> structure.
            </summary>
      <param name="address">The station address.</param>
      <param name="port">The port within the station.</param>
      <param name="endPointType">The channel within the station.</param>
    </member>
    <member name="P:Triamec.TriaLink.Packets.TriaLinkEndPoint.Address">
      <summary>
            Gets the station address.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.TriaLinkEndPoint.EndPointType">
      <summary>
            Gets the channel within the station.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Packets.TriaLinkEndPoint.Port">
      <summary>
            Gets the port within the station.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.CongestionControl">
      <summary>
            Counter of active and overloaded sessions.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IAddressControlResponseHandler">
      <summary>
            Interface for callbacks from service response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IAddressControlResponseHandler.OnAddressControlResponse(Triamec.TriaLink.IAddressControlResponse)">
      <summary>
            The response callback for a address control related service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IAddressControlSession">
      <summary>
            Interface for an address control session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IAddressControlSession.AddressControlResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IAddressControlSession.AddressControlResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IAxisControlResponseHandler">
      <summary>
            Interface for callbacks from axis control response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IAxisControlResponseHandler.OnControlAxisResponse(Triamec.TriaLink.IAxisControlResponse)">
      <summary>
            The response callback for an axis control service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IAxisControlSession">
      <summary>
            Interface for a axis control session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IAxisControlSession.AxisControlResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IAxisControlSession.AxisControlResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IControlStatisticsSession">
      <summary>
            Interface for a control statistics session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IControlStatisticsSession.ControlStatisticsResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IDriveControlResponseHandler">
      <summary>
            Interface for callbacks from drive control response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IDriveControlResponseHandler.OnControlDriveResponse(Triamec.TriaLink.IDriveControlResponse)">
      <summary>
            The response callback for a drive control service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IDriveControlSession">
      <summary>
            Interface for a drive control session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IDriveControlSession.DriveControlResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IDriveControlSession.DriveControlResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IEnableSubscriptionResponseHandler">
      <summary>
            Interface for callbacks from subscription response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IEnableSubscriptionResponseHandler.OnEnableSubscriptionResponse(Triamec.TriaLink.IEnableSubscriptionResponse)">
      <summary>
            The response callback for a subscription related service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IEnableSubscriptionSession">
      <summary>
            Interface for an enable subscription session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IEnableSubscriptionSession.EnableSubscriptionResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IEnableSubscriptionSession.EnableSubscriptionResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IIdentificationResponseHandler">
      <summary>
            Interface for callbacks from service response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IIdentificationResponseHandler.OnIdentificationResponse(Triamec.TriaLink.IIdentificationResponse)">
      <summary>
            The response callback for an identification service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IIdentificationSession">
      <summary>
            Interface for a identification session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IIdentificationSession.IdentificationResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IIdentificationSession.IdentificationResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IMoveCommandResponseHandler">
      <summary>
            Interface for callbacks from move command response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IMoveCommandResponseHandler.OnMoveCommandResponse(Triamec.TriaLink.IMoveResponse)">
      <summary>
            The response callback for a move command service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IMoveSession">
      <summary>
            Interface for a move command session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IMoveSession.MoveCommandResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IMoveSession.MoveCommandResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IPublishResponseHandler">
      <summary>
            Interface for callbacks from subscription response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IPublishResponseHandler.OnPublishResponse(Triamec.TriaLink.IPublishResponse)">
      <summary>
            The response callback for a subscription related service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IPublishSession">
      <summary>
            Interface for a publish session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IPublishSession.PublishResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IPublishSession.PublishResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IRegisterRangeResponseHandler">
      <summary>
            Interface for callbacks from service response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IRegisterRangeResponseHandler.OnRegisterRangeResponse(Triamec.TriaLink.IRegisterRangeResponse)">
      <summary>
            The response callback for a register range related service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IRegisterRangeSession">
      <summary>
            Interface for a register range session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IRegisterRangeSession.RegisterRangeResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IRegisterRangeSession.RegisterRangeResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IRegisterResponseHandler">
      <summary>
            Interface for callbacks from service response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IRegisterResponseHandler.OnRegisterResponse(Triamec.TriaLink.IRegisterResponse)">
      <summary>
            The response callback for an internal register related service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IRegisterSession">
      <summary>
            Interface for a register session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IRegisterSession.RegisterResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IRegisterSession.RegisterResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IResetSubscriptionsResponseHandler">
      <summary>
            Base interface for callbacks from subscription response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IResetSubscriptionsResponseHandler.OnResetSubscriptionsResponse(Triamec.TriaLink.IResetSubscriptionsResponse)">
      <summary>
            The response callback for a subscriptions reset service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IResetSubscriptionsSession">
      <summary>
            Interface for a subscription reset session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IResetSubscriptionsSession.ResetSubscriptionsResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IResetSubscriptionsSession.ResetSubscriptionsResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IServiceResponseHandler">
      <summary>
            Base interface for callbacks from service response messages.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IServiceSession">
      <summary>
            Interface for a service session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IServiceSession.ServiceResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IServiceSession.ServiceResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ISession">
      <summary>
            Base interface for all sessions.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ISession.Claimant">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ISession.ClientObject">
      <summary>
            Gets or sets the client object.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.ISession.Deactivate">
      <summary>
            Deactivate this session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ISession.IsActive">
      <summary>
            Indicates whether this session
            claims a session ID.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ISession.Phase">
      <summary>
            Gets the lifecycle phase of this session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ISession.SessionManager">
      <summary>
            Gets the <see cref="P:Triamec.TriaLink.Sessions.ISession.SessionManager" /> where this
            <see cref="T:Triamec.TriaLink.Sessions.ISession" /> belongs to.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.ISession.WaitResponse">
      <summary>
            Waits for this <see cref="T:Triamec.TriaLink.Sessions.ISession" /> to receive a response using the default response timeout.
            </summary>
      <param name="millisecondsTimeout">The additional wait time added to the default response timeout to wait for a response.</param>
      <returns>
            Returns <see langword="true" /> if a response has been received before timeout.
            <see langword="false" /> on timeout.
            The method returns after calling the client's response handler, if any,
            so after this method has returned <see langword="true" />,
            the client's response handler is done.
            </returns>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.ISession.WaitResponse(System.Int32)">
      <summary>
            Wait for this <see cref="T:Triamec.TriaLink.Sessions.ISession" /> to receive a response.
            </summary>
      <param name="millisecondsTimeout">The additional wait time added to the default response timeout to wait for a response.</param>
      <returns>
            Returns <see langword="true" /> if a response has been received before timeout.
            <see langword="false" /> on timeout.
            The method returns after calling the client's response handler, if any,
            so after this method has returned <see langword="true" />,
            the client's response handler is done.
            </returns>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ISessionClaimant">
      <summary>
            Claimant of an <see cref="T:Triamec.TriaLink.Sessions.ISession" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ISessionClaimant.ExpectConflicts">
      <summary>
            Indicates whether the <see cref="T:Triamec.TriaLink.Sessions.SessionManager" /> should expect conflicting communication caused by this
            claimant, on a conflict prone link.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.ISessionClaimant.OnSessionTimeout(Triamec.TriaLink.Sessions.ISession)">
      <summary>
            Handles timed out <see cref="T:Triamec.TriaLink.Sessions.ISession" /> instance.
            </summary>
      <param name="session">
            The session which has this instance assigned to <see cref="P:Triamec.TriaLink.Sessions.ISession.Claimant" /> and which didn't receive
            a response in the default time used by <see cref="M:Triamec.TriaLink.Sessions.ISession.WaitResponse" />.
            </param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ISessionManager">
      <summary>
            Instance in the Tria-Link protocol responsible to create, delete, and expire <see cref="T:Triamec.TriaLink.Sessions.ISession" />s.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.ISessionManager.Reset">
      <summary>
            Immediately forces to unregister all <see cref="T:Triamec.TriaLink.Sessions.ISession" />s.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IStartupControlResponseHandler">
      <summary>
            Callback for <see cref="F:Triamec.TriaLink.ServiceResponseCommand.ControlStartup" /> responses.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IStartupControlResponseHandler.OnStartupControlResponse(Triamec.TriaLink.IStartupControlResponse)">
      <summary>
            The response callback for a startup control related service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IStartupControlSession">
      <summary>
            Session for <see cref="F:Triamec.TriaLink.ServiceResponseCommand.ControlStartup" /> messages.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IStartupControlSession.StartupControlResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IStartupControlSession.StartupControlResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IStatusResponseHandler">
      <summary>
            Interface for callbacks from status response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.IStatusResponseHandler.OnStatusResponse(Triamec.TriaLink.IStatusResponse)">
      <summary>
            The response callback for a status message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IStatusSession">
      <summary>
            Interface for a status session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IStatusSession.StatusResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IStatusSession.StatusResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ISubscribeResponseHandler">
      <summary>
            Base interface for callbacks from subscription response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.ISubscribeResponseHandler.OnSubscribeResponse(Triamec.TriaLink.ISubscribeResponse)">
      <summary>
            The response callback for a subscription related service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ISubscribeSession">
      <summary>
            Interface for a subscribe session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ISubscribeSession.SubscribeResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ISubscribeSession.SubscribeResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ISubscriptionResponseHandler">
      <summary>
            Base interface for callbacks from subscription response messages.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ITamaControlResponseHandler">
      <summary>
            Interface for callbacks from tama control response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.ITamaControlResponseHandler.OnControlTamaResponse(Triamec.TriaLink.ITamaControlResponse)">
      <summary>
            The response callback for a tama control service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ITamaControlSession">
      <summary>
            Interface for a Tama control session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ITamaControlSession.TamaControlResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ITamaControlSession.TamaControlResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ITestSignalResponseHandler">
      <summary>
            Interface for callbacks from test signal response messages.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.ITestSignalResponseHandler.OnTestSignalResponse(Triamec.TriaLink.ITestSignalResponse)">
      <summary>
            The response callback for a test signal service message.
            </summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ITestSignalSession">
      <summary>
            Interface for a test signal session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ITestSignalSession.TestSignalResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ITestSignalSession.TestSignalResponseHandler">
      <summary>
            Gets the claimant of this session.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.ITimedSession">
      <summary>
            Interface for a service session having a <see cref="T:Triamec.TriaLink.Timestamp" /> when it was executed on a station.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ITimedSession.RuleSelector">
      <summary>
            Gets a characteristic object that discriminates the
            Tria-Link command and parameters 
            of this <see cref="T:Triamec.TriaLink.Sessions.ITimedSession" />.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.ITimedSession.TimedResponse">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.IUriReadSession">
      <summary>
            Interface for a URI read session.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.IUriReadSession.Response">
      <summary>
            Gets the response or <see langword="null" /> if no response.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.SessionManager">
      <summary>
            A session manager is 
            a per <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> object
            to create, delete, and expire <see cref="T:Triamec.TriaLink.Sessions.ISession" /> instances.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.SessionManager.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionManager.MaxSessionCount">
      <summary>
            The maximum number of alive sessions.
            </summary>
    </member>
    <member name="P:Triamec.TriaLink.Sessions.SessionManager.TriaLink">
      <summary>
            Gets the <see cref="T:Triamec.TriaLink.TriaLinkProtocol" /> where this
            <see cref="T:Triamec.TriaLink.Sessions.SessionManager" /> belongs to.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Sessions.SessionManager.Triamec#TriaLink#Sessions#ISessionManager#Reset">
      <summary>
            Immediately forces to unregister all <see cref="T:Triamec.TriaLink.Sessions.ISession" />s.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Sessions.SessionPhase">
      <summary>
            The lifecycle <see cref="P:Triamec.TriaLink.Sessions.ISession.Phase" />s of an <see cref="T:Triamec.TriaLink.Sessions.ISession" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionPhase.InCreation">
      <summary>
            The <see cref="T:Triamec.TriaLink.Sessions.ISession" /> is in creation.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionPhase.DeactivatingWithoutResponse">
      <summary>
            Transition from <see cref="F:Triamec.TriaLink.Sessions.SessionPhase.Unresponded" /> to <see cref="F:Triamec.TriaLink.Sessions.SessionPhase.DeactivatedWithoutResponse" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionPhase.DeactivatedWithoutResponse">
      <summary>
            The <see cref="T:Triamec.TriaLink.Sessions.ISession" /> is no longer active and didn't get a response.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionPhase.Unresponded">
      <summary>
        <para>The <see cref="T:Triamec.TriaLink.Sessions.ISession" /> is active waiting for a response.</para>
        <para>This is the typical phase of an <see cref="T:Triamec.TriaLink.Sessions.ISession" />
            when a new instance is exposed to client code.</para>
        <para>An <see cref="T:Triamec.TriaLink.Sessions.ISession" /> in this phase is guaranteed 
            to have been enqueued for sending over the Tria-Link.</para>
        <para>The <see cref="T:Triamec.TriaLink.Sessions.SessionManager" /> reserves an ID
            for an <see cref="T:Triamec.TriaLink.Sessions.ISession" /> as long as it is active.
            Client code must call <see cref="M:Triamec.TriaLink.Sessions.ISession.Deactivate" /> in any case
            to free the reserved session ID, 
            be it after successfully receiving a response or
            when giving up waiting for a response.
            </para>
      </summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionPhase.Responded">
      <summary>
            A response has been received for the <see cref="T:Triamec.TriaLink.Sessions.ISession" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionPhase.Reported">
      <summary>
            A response has been received and the response handlers have been called.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionPhase.DeactivatingWithResponse">
      <summary>
            Transition from <see cref="F:Triamec.TriaLink.Sessions.SessionPhase.Reported" /> to <see cref="F:Triamec.TriaLink.Sessions.SessionPhase.DeactivatedWithResponse" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Sessions.SessionPhase.DeactivatedWithResponse">
      <summary>
            The <see cref="T:Triamec.TriaLink.Sessions.ISession" /> is no longer active but may still be used to read its response.
            </summary>
    </member>
    <member name="T:Triamec.TriaLink.Subscriptions.ISubscriptionManager">
      <summary>
            Instance responsible for setting up and tracking cyclic communication.
            </summary>
    </member>
    <member name="M:Triamec.TriaLink.Subscriptions.ISubscriptionManager.ResetAny">
      <summary>
            Deletes all publications and subscriptions in all Tria-Link stations.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">The reset failed for at least one <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" />.
            </exception>
    </member>
    <member name="M:Triamec.TriaLink.Subscriptions.ISubscriptionManager.ResetOwn">
      <summary>
            Deletes all own publications and subscriptions in all Tria-Link stations.
            </summary>
      <exception cref="T:Triamec.TriaLink.TriaLinkException">The reset failed for at least one <see cref="T:Triamec.TriaLink.Groups.ITriaLinkStation" />.
            </exception>
    </member>
    <member name="T:Triamec.TriaLink.Subscriptions.SubscriptionChunkHandler">
      <summary>
            The prototype for callback methods
            that process subscription packets.
            </summary>
      <param name="packet">A packet.</param>
    </member>
    <member name="T:Triamec.TriaLink.Subscriptions.SubscriptionSpeed">
      <summary>
            Defines the ratio of a sampling rate compared to a base sampling rate.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Subscriptions.SubscriptionSpeed.Regular">
      <summary>
            The sampling rate is equal to the cycle time of the communication task.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Subscriptions.SubscriptionSpeed.Fast">
      <summary>
            The sampling rate is up to five times shorter than the cycle time of the communication task. Samples fit in
            one <see cref="T:Triamec.TriaLink.Packets.Packet" />.
            </summary>
    </member>
    <member name="F:Triamec.TriaLink.Subscriptions.SubscriptionSpeed.SuperFast">
      <summary>
            The sampling rate is shorter than when choosing <see cref="F:Triamec.TriaLink.Subscriptions.SubscriptionSpeed.Fast" />. Samples fit in two or more
            <see cref="T:Triamec.TriaLink.Packets.Packet" />s.
            </summary>
    </member>
  </members>
</doc>